{"documentCount":102,"nextId":102,"documentIds":{"0":"docs/pages/batch-transfer.mdx#airdrop-package-on-sui","1":"docs/pages/batch-transfer.mdx#building-an-airdrop-package","2":"docs/pages/batch-transfer.mdx#conclusion","3":"docs/pages/cli-cheatsheet.mdx#sui-cli-cheat-sheet","4":"docs/pages/cli-cheatsheet.mdx#getting-started-with-sui-cli","5":"docs/pages/cli-cheatsheet.mdx#environment-management-with-sui-cli","6":"docs/pages/cli-cheatsheet.mdx#address-and-key-management-with-sui-cli","7":"docs/pages/cli-cheatsheet.mdx#key-management-with-sui-cli","8":"docs/pages/cli-cheatsheet.mdx#gas-and-faucet-with-sui-cli","9":"docs/pages/cli-cheatsheet.mdx#publishing-packages","10":"docs/pages/cli-cheatsheet.mdx#coin-management-with-sui-cli","11":"docs/pages/cli-cheatsheet.mdx#object-management-with-sui-cli","12":"docs/pages/cli-cheatsheet.mdx#programmable-transaction-blocks-ptbs","13":"docs/pages/cli-cheatsheet.mdx#conclusion","14":"docs/pages/intro-move.mdx#introduction-to-sui-move","15":"docs/pages/intro-move.mdx#getting-started-with-sui-move","16":"docs/pages/intro-move.mdx#useful-sui-development-resources","17":"docs/pages/intro-move.mdx#sui-tears","18":"docs/pages/intro-move.mdx#mysten-labs-sui-examples","19":"docs/pages/intro-move.mdx#awesome-move","20":"docs/pages/intro-move.mdx#everybodys-codebase","21":"docs/pages/intro-move.mdx#the-move-package-registry","22":"docs/pages/intro-move.mdx#conclusion","23":"docs/pages/launch-coin.mdx#create-and-deploy-coins-on-sui","24":"docs/pages/launch-coin.mdx#getting-started-launching-and-deploying-tokens","25":"docs/pages/launch-coin.mdx#suis-token-model","26":"docs/pages/launch-coin.mdx#token-treasury-and-metadata","27":"docs/pages/launch-coin.mdx#creating-a-token-on-sui","28":"docs/pages/launch-coin.mdx#deploying-sui-tokens-on-a-dex","29":"docs/pages/launch-coin.mdx#conclusion","30":"docs/pages/nfts-kiosks.mdx#building-nfts-and-setting-up-kiosks-on-sui","31":"docs/pages/nfts-kiosks.mdx#getting-started--prerequisites","32":"docs/pages/nfts-kiosks.mdx#building-an-nft-on-sui","33":"docs/pages/nfts-kiosks.mdx#launching-nfts-with-kiosk","34":"docs/pages/nfts-kiosks.mdx#conclusion","35":"docs/pages/prod-packages.mdx#beyond-the-basics-of-move","36":"docs/pages/prod-packages.mdx#transaction-context","37":"docs/pages/prod-packages.mdx#module-initializers","38":"docs/pages/prod-packages.mdx#capabilities","39":"docs/pages/prod-packages.mdx#witnesses","40":"docs/pages/prod-packages.mdx#one-time-witness","41":"docs/pages/prod-packages.mdx#time-management-on-sui","42":"docs/pages/prod-packages.mdx#events","43":"docs/pages/prod-packages.mdx#error-handling","44":"docs/pages/prod-packages.mdx#conclusion","45":"docs/pages/sui-15min.mdx#learn-sui-move-in-15-minutes","46":"docs/pages/sui-15min.mdx#packages","47":"docs/pages/sui-15min.mdx#package-manifest-movetoml","48":"docs/pages/sui-15min.mdx#addresses-and-accounts","49":"docs/pages/sui-15min.mdx#transactions","50":"docs/pages/sui-15min.mdx#objects","51":"docs/pages/sui-15min.mdx#publishing-packages-onchain","52":"docs/pages/sui-15min.mdx#move-modules","53":"docs/pages/sui-15min.mdx#importing-modules","54":"docs/pages/sui-15min.mdx#data-structures-and-types","55":"docs/pages/sui-15min.mdx#conditionals","56":"docs/pages/sui-15min.mdx#loops","57":"docs/pages/sui-15min.mdx#structs","58":"docs/pages/sui-15min.mdx#vectors","59":"docs/pages/sui-15min.mdx#collections","60":"docs/pages/sui-15min.mdx#vecset","61":"docs/pages/sui-15min.mdx#vecmap","62":"docs/pages/sui-15min.mdx#strings","63":"docs/pages/sui-15min.mdx#constants","64":"docs/pages/sui-15min.mdx#option","65":"docs/pages/sui-15min.mdx#bags","66":"docs/pages/sui-15min.mdx#tables","67":"docs/pages/sui-15min.mdx#functions-and-methods","68":"docs/pages/sui-15min.mdx#memory-management--ownership","69":"docs/pages/sui-15min.mdx#generics","70":"docs/pages/sui-15min.mdx#conclusion","71":"docs/pages/sui-60s.mdx#sui--move-overview","72":"docs/pages/sui-60s.mdx#sui-move-extends-on-move","73":"docs/pages/ts-advanced.mdx#advanced-sui-typescript-sdk-operations","74":"docs/pages/ts-advanced.mdx#getting-started-with-sui--typescript","75":"docs/pages/ts-advanced.mdx#programmable-transactions-blocks","76":"docs/pages/ts-advanced.mdx#gas-management-on-sui","77":"docs/pages/ts-advanced.mdx#standard-gas-payments","78":"docs/pages/ts-advanced.mdx#sponsored-gas-gasless-transactions","79":"docs/pages/ts-advanced.mdx#calling-smart-contracts","80":"docs/pages/ts-advanced.mdx#conclusion","81":"docs/pages/ts-intro.mdx#sui--typescript-sdk-basics","82":"docs/pages/ts-intro.mdx#getting-started-with-sui-and-typescript","83":"docs/pages/ts-intro.mdx#connecting-to-the-sui-blockchain","84":"docs/pages/ts-intro.mdx#creating-a-sui-wallet","85":"docs/pages/ts-intro.mdx#reading-sui-wallet-balances","86":"docs/pages/ts-intro.mdx#send-coins-or-objects","87":"docs/pages/ts-intro.mdx#conclusion","88":"docs/pages/wallet-evac.mdx#build-a-wallet-evacuation-package","89":"docs/pages/wallet-evac.mdx#building-the-evacuation-package","90":"docs/pages/wallet-evac.mdx#conclusion","91":"docs/pages/walrus-deploy.mdx#lets-deploy-a-walrus-site","92":"docs/pages/walrus-deploy.mdx#installing-walrus-site-builder","93":"docs/pages/walrus-deploy.mdx#deploying-your-walrus-site","94":"docs/pages/walrus-deploy.mdx#purchasing-and-registering-domain-names","95":"docs/pages/walrus-deploy.mdx#conclusion","96":"docs/pages/walrus-ts.mdx#walrus-typescript-sdk-guide","97":"docs/pages/walrus-ts.mdx#getting-started-with-walrus--typescript","98":"docs/pages/walrus-ts.mdx#writing-data-to-walrus","99":"docs/pages/walrus-ts.mdx#reading-data-from-walrus","100":"docs/pages/walrus-ts.mdx#deleting-data-from-walrus","101":"docs/pages/walrus-ts.mdx#conclusion"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[4,1,50],"1":[4,4,200],"2":[1,4,53],"3":[4,1,60],"4":[5,4,93],"5":[5,7,89],"6":[7,4,41],"7":[5,4,97],"8":[6,4,84],"9":[2,4,44],"10":[5,4,113],"11":[5,4,68],"12":[5,4,98],"13":[1,4,50],"14":[4,1,47],"15":[5,4,144],"16":[4,4,68],"17":[2,7,27],"18":[4,7,31],"19":[2,7,27],"20":[3,7,32],"21":[4,7,21],"22":[1,4,36],"23":[6,1,56],"24":[6,6,65],"25":[4,6,112],"26":[4,9,111],"27":[5,6,188],"28":[6,6,62],"29":[1,6,32],"30":[8,1,44],"31":[4,8,84],"32":[5,8,196],"33":[4,8,276],"34":[1,8,33],"35":[5,1,36],"36":[2,5,94],"37":[2,5,59],"38":[1,5,104],"39":[1,5,53],"40":[3,6,72],"41":[4,5,77],"42":[1,5,67],"43":[2,5,115],"44":[1,5,33],"45":[6,1,53],"46":[1,6,108],"47":[5,7,63],"48":[3,6,58],"49":[1,6,67],"50":[1,6,90],"51":[3,7,93],"52":[2,6,46],"53":[2,7,92],"54":[4,6,112],"55":[1,6,75],"56":[1,6,72],"57":[1,6,97],"58":[1,6,59],"59":[1,6,16],"60":[1,6,61],"61":[1,6,81],"62":[1,6,56],"63":[1,6,33],"64":[1,6,47],"65":[1,6,88],"66":[1,6,90],"67":[3,6,105],"68":[4,6,81],"69":[1,6,63],"70":[1,6,40],"71":[4,1,150],"72":[4,4,137],"73":[5,1,36],"74":[6,5,58],"75":[3,5,124],"76":[4,5,38],"77":[3,8,74],"78":[5,8,176],"79":[3,5,61],"80":[1,5,28],"81":[5,1,49],"82":[6,5,122],"83":[5,5,81],"84":[4,5,100],"85":[4,5,122],"86":[4,5,131],"87":[1,5,43],"88":[5,1,45],"89":[4,5,179],"90":[1,5,31],"91":[6,1,51],"92":[4,6,129],"93":[4,6,124],"94":[5,6,57],"95":[1,6,33],"96":[4,1,43],"97":[6,4,154],"98":[4,4,125],"99":[4,4,105],"100":[4,4,81],"101":[1,4,29]},"averageFieldLength":[3.264705882352941,4.999999999999999,79.45098039215688],"storedFields":{"0":{"href":"/batch-transfer#airdrop-package-on-sui","html":"</header>\n<p>Airdrop/batch send smart contracts are a great way to consolidate knowledge after learning a new programming language.</p>\n<p>The aim is simple: Instead of sending to multiple recipients in multiple transactions that use a lot of gas, you can send everything with one function and pay gas once. It’s all about saving fees in one clean transaction.</p>\n","isPage":true,"text":"\nAirdrop/batch send smart contracts are a great way to consolidate knowledge after learning a new programming language.\nThe aim is simple: Instead of sending to multiple recipients in multiple transactions that use a lot of gas, you can send everything with one function and pay gas once. It’s all about saving fees in one clean transaction.\n","title":"Airdrop Package on Sui","titles":[]},"1":{"href":"/batch-transfer#building-an-airdrop-package","html":"\n<p>First, you’ll need to create the project if you don’t have one already.</p>\n<p>You know the drill; execute this command and open your project in your IDE of choice.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> move</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> new</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> airdrop</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> airdrop</span></span></code></pre>\n<p>Now, declare the module like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">module</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> airdrop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mass_send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>These are the imports you’ll need. The <code>Coin</code> module for working with coins and the <code>event</code> module for emitting events.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::coin::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::event;</span></span></code></pre>\n<p>Now, define your event struct like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AirdropEvent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> copy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">drop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    amount: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    recipient: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>You can optionally define custom error codes. In this case, we need to make sure the lengths or the vectors match:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> E_LENGTH_MISMATCH</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Here&#x27;s the main function signature. It takes a coin, a list of recipient addresses, and the amounts each one should receive.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> entry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> send_by_allocation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    coin: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    recipients: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    amounts: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>Now, we can compare the lengths of the recipient vectors and amounts to ensure that every recipient has an allocation.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let num_recipients = vector::length(&amp;recipients);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let num_amounts = vector::length(&amp;amounts);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">assert!(num_recipients == num_amounts, E_LENGTH_MISMATCH);</span></span></code></pre>\n<p>The final piece in the puzzle is to use a loop to transfer tokens to all the recipients with the <code>public_transfer</code> function.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let mut i = 0;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">while (i &lt; num_recipients) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">   let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount = *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">borrow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;amounts, i);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">   let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> recipient = *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">borrow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;recipients, i);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">   let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> portion = coin::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">split</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(coin, amount, ctx);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(portion, recipient);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   event::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">emit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AirdropEvent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            amount,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            recipient,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                i = i + </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>In the loop, you split the coin into the amount allocated for the specific recipient before sending it. Every transfer emits an event.</p>\n<p>Best part? It’s all one transaction. One gas fee.</p>\n<p>Now build the project for some house keeping. Everything should work fine.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sui move build</span></span></code></pre>\n<p>Once it builds successfully, you can publish to the Sui network with this command.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sui client publish --gas-budget 100000000</span></span></code></pre>\n<p>Once you’ve published you can call the function via Sui CLI like this to airdrop to multiple recipients:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> call</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --package</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">YOUR_PACKAGE_I</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">D</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --module</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mass_send</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --function</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> send_by_allocation</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --args</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">COIN_OBJECT_I</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">D</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">         &#x27;[&lt;RECIPIENT_1&gt;, &lt;RECIPIENT_2&gt;, ...]&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">         &#x27;[&lt;AMOUNT_1&gt;, &lt;AMOUNT_2&gt;, ...]&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --type-args</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">TOKEN_TYP</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">E</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --gas-budget</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10000000</span></span></code></pre>\n<p>Replace the arguments with actual values and you’re good to go. Your recipients should recieve the coins you specify.</p>\n","isPage":false,"text":"\nFirst, you’ll need to create the project if you don’t have one already.\nYou know the drill; execute this command and open your project in your IDE of choice.\nsui move new airdrop\ncd airdrop\nNow, declare the module like this:\nmodule airdrop::mass_send;\nThese are the imports you’ll need. The Coin module for working with coins and the event module for emitting events.\nuse sui::coin::{Self, Coin};\nuse sui::event;\nNow, define your event struct like this:\npublic struct AirdropEvent has copy, drop {\n    amount: u64,\n    recipient: address,\n}\nYou can optionally define custom error codes. In this case, we need to make sure the lengths or the vectors match:\nconst E_LENGTH_MISMATCH: u64 = 0;\nHere&#x27;s the main function signature. It takes a coin, a list of recipient addresses, and the amounts each one should receive.\npublic entry fun send_by_allocation&lt;T: store&gt;(\n    coin: &amp;mut Coin&lt;T&gt;,\n    recipients: vector&lt;address&gt;,\n    amounts: vector&lt;u64&gt;,\n    ctx: &amp;mut TxContext\n)\nNow, we can compare the lengths of the recipient vectors and amounts to ensure that every recipient has an allocation.\nlet num_recipients = vector::length(&amp;recipients);\nlet num_amounts = vector::length(&amp;amounts);\nassert!(num_recipients == num_amounts, E_LENGTH_MISMATCH);\nThe final piece in the puzzle is to use a loop to transfer tokens to all the recipients with the public_transfer function.\nlet mut i = 0;\nwhile (i &lt; num_recipients) {\n   let amount = *vector::borrow(&amp;amounts, i);\n   let recipient = *vector::borrow(&amp;recipients, i);\n   let portion = coin::split(coin, amount, ctx);\n   transfer::public_transfer(portion, recipient);\n \n \n   event::emit(AirdropEvent {\n            amount,\n            recipient,\n        });\n \n                i = i + 1;\n    };\n}\nIn the loop, you split the coin into the amount allocated for the specific recipient before sending it. Every transfer emits an event.\nBest part? It’s all one transaction. One gas fee.\nNow build the project for some house keeping. Everything should work fine.\nsui move build\nOnce it builds successfully, you can publish to the Sui network with this command.\nsui client publish --gas-budget 100000000\nOnce you’ve published you can call the function via Sui CLI like this to airdrop to multiple recipients:\nsui client call \\\n  --package &lt;YOUR_PACKAGE_ID&gt; \\\n  --module mass_send \\\n  --function send_by_allocation \\\n  --args &lt;COIN_OBJECT_ID&gt; \\\n         &#x27;[&lt;RECIPIENT_1&gt;, &lt;RECIPIENT_2&gt;, ...]&#x27; \\\n         &#x27;[&lt;AMOUNT_1&gt;, &lt;AMOUNT_2&gt;, ...]&#x27; \\\n  --type-args &lt;TOKEN_TYPE&gt; \\\n  --gas-budget 10000000\nReplace the arguments with actual values and you’re good to go. Your recipients should recieve the coins you specify.\n","title":"Building an Airdrop Package","titles":["Airdrop Package on Sui"]},"2":{"href":"/batch-transfer#conclusion","html":"\n<p>You’ve learned to execute an airdrop without spending so much on gas. Sui’s object-centric model and parallel execution engine make this kind of flow not just possible, but <em>natural</em>.</p>\n<p>With a single transaction, you can send tokens to dozens (or hundreds) of recipients; there is no need for multiple calls or gas fees.</p>","isPage":false,"text":"\nYou’ve learned to execute an airdrop without spending so much on gas. Sui’s object-centric model and parallel execution engine make this kind of flow not just possible, but natural.\nWith a single transaction, you can send tokens to dozens (or hundreds) of recipients; there is no need for multiple calls or gas fees.","title":"Conclusion","titles":["Airdrop Package on Sui"]},"3":{"href":"/cli-cheatsheet#sui-cli-cheat-sheet","html":"</header>\n<p>When building smart contracts, you’ll also need to build a client that interacts with the smart contract. Aside from querying on-chain data, Clients can read and execute smart contracts depending on the primitives defined in the contract.</p>\n<p>Sui CLI is your best bet for a client since you can easily make CLI calls from any language you eventually decide to build clients with. In this article, I’ll provide an overview of the popular commands you’ll need while building on Sui.</p>\n","isPage":true,"text":"\nWhen building smart contracts, you’ll also need to build a client that interacts with the smart contract. Aside from querying on-chain data, Clients can read and execute smart contracts depending on the primitives defined in the contract.\nSui CLI is your best bet for a client since you can easily make CLI calls from any language you eventually decide to build clients with. In this article, I’ll provide an overview of the popular commands you’ll need while building on Sui.\n","title":"Sui CLI Cheat Sheet","titles":[]},"4":{"href":"/cli-cheatsheet#getting-started-with-sui-cli","html":"\n<p>First, you’ll need to install Sui CLI on your computer. Depending on the operating system and package manager you’re using, here’s how you can install Sui CLI on your computer:</p>\n<p>Execute this command on your terminal to install Sui CLI if you’re running a Unix-based operating system (macOS or Linux) via <a href=\"https://brew.sh/\">Homebrew</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">brew</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sui</span></span></code></pre>\n<p>Execute this command on your terminal to install Sui CLI if you’re running Windows via <a href=\"https://chocolatey.org/\">Chocolatey</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">choco</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sui</span></span></code></pre>\n<p>Another route you can use is the Cargo (Rust package manager) route. First, you’ll need to have Rust installed (ships with cargo) and then execute this command to install Sui CLI.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --locked</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/MystenLabs/sui.git</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --branch</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> testnet</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sui</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --features</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tracing</span></span></code></pre>\n<p>You can always execute the <code>--version</code> flag to verify your installation and check the version of Sui CLI you have installed.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --version</span></span></code></pre>\n<p>One flag you’ll use frequently is the—<code>- help</code> flag for the description of every command.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --help</span></span></code></pre>\n<p>It works with almost every command. It should be your mantle whenever you’re stuck.</p>\n<img src=\"/cli-commands.png\" alt=\"Help on Sui CLI\"/>\n<p>Regardless of the command, using <code>-h</code> or <code>--help</code> for help would always be handy.</p>\n","isPage":false,"text":"\nFirst, you’ll need to install Sui CLI on your computer. Depending on the operating system and package manager you’re using, here’s how you can install Sui CLI on your computer:\nExecute this command on your terminal to install Sui CLI if you’re running a Unix-based operating system (macOS or Linux) via Homebrew.\nbrew install sui\nExecute this command on your terminal to install Sui CLI if you’re running Windows via Chocolatey.\nchoco install sui\nAnother route you can use is the Cargo (Rust package manager) route. First, you’ll need to have Rust installed (ships with cargo) and then execute this command to install Sui CLI.\ncargo install --locked --git https://github.com/MystenLabs/sui.git --branch testnet sui --features tracing\nYou can always execute the --version flag to verify your installation and check the version of Sui CLI you have installed.\nsui --version\nOne flag you’ll use frequently is the—- help flag for the description of every command.\nsui --help\nIt works with almost every command. It should be your mantle whenever you’re stuck.\n\nRegardless of the command, using -h or --help for help would always be handy.\n","title":"Getting Started with Sui CLI","titles":["Sui CLI Cheat Sheet"]},"5":{"href":"/cli-cheatsheet#environment-management-with-sui-cli","html":"\n<p>Every chain provides you with three fundamental networks: Mainnet, Testnet, and Devnet. You can also spawn a test chain locally to keep development in stealth mode.</p>\n<p>Here’s the command you’ll execute to spawn a local network.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">RUST_LOG</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;off,sui_node=info&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> start</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --with-faucet</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --force-regenesis</span></span></code></pre>\n<p>The command calls the Sui CLI binary to start a faucet service and generate a new genesis block without persisting the local network state.</p>\n<p>Now, you can connect to the local network with the <code>new-env</code> command like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> new-env</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --alias</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> local</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">rpc-ur</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">l</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># sui client new-env --alias local --rpc http://127.0.0.1:9000</span></span></code></pre>\n<p>You can switch and activate any environment with this general command.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> switch</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --env</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">ENV_NAM</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">E</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>Now,  you can use this command to set the active environment to the new <code>local</code> environment you’ve created.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> switch</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --env</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> local</span></span></code></pre>\n<p>The command switches the currently active environment to the local network you’re running.</p>\n","isPage":false,"text":"\nEvery chain provides you with three fundamental networks: Mainnet, Testnet, and Devnet. You can also spawn a test chain locally to keep development in stealth mode.\nHere’s the command you’ll execute to spawn a local network.\nRUST_LOG=&quot;off,sui_node=info&quot; sui start --with-faucet --force-regenesis\nThe command calls the Sui CLI binary to start a faucet service and generate a new genesis block without persisting the local network state.\nNow, you can connect to the local network with the new-env command like this:\nsui client new-env --alias local --rpc &lt;rpc-url&gt;\n \n# sui client new-env --alias local --rpc http://127.0.0.1:9000\nYou can switch and activate any environment with this general command.\nsui client switch --env &lt;ENV_NAME&gt;\nNow,  you can use this command to set the active environment to the new local environment you’ve created.\nsui client switch --env local\nThe command switches the currently active environment to the local network you’re running.\n","title":"Environment Management with Sui CLI","titles":["Sui CLI Cheat Sheet","Getting Started with Sui CLI"]},"6":{"href":"/cli-cheatsheet#address-and-key-management-with-sui-cli","html":"\n<p>You’ll be switching keys as you deploy smart contracts over the Sui CLI, so here’s how to do that.</p>\n<p>You can view the currently active address with the <code>active-address</code> command</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> active-address</span></span></code></pre>\n<p>You can list all the addresses in your client with the <code>addresses</code> command.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> addresses</span></span></code></pre>\n<p>You can switch addresses as you please with the <code>--address</code> flag before specifying the address.</p>\n","isPage":false,"text":"\nYou’ll be switching keys as you deploy smart contracts over the Sui CLI, so here’s how to do that.\nYou can view the currently active address with the active-address command\nsui client active-address\nYou can list all the addresses in your client with the addresses command.\nsui client addresses\nYou can switch addresses as you please with the --address flag before specifying the address.\n","title":"Address and Key Management with Sui CLI","titles":["Sui CLI Cheat Sheet"]},"7":{"href":"/cli-cheatsheet#key-management-with-sui-cli","html":"\n<p>When building your apps, for security or other reasons, you might want to run CLI commands to work with keys. The <code>keytool</code> command is</p>\n<p>You can list all the keys in a keystore with the <code>list</code> command like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> keytool</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> list</span></span></code></pre>\n<p>You can generate keys with the <code>generate</code> command followed with a specification of the scheme.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> keytool</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> generate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [OPTIONS] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">KEY_SCHEME</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [DERIVATION_PATH] [WORD_LENGTH]</span></span></code></pre>\n<p>You’re probably familiar with the <code>ed25519</code> since that’s what most wallets use. Specify it like this.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> keytool</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> generate</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ed25519</span></span></code></pre>\n<p>You should get the output with the Sui address, mnemonic and other details.</p>\n<img src=\"/generate-key-cli.png\" alt=\"Generate Key Sui CLI\"/>\n<p>The keypair should be private, if you’re generating for users then only users should see it, you should neither see it nor log it for any reasons.</p>\n<p>You can also import Keypair from existing mnemonic with the <code>import command</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> keytool</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> import</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;&lt;MNEMONIC_PHRASE&gt;&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ed25519</span></span></code></pre>\n<p>When you’ve imported it, you can switch to the keypair and start sending transactions with it.</p>\n","isPage":false,"text":"\nWhen building your apps, for security or other reasons, you might want to run CLI commands to work with keys. The keytool command is\nYou can list all the keys in a keystore with the list command like this:\nsui keytool list\nYou can generate keys with the generate command followed with a specification of the scheme.\nsui keytool generate [OPTIONS] &lt;KEY_SCHEME&gt; [DERIVATION_PATH] [WORD_LENGTH]\nYou’re probably familiar with the ed25519 since that’s what most wallets use. Specify it like this.\nsui keytool generate ed25519\nYou should get the output with the Sui address, mnemonic and other details.\n\nThe keypair should be private, if you’re generating for users then only users should see it, you should neither see it nor log it for any reasons.\nYou can also import Keypair from existing mnemonic with the import command.\nsui keytool import &quot;&lt;MNEMONIC_PHRASE&gt;&quot; ed25519\nWhen you’ve imported it, you can switch to the keypair and start sending transactions with it.\n","title":"Key Management with Sui CLI","titles":["Sui CLI Cheat Sheet"]},"8":{"href":"/cli-cheatsheet#gas-and-faucet-with-sui-cli","html":"\n<p>When you’re developing your apps, ideally, you’ll start out on devnet, then testnet before deploying to mainnet.</p>\n<p>Devnet and Testnet gas are free to acquire. But mainnet? nah.</p>\n<p>You can easily request gas on devnet with the <code>client faucet</code> command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> faucet</span></span></code></pre>\n<p>For testnet, you’ll need to execute this cURL command to request gas:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --location</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --request</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> POST</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;https://faucet.devnet.sui.io/v1/gas&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">--header </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Content-Type: application/json&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">--data-raw </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;FixedAmountRequest&quot;: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;recipient&quot;: &quot;&lt;YOUR SUI ADDRESS&gt;&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    }</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}&#x27;</span></span></code></pre>\n<p>You can also visit <a href=\"https://faucet.sui.io/\">the official Sui faucet website</a> to claim some Devnet and Testnet tokens.</p>\n<p>Use the <code>client gas</code> command to check the client’s available gas tokens on the current environment.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> gas</span></span></code></pre>\n<p>For mainnet transactions, you’ll need to acquire Sui from exchanges and fund your wallet.</p>\n","isPage":false,"text":"\nWhen you’re developing your apps, ideally, you’ll start out on devnet, then testnet before deploying to mainnet.\nDevnet and Testnet gas are free to acquire. But mainnet? nah.\nYou can easily request gas on devnet with the client faucet command:\nsui client faucet\nFor testnet, you’ll need to execute this cURL command to request gas:\ncurl --location --request POST &#x27;https://faucet.devnet.sui.io/v1/gas&#x27; \\\n--header &#x27;Content-Type: application/json&#x27; \\\n--data-raw &#x27;{\n    &quot;FixedAmountRequest&quot;: {\n        &quot;recipient&quot;: &quot;&lt;YOUR SUI ADDRESS&gt;&quot;\n    }\n}&#x27;\nYou can also visit the official Sui faucet website to claim some Devnet and Testnet tokens.\nUse the client gas command to check the client’s available gas tokens on the current environment.\nsui client gas\nFor mainnet transactions, you’ll need to acquire Sui from exchanges and fund your wallet.\n","title":"Gas and Faucet with Sui CLI","titles":["Sui CLI Cheat Sheet"]},"9":{"href":"/cli-cheatsheet#publishing-packages","html":"\n<p>You can publish packages on to the Sui network with the <code>client publish</code> command.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> publish</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [OPTIONS] [package_path]</span></span></code></pre>\n<p>Here’s an example command for publishing a package with <code>5000000</code> MIST gas budget.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> publish</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --gas-budget</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 5000000</span></span></code></pre>\n<p>The gas budget isn’t fixed, you most likely want to check onchain for a suitable gas amount and pay it forward.</p>\n","isPage":false,"text":"\nYou can publish packages on to the Sui network with the client publish command.\nsui client publish [OPTIONS] [package_path]\nHere’s an example command for publishing a package with 5000000 MIST gas budget.\nsui client publish --gas-budget 5000000\nThe gas budget isn’t fixed, you most likely want to check onchain for a suitable gas amount and pay it forward.\n","title":"Publishing Packages","titles":["Sui CLI Cheat Sheet"]},"10":{"href":"/cli-cheatsheet#coin-management-with-sui-cli","html":"\n<p>When you’re working with SUI coins, You’ll probably need to merge and split them often—especially when youjuggling gas or sending different amounts to various contracts or users.</p>\n<p>If you’ve have two coins lying around, and you want to consolidate them, use the <code>merge-coin</code> command like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> merge-coin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --primary-coin</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">COIN_I</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">D</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --coin-to-merge</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">COIN_I</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">D</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>The <code>primary-coin</code> is the one you’ll keep, and the <code>coin-to-merge</code> is the one that gets absorbed.</p>\n<p>Need to split a coin instead? Maybe you want to pay out to multiple recipients or just need different denominations. You can slice a coin up using <code>split-coin</code> like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> split-coin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --coin-id</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">COIN_I</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">D</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --amounts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">AMOUNT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">S</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>If you need to send out coins, you’ll use the <code>client transfer-sui</code> command like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> transfer-sui</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --sui-coin-object-id</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">COIN_I</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">D</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">ADDRES</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">S</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>It’s a simple handoff—you give it the coin ID and the recipient’s address, and it moves the funds.</p>\n<p>Sui has programmable transactions so you can send to multiple recipients at once with the <code>pay-sui</code> command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pay-sui</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --input-coins</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">COIN_I</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">D</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --recipients</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">ADDRES</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">S</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --amounts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">AMOUNT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">S</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>You’ll pass a coin (or a list of coins), and then specify the recipients and how much each should get. It’s perfect for batch payments or distributing tokens in bulk.</p>\n","isPage":false,"text":"\nWhen you’re working with SUI coins, You’ll probably need to merge and split them often—especially when youjuggling gas or sending different amounts to various contracts or users.\nIf you’ve have two coins lying around, and you want to consolidate them, use the merge-coin command like this:\nsui client merge-coin --primary-coin &lt;COIN_ID&gt; --coin-to-merge &lt;COIN_ID&gt;\nThe primary-coin is the one you’ll keep, and the coin-to-merge is the one that gets absorbed.\nNeed to split a coin instead? Maybe you want to pay out to multiple recipients or just need different denominations. You can slice a coin up using split-coin like this:\nsui client split-coin --coin-id &lt;COIN_ID&gt; --amounts &lt;AMOUNTS&gt;\nIf you need to send out coins, you’ll use the client transfer-sui command like this:\nsui client transfer-sui --sui-coin-object-id &lt;COIN_ID&gt; --to &lt;ADDRESS&gt;\nIt’s a simple handoff—you give it the coin ID and the recipient’s address, and it moves the funds.\nSui has programmable transactions so you can send to multiple recipients at once with the pay-sui command:\nsui client pay-sui --input-coins &lt;COIN_ID&gt; --recipients &lt;ADDRESS&gt; --amounts &lt;AMOUNTS&gt;\nYou’ll pass a coin (or a list of coins), and then specify the recipients and how much each should get. It’s perfect for batch payments or distributing tokens in bulk.\n","title":"Coin Management with Sui CLI","titles":["Sui CLI Cheat Sheet"]},"11":{"href":"/cli-cheatsheet#object-management-with-sui-cli","html":"\n<p>Sui is all about objects. Contracts, tokens, and even your coins—they&#x27;re all objects.</p>\n<p>To get detailed info on any object, just call:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> object</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">OBJECT_I</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">D</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>This will spit out all the metadata, owner info, and anything else the object is carrying.</p>\n<p>If your object has dynamic fields (like a registry or a growing data structure), you can dig into those too:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> dynamic-field</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">DYNAMIC_FIELD_I</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">D</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>This is very handy feature you might use often during development.</p>\n","isPage":false,"text":"\nSui is all about objects. Contracts, tokens, and even your coins—they&#x27;re all objects.\nTo get detailed info on any object, just call:\nsui client object &lt;OBJECT_ID&gt;\nThis will spit out all the metadata, owner info, and anything else the object is carrying.\nIf your object has dynamic fields (like a registry or a growing data structure), you can dig into those too:\nsui client dynamic-field &lt;DYNAMIC_FIELD_ID&gt;\nThis is very handy feature you might use often during development.\n","title":"Object Management with Sui CLI","titles":["Sui CLI Cheat Sheet"]},"12":{"href":"/cli-cheatsheet#programmable-transaction-blocks-ptbs","html":"\n<p>Sui is one of the few chains with native PTBs. Programmable Transaction Blocks let you bundle multiple operations into a single transaction—kinda like a mini-script that executes on-chain.</p>\n<p>Say you need to call a Move function directly from your CLI. You’ll do that like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ptb</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --move-call</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">PACKAG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">E</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">::</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">MODUL</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">E</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">::</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">FUNCTIO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">N</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;&lt;TYPE&gt;&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">ARG</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">S</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>Replace the package address, module name, and function you’re targeting. Then drop in the type and arguments as needed.</p>\n<p>And if you want to transfer multiple objects to another wallet in one go, you can use PTBs as well:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ptb</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --transfer-objects</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;[&lt;OBJECT_ID&gt;]&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">ADDRES</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">S</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>Wrap the object IDs in brackets if you’re sending more than one, and finish it off with the recipient’s address.</p>\n","isPage":false,"text":"\nSui is one of the few chains with native PTBs. Programmable Transaction Blocks let you bundle multiple operations into a single transaction—kinda like a mini-script that executes on-chain.\nSay you need to call a Move function directly from your CLI. You’ll do that like this:\nsui client ptb --move-call &lt;PACKAGE&gt;::&lt;MODULE&gt;::&lt;FUNCTION&gt; &quot;&lt;TYPE&gt;&quot; &lt;ARGS&gt;\nReplace the package address, module name, and function you’re targeting. Then drop in the type and arguments as needed.\nAnd if you want to transfer multiple objects to another wallet in one go, you can use PTBs as well:\nsui client ptb --transfer-objects &quot;[&lt;OBJECT_ID&gt;]&quot; &lt;ADDRESS&gt;\nWrap the object IDs in brackets if you’re sending more than one, and finish it off with the recipient’s address.\n","title":"Programmable Transaction Blocks (PTBs)","titles":["Sui CLI Cheat Sheet"]},"13":{"href":"/cli-cheatsheet#conclusion","html":"\n<p>Hopefully, this article suffices for introducting you to the Sui CLI tool. It’s more than a client, there’s a lot you can do with this tool.</p>\n<p>If you ever need a quick refresher or you’re trying out a new command, make the <a href=\"https://docs.sui.io/references/cli/cheatsheet\">Sui CLI Cheat Sheet</a> your best friend. And when in doubt, the <a href=\"https://docs.sui.io/references/cli/client\">Sui Client CLI Docs</a> have the full breakdown.</p>","isPage":false,"text":"\nHopefully, this article suffices for introducting you to the Sui CLI tool. It’s more than a client, there’s a lot you can do with this tool.\nIf you ever need a quick refresher or you’re trying out a new command, make the Sui CLI Cheat Sheet your best friend. And when in doubt, the Sui Client CLI Docs have the full breakdown.","title":"Conclusion","titles":["Sui CLI Cheat Sheet"]},"14":{"href":"/intro-move#introduction-to-sui-move","html":"</header>\n<div style=\"position:relative;width:100%;padding-bottom:56.25%;height:0;overflow:hidden\"><iframe src=\"https://www.youtube.com/embed/KRbu5GvkTRc\" title=\"Sui Tutorial\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerPolicy=\"strict-origin-when-cross-origin\" allowFullScreen=\"\" style=\"position:absolute;top:0;left:0;width:100%;height:100%\"></iframe></div>\n<p>Even as a developer with experience writing smart contracts with Rust and Solidity, I initially experienced some overhead trying to understand and express myself with Move.</p>\n<p>This is the first article in my Sui Move series. I promise to set you up for success with everything you need to start building on the Sui blockchain as soon as possible.</p>\n","isPage":true,"text":"\n\nEven as a developer with experience writing smart contracts with Rust and Solidity, I initially experienced some overhead trying to understand and express myself with Move.\nThis is the first article in my Sui Move series. I promise to set you up for success with everything you need to start building on the Sui blockchain as soon as possible.\n","title":"Introduction to Sui Move","titles":[]},"15":{"href":"/intro-move#getting-started-with-sui-move","html":"\n<p>You don’t need development experience to start writing smart contracts. Move is a language with its primitives, so you’ll need some expertise here. Sui Move is the JavaScript of Web3.</p>\n<p>To remain language-agnostic, we’ll use the Sui-CLI tool to interact with the smart contracts we build in this series.</p>\n<p>Depending on the operating system and package manager you’re using, here’s how you can install Sui CLI on your computer:</p>\n<p>Execute this command to install Sui CLI on your terminal if you’re running a Unix-based operating system (macOS or Linux) via <a href=\"https://brew.sh/\">Homebrew</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">brew</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sui</span></span></code></pre>\n<p>Execute this command to install Sui CLI on your terminal if you’re running Windows via <a href=\"https://chocolatey.org/\">Chocolatey</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">choco</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sui</span></span></code></pre>\n<p>Do you have any of these package managers? You should get one. The overhead is less than taking <a href=\"https://docs.sui.io/guides/developer/getting-started/sui-install#install-sui-binaries-from-source\">the Rust route</a>, and you’ll likely use one of these package managers in the future.</p>\n<p>After installing the Sui CLI client, execute this command to verify your installation.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --version</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># output: sui 1.40.1-homebrew</span></span></code></pre>\n<p>The command should output the version of Sui CLI you’ve installed and the installation source.</p>\n<p>Next, you’ll need an IDE to write smart contracts easily and on the fly. Considering it’s 2025, I advise downloading <a href=\"http://cursor.com\">Cursor</a> or <a href=\"https://www.notion.so/2025-The-Goodylili-Brand-165e61ac3cdb807298f9ecdbba5776f6?pvs=21\">VSCode</a> and getting an extension with AI capabilities.</p>\n<p>Unfortunately, I won’t recommend IntelliJ IDEs, although they’re my most used; there’s hardly comprehensive support for Move as much as you’ll get using VSCode, but the option is still open.</p>\n","isPage":false,"text":"\nYou don’t need development experience to start writing smart contracts. Move is a language with its primitives, so you’ll need some expertise here. Sui Move is the JavaScript of Web3.\nTo remain language-agnostic, we’ll use the Sui-CLI tool to interact with the smart contracts we build in this series.\nDepending on the operating system and package manager you’re using, here’s how you can install Sui CLI on your computer:\nExecute this command to install Sui CLI on your terminal if you’re running a Unix-based operating system (macOS or Linux) via Homebrew.\nbrew install sui\nExecute this command to install Sui CLI on your terminal if you’re running Windows via Chocolatey.\nchoco install sui\nDo you have any of these package managers? You should get one. The overhead is less than taking the Rust route, and you’ll likely use one of these package managers in the future.\nAfter installing the Sui CLI client, execute this command to verify your installation.\nsui --version\n \n# output: sui 1.40.1-homebrew\nThe command should output the version of Sui CLI you’ve installed and the installation source.\nNext, you’ll need an IDE to write smart contracts easily and on the fly. Considering it’s 2025, I advise downloading Cursor or VSCode and getting an extension with AI capabilities.\nUnfortunately, I won’t recommend IntelliJ IDEs, although they’re my most used; there’s hardly comprehensive support for Move as much as you’ll get using VSCode, but the option is still open.\n","title":"Getting Started With Sui Move","titles":["Introduction to Sui Move"]},"16":{"href":"/intro-move#useful-sui-development-resources","html":"\n<p>I need you to be successful. There needs to be more of us, so I must point you to the right resources so that you can augment your learning and borrow more perspective.</p>\n<p>The most useful resources for reference are the <a href=\"https://docs.sui.io/concepts/sui-move-concepts\">Sui Move documentation</a> and the <a href=\"https://move-book.com/\">Move Book</a>. Both are from Mysten Labs, and they were very useful in my journey.</p>\n<p>It’s the age of AI, you’ll probably be using it to make your work faster. I found the AI integration in the official Sui documentation helpful, followed by DeepSeek, Claude, and OpenAI’s models in that order.</p>\n","isPage":false,"text":"\nI need you to be successful. There needs to be more of us, so I must point you to the right resources so that you can augment your learning and borrow more perspective.\nThe most useful resources for reference are the Sui Move documentation and the Move Book. Both are from Mysten Labs, and they were very useful in my journey.\nIt’s the age of AI, you’ll probably be using it to make your work faster. I found the AI integration in the official Sui documentation helpful, followed by DeepSeek, Claude, and OpenAI’s models in that order.\n","title":"Useful Sui Development Resources","titles":["Introduction to Sui Move"]},"17":{"href":"/intro-move#sui-tears","html":"\n<p><a href=\"https://docs.interestprotocol.com/overview/deprecated/sui-tears\">Sui Tears by Interest Protocol</a> is a collection of open-source, ready-to-use smart contracts for multiple real-world use cases, including airdrops, DeFi, Governance, etc.</p>\n","isPage":false,"text":"\nSui Tears by Interest Protocol is a collection of open-source, ready-to-use smart contracts for multiple real-world use cases, including airdrops, DeFi, Governance, etc.\n","title":"Sui Tears","titles":["Introduction to Sui Move","Useful Sui Development Resources"]},"18":{"href":"/intro-move#mysten-labs-sui-examples","html":"\n<p><a href=\"https://github.com/MystenLabs/sui/tree/main/examples\">Mysten Labs</a> also has an examples/ directory stacked with practical applications for Sui that you should check out. The examples don’t stop at smart contracts; there are also client-facing integrations.</p>\n","isPage":false,"text":"\nMysten Labs also has an examples/ directory stacked with practical applications for Sui that you should check out. The examples don’t stop at smart contracts; there are also client-facing integrations.\n","title":"Mysten Labs’ Sui Examples","titles":["Introduction to Sui Move","Useful Sui Development Resources"]},"19":{"href":"/intro-move#awesome-move","html":"\n<p><a href=\"https://github.com/MystenLabs/awesome-move?tab=readme-ov-file#videos\">Awesome Move</a> is a collection of code and content from the Move community. Regardless of your learning style, you’ll find everything necessary to succeed as a Move developer here.</p>\n","isPage":false,"text":"\nAwesome Move is a collection of code and content from the Move community. Regardless of your learning style, you’ll find everything necessary to succeed as a Move developer here.\n","title":"Awesome Move","titles":["Introduction to Sui Move","Useful Sui Development Resources"]},"20":{"href":"/intro-move#everybodys-codebase","html":"\n<p>You can <a href=\"https://docs.github.com/en/search-github/github-code-search/understanding-github-code-search-syntax\">search GitHub</a> for Move codebases and check out what Move devs are cooking. On the Github Search bar, use <code>language:Move</code>  and further filter to narrow results based on what you’re searching for.</p>\n<img src=\"/move-github.png\" alt=\"Move Search on GitHub\"/>\n","isPage":false,"text":"\nYou can search GitHub for Move codebases and check out what Move devs are cooking. On the Github Search bar, use language:Move  and further filter to narrow results based on what you’re searching for.\n\n","title":"Everybody’s Codebase","titles":["Introduction to Sui Move","Useful Sui Development Resources"]},"21":{"href":"/intro-move#the-move-package-registry","html":"\n<p>The <a href=\"https://www.moveregistry.com/\">Move Package Registry</a> is the npmjs.com alternative for Sui Move projects. It is a place to share and discover Move packages.</p>\n","isPage":false,"text":"\nThe Move Package Registry is the npmjs.com alternative for Sui Move projects. It is a place to share and discover Move packages.\n","title":"The Move Package Registry","titles":["Introduction to Sui Move","Useful Sui Development Resources"]},"22":{"href":"/intro-move#conclusion","html":"\n<p>This was an intro article to set you up with tools and resources. Check out the following article to learn how to use the Sui CLI. I’ve outlined the most useful commands so you can use them as a cheat sheet.</p>","isPage":false,"text":"\nThis was an intro article to set you up with tools and resources. Check out the following article to learn how to use the Sui CLI. I’ve outlined the most useful commands so you can use them as a cheat sheet.","title":"Conclusion","titles":["Introduction to Sui Move"]},"23":{"href":"/launch-coin#create-and-deploy-coins-on-sui","html":"</header>\n<p>Tokens are the most trendy thing to do on-chain. Of course, you have launch pads like Movepump, DoubleUp, and all the others that allow you to create tokens and deploy them with zero code, but you can only go so far with them.</p>\n<p>For more ergonomics and options, you’d need to create your tokens from scratch. This article will teach you how tokens are represented on Sui and how to launch tokens and make them tradable.</p>\n","isPage":true,"text":"\nTokens are the most trendy thing to do on-chain. Of course, you have launch pads like Movepump, DoubleUp, and all the others that allow you to create tokens and deploy them with zero code, but you can only go so far with them.\nFor more ergonomics and options, you’d need to create your tokens from scratch. This article will teach you how tokens are represented on Sui and how to launch tokens and make them tradable.\n","title":"Create and Deploy Coins on Sui","titles":[]},"24":{"href":"/launch-coin#getting-started-launching-and-deploying-tokens","html":"\n<p>This article assumes you understand Sui Move and have already installed your development environment with an IDE and Sui CLI. If you don’t,  check out the first article to get set up.</p>\n<p>You’ll also need a Sui wallet. We’d be launching the token on the Sui mainnet so that you can trade it in real time across DEXs. You can deploy to any DEX, but in this case, we’d deploy to Aftermath (because it’s my favourite)</p>\n","isPage":false,"text":"\nThis article assumes you understand Sui Move and have already installed your development environment with an IDE and Sui CLI. If you don’t,  check out the first article to get set up.\nYou’ll also need a Sui wallet. We’d be launching the token on the Sui mainnet so that you can trade it in real time across DEXs. You can deploy to any DEX, but in this case, we’d deploy to Aftermath (because it’s my favourite)\n","title":"Getting Started: Launching and Deploying Tokens","titles":["Create and Deploy Coins on Sui"]},"25":{"href":"/launch-coin#suis-token-model","html":"\n<p>Unlike other chains with a global key-value store or account-bound balances, Everything on Sui is an object.</p>\n<p>That design choice changes how you think about assets. It also gives you much more flexibility. Let’s marinate your point of view before launching tokens.</p>\n<p>On Sui, a token is just a <code>struct</code> defined in a package, wrapped with the <code>Coin&lt;T&gt;</code> type.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyToken</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span></code></pre>\n<p>Once you declare it and register it on-chain, it becomes a usable coin type. Every <code>Coin&lt;MyToken&gt;</code> instance is an <strong>object</strong> on-chain with its own unique ID.</p>\n<p>Unlike traditional token standards (like ERC-20) that just keep balances, here every token is an <em>actual owned resource</em>.</p>\n<p>When a user holds 1000 <code>MyToken</code>, they’re not holding a “balance”—they have one or more <code>Coin&lt;MyToken&gt;</code> objects totalling 1000 units.</p>\n<p>You can merge, split, burn, or send them—because they’re owned objects, not just numbers in a map.</p>\n","isPage":false,"text":"\nUnlike other chains with a global key-value store or account-bound balances, Everything on Sui is an object.\nThat design choice changes how you think about assets. It also gives you much more flexibility. Let’s marinate your point of view before launching tokens.\nOn Sui, a token is just a struct defined in a package, wrapped with the Coin&lt;T&gt; type.\nstruct MyToken has store {}\nOnce you declare it and register it on-chain, it becomes a usable coin type. Every Coin&lt;MyToken&gt; instance is an object on-chain with its own unique ID.\nUnlike traditional token standards (like ERC-20) that just keep balances, here every token is an actual owned resource.\nWhen a user holds 1000 MyToken, they’re not holding a “balance”—they have one or more Coin&lt;MyToken&gt; objects totalling 1000 units.\nYou can merge, split, burn, or send them—because they’re owned objects, not just numbers in a map.\n","title":"Sui’s Token Model","titles":["Create and Deploy Coins on Sui"]},"26":{"href":"/launch-coin#token-treasury-and-metadata","html":"\n<p>When you create a token, you’d use a treasury cap pattern to control token minting (the right to mint more tokens into the supply)/</p>\n<p>When you create a token, you generate a <code>(TreasuryCap&lt;T&gt;, Metadata)</code> tuple:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let (treasury_cap, metadata) = coin=::create_currency&lt;MyToken&gt;(...);</span></span></code></pre>\n<p>Only the treasury cap holder can mint new tokens. You can transfer it to another wallet or lock it in a contract.</p>\n<p>No more tokens can ever be minted if it&#x27;s lost or burned. This gives you fine-grained control over token economics and lifecycle.</p>\n<p>Sui separates token <strong>logic</strong> from <strong>metadata: t</strong>he display name, symbol, description, and image URL are stored in a separate <code>Object</code> of type <code>Metadata</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Metadata {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  name: b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">MyToken</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  symbol: b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">MTK</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  description: b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">A very serious token</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  icon_url: b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">https://example.com/logo.png</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>And since metadata is tied to the <strong>type</strong>, not individual objects, all <code>Coin&lt;MyToken&gt;</code> instances share the same metadata.</p>\n<p>Now that you understand the mechanics of Sui tokens, let’s create one immediately.</p>\n","isPage":false,"text":"\nWhen you create a token, you’d use a treasury cap pattern to control token minting (the right to mint more tokens into the supply)/\nWhen you create a token, you generate a (TreasuryCap&lt;T&gt;, Metadata) tuple:\nlet (treasury_cap, metadata) = coin=::create_currency&lt;MyToken&gt;(...);\nOnly the treasury cap holder can mint new tokens. You can transfer it to another wallet or lock it in a contract.\nNo more tokens can ever be minted if it&#x27;s lost or burned. This gives you fine-grained control over token economics and lifecycle.\nSui separates token logic from metadata: the display name, symbol, description, and image URL are stored in a separate Object of type Metadata.\nMetadata {\n  name: b&quot;MyToken&quot;,\n  symbol: b&quot;MTK&quot;,\n  description: b&quot;A very serious token&quot;,\n  icon_url: b&quot;https://example.com/logo.png&quot;\n}\nAnd since metadata is tied to the type, not individual objects, all Coin&lt;MyToken&gt; instances share the same metadata.\nNow that you understand the mechanics of Sui tokens, let’s create one immediately.\n","title":"Token Treasury and Metadata","titles":["Create and Deploy Coins on Sui","Sui’s Token Model"]},"27":{"href":"/launch-coin#creating-a-token-on-sui","html":"\n<p>First, set up your project if you haven’t done that already:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sui move new goodylili</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cd goodylili</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">code .</span></span></code></pre>\n<p>You’ll get a <code>sources/</code> folder and <code>Move.toml</code>. This is your token package.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">module</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> impatient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">goodylili</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::coin::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TreasuryCap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::url;</span></span></code></pre>\n<p>Now import these packages. You’ll use the <code>TreasuryCap</code> to manage the token&#x27;s treasury cap and the URL package to add an image to the token.</p>\n<p>Now, create a coin instance like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> GOODYLILI</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> drop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span></code></pre>\n<p>Your init function will take in the witness and transaction context and create a token with the <code>coin::create_currency</code> function.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(witness: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">GOODYLILI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create the icon URL</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> icon_url = url::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new_unsafe_from_bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">https://framerusercontent.com/images/0KKocValgAmB9XHzcFI6tALxGGQ.jpg</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> decimals: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Fixed multiplier for 8 decimals (10^8)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> multiplier = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 10^8</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create the currency - make treasury mutable</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> treasury, metadata) = coin::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">create_currency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        witness,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        decimals,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">GOODYLILI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">GOODYLILI ON SUI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">Goodylili Taught Sui. Here&#x27;s proof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        option::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">some</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(icon_url),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ctx,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Mint 300 tokens (300 * 10^8 base units)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> initial_coins = coin::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> treasury, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">300</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> * multiplier, ctx);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(initial_coins, tx_context::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_freeze_object</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(metadata);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(treasury, tx_context::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>We’re minting and transferring some coins from the treasury to provide liquidity on Aftermath later. Why freeze the <code>metadata</code>? So that it’s not modifiable.</p>\n<p>You’d need to mint tokens duly, so it’s best to have a separate function you can call for that.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> entry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    treasury_cap: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TreasuryCap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">GOODYLILI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    amount: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    recipient: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> coin = coin::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(treasury_cap, amount, ctx);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(coin, recipient);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>In this case, after minting, we’ve sent the tokens to the specified address. The function is public, but only an address with the treasury cap can mint the tokens.</p>\n<p>Now that everything looks great, you can publish the package on chain with this command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"shell\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> publish</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --gas-budget</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100000000</span></span></code></pre>\n<p>You should get the transaction details along with the coins’ package ID from the output of the transaction like this:</p>\n<p><img src=\"attachment:aaf554c3-e7c4-4964-91ca-7189bcbad0c0:image.png\" alt=\"image.png\"/></p>\n<p>That’s not where it ends. You need to deploy on a DEX to make your tokens tradable.</p>\n","isPage":false,"text":"\nFirst, set up your project if you haven’t done that already:\nsui move new goodylili\ncd goodylili\ncode .\nYou’ll get a sources/ folder and Move.toml. This is your token package.\nmodule impatient::goodylili;\n \nuse sui::coin::{Self, TreasuryCap};\nuse sui::url;\nNow import these packages. You’ll use the TreasuryCap to manage the token&#x27;s treasury cap and the URL package to add an image to the token.\nNow, create a coin instance like this:\npublic struct GOODYLILI has drop {}\nYour init function will take in the witness and transaction context and create a token with the coin::create_currency function.\nfun init(witness: GOODYLILI, ctx: &amp;mut TxContext) {\n    // Create the icon URL\n    let icon_url = url::new_unsafe_from_bytes(b&quot;https://framerusercontent.com/images/0KKocValgAmB9XHzcFI6tALxGGQ.jpg&quot;);\n    let decimals: u8 = 8;\n \n    // Fixed multiplier for 8 decimals (10^8)\n    let multiplier = 100000000; // 10^8\n \n    // Create the currency - make treasury mutable\n    let (mut treasury, metadata) = coin::create_currency(\n        witness,\n        decimals,\n        b&quot;GOODYLILI&quot;,\n        b&quot;GOODYLILI ON SUI&quot;,\n        b&quot;Goodylili Taught Sui. Here&#x27;s proof&quot;,\n        option::some(icon_url),\n        ctx,\n    );\n \n    // Mint 300 tokens (300 * 10^8 base units)\n    let initial_coins = coin::mint(&amp;mut treasury, 300 * multiplier, ctx);\n    transfer::public_transfer(initial_coins, tx_context::sender(ctx));\n \n    transfer::public_freeze_object(metadata);\n    transfer::public_transfer(treasury, tx_context::sender(ctx));\n}\nWe’re minting and transferring some coins from the treasury to provide liquidity on Aftermath later. Why freeze the metadata? So that it’s not modifiable.\nYou’d need to mint tokens duly, so it’s best to have a separate function you can call for that.\npublic entry fun mint(\n    treasury_cap: &amp;mut TreasuryCap&lt;GOODYLILI&gt;,\n    amount: u64,\n    recipient: address,\n    ctx: &amp;mut TxContext,\n) {\n    let coin = coin::mint(treasury_cap, amount, ctx);\n    transfer::public_transfer(coin, recipient);\n}\nIn this case, after minting, we’ve sent the tokens to the specified address. The function is public, but only an address with the treasury cap can mint the tokens.\nNow that everything looks great, you can publish the package on chain with this command:\nsui client publish --gas-budget 100000000\nYou should get the transaction details along with the coins’ package ID from the output of the transaction like this:\n\nThat’s not where it ends. You need to deploy on a DEX to make your tokens tradable.\n","title":"Creating a token on Sui","titles":["Create and Deploy Coins on Sui"]},"28":{"href":"/launch-coin#deploying-sui-tokens-on-a-dex","html":"\n<p>Deploying tokens on DEXs is easy. You have to pair them with any other tokens with a value.</p>\n<p>You will most likely want to do this with popular tokens like Sui or USDC, which have significant liquidity.</p>\n<p>First, visit the DEX. In this case, we’re deploying on Aftermath, so visit aftermath.finance, connect your wallet, and follow these steps.</p>\n<p>// video here</p>\n<p>That’s it, as you can see, you can now trade your tokens.</p>\n","isPage":false,"text":"\nDeploying tokens on DEXs is easy. You have to pair them with any other tokens with a value.\nYou will most likely want to do this with popular tokens like Sui or USDC, which have significant liquidity.\nFirst, visit the DEX. In this case, we’re deploying on Aftermath, so visit aftermath.finance, connect your wallet, and follow these steps.\n// video here\nThat’s it, as you can see, you can now trade your tokens.\n","title":"Deploying Sui Tokens on a DEX","titles":["Create and Deploy Coins on Sui"]},"29":{"href":"/launch-coin#conclusion","html":"\n<p>You’ve learned how to create and deploy a coin from start to finish and get it trading on a DEX.</p>\n<p>Next, learn how you can do the same for NFTs with regular objects and Kiosks.</p>","isPage":false,"text":"\nYou’ve learned how to create and deploy a coin from start to finish and get it trading on a DEX.\nNext, learn how you can do the same for NFTs with regular objects and Kiosks.","title":"Conclusion","titles":["Create and Deploy Coins on Sui"]},"30":{"href":"/nfts-kiosks#building-nfts-and-setting-up-kiosks-on-sui","html":"</header>\n<p>You want to launch an NFT collection on Sui? Great choice! Sui is one of the few blockchains where NFTs are alive. Sui NFTs are dynamic, and you can make them evolve.</p>\n<p>This article will guide you through the end-to-end process of launching an NFT collection on Sui. Ultimately, you should have an NFT that’s tradable on marketplaces.</p>\n","isPage":true,"text":"\nYou want to launch an NFT collection on Sui? Great choice! Sui is one of the few blockchains where NFTs are alive. Sui NFTs are dynamic, and you can make them evolve.\nThis article will guide you through the end-to-end process of launching an NFT collection on Sui. Ultimately, you should have an NFT that’s tradable on marketplaces.\n","title":"Building NFTs and Setting up Kiosks on Sui","titles":[]},"31":{"href":"/nfts-kiosks#getting-started--prerequisites","html":"\n<p>This article assumes you understand Sui Move and have already installed your development environment with an IDE and Sui CLI. If you don’t,  check out this article to get set up</p>\n<p>Once you’re all set up, create a new project with this command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> move</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> new</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">your</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> project</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> nam</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">e</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>Great, now add these imports to the top of the file where you’re writing your code:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> std::string::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// work with strings</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::url::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// work with URLs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::event; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// emit events</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::balance::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Balance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// work with balances</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::coin::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// work with coins</span></span></code></pre>\n<p>Now, let&#x27;s get our hands dirty defining structs for our NFT</p>\n","isPage":false,"text":"\nThis article assumes you understand Sui Move and have already installed your development environment with an IDE and Sui CLI. If you don’t,  check out this article to get set up\nOnce you’re all set up, create a new project with this command:\nsui move new &lt;your project name&gt;\nGreat, now add these imports to the top of the file where you’re writing your code:\nuse std::string::{Self, String}; // work with strings\nuse sui::url::{Self, Url}; // work with URLs\nuse sui::event; // emit events\nuse sui::balance::{Self, Balance}; // work with balances\nuse sui::coin::{Self, Coin}; // work with coins\nNow, let&#x27;s get our hands dirty defining structs for our NFT\n","title":"Getting Started &amp; Prerequisites","titles":["Building NFTs and Setting up Kiosks on Sui"]},"32":{"href":"/nfts-kiosks#building-an-nft-on-sui","html":"\n<p>Before defining your structs, you need to understand your aim and your NFT collection&#x27;s traits, habits, and features.</p>\n<p>In this tutorial, we want an NFT collection with life, so we’d give it an account. The NFT collection should be able to hold assets. This is great if you want to create an NFT collection with revenue or airdrops to holders.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> GOODYLILI_NFT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">phantom</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    id: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    name: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    rarity: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    description: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    url: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    balance: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Balance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> NFTMinted</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> copy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">drop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    rarity: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    nft_name: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    description: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    url: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The <code>GOODYLILI_NFT</code> struct represents the NFT collection with all the necessary fields, including a <code>balance</code> field. Notice that the struct has the <code>key</code> and <code>store</code> abilities.</p>\n<p>The <code>NFTMinted</code> struct is for emitting events whenever a new NFT is minted.</p>\n<p>Now, you’ll need an <code>init</code> function that will execute once to initialize traits and claim the publisher capability. The publisher capability allows you admin controls over the NFT collection.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(otw: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">GOODYLILI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> keys = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">description</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">image_url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">rarity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;),</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ];</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> values = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">description</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">image_url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">rarity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;),</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ];</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> publisher = package::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">claim</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(otw, ctx);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> display = display::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new_with_fields</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">GOODYLILI_NFT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SUI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;&gt; (</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            &amp;publisher, keys, values, ctx</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        display.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">update_version</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(publisher, tx_context::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(display, tx_context::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n<p>The <code>publisher</code> variable has this capability, and once the init function runs, it will be sent to the address that deploys the contract.</p>\n<p>You’ll also need a mint function to mint new NFTs into circulation. Here’s how to declare one.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#[allow(lint(self_transfer))]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mint_to_sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    name: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    description: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    url: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sender = ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nft = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">GOODYLILI_NFT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        id: object::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        name: string::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(name),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        description: string::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(description),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        url: url::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new_unsafe_from_bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(url),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        balance: balance::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">zero</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Initialize with zero balance</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    event::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">emit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">NFTMinted</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        nft_name: string::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(name),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        description: string::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(description),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        url: url::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new_unsafe_from_bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(url),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nft, sender);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>All you needed to do was create a new instance of the struct. Cool right? Here, we are emitting an event with details of our minted NFT.</p>\n<p>Anybody should be able to fund the NFT’s account, so you’ll need to make the add function a public entry function.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> entry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> add_balance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    nft: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> GOODYLILI_NFT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    amount: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    payment: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> coin_balance = coin::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balance_mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(payment);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> paid = balance::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">split</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(coin_balance, amount);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    balance::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">join</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nft.balance, paid);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The <code>coin_balance</code> is the balance of the <code>Coin&lt;T&gt;</code> passed in by the caller, stored in the object. Then, the <code>paid</code> is a split off the amount from the balance. The <code>balance::join</code> function joins the NFT’s balance with the amount paid.</p>\n<p>You’ll also need a function for holders to withdraw funds from the NFT.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> entry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> withdraw_balance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    nft: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> GOODYLILI_NFT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    amount: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> withdrawn = coin::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">from_balance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            balance::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">split</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nft.balance, amount),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            ctx</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(withdrawn, tx_context::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>In this case, you’re using the <code>balance::split</code> function to split the amount from the NFT’s balance before sending the funds to the transaction sender.</p>\n","isPage":false,"text":"\nBefore defining your structs, you need to understand your aim and your NFT collection&#x27;s traits, habits, and features.\nIn this tutorial, we want an NFT collection with life, so we’d give it an account. The NFT collection should be able to hold assets. This is great if you want to create an NFT collection with revenue or airdrops to holders.\npublic struct GOODYLILI_NFT&lt;phantom T&gt; has key, store {\n    id: UID,\n    name: String,\n    rarity: u8,\n    description: String,\n    url: Url,\n    balance: Balance&lt;T&gt;\n}\n \npublic struct NFTMinted has copy, drop {\n    rarity: u8,\n    nft_name: String,\n    description: String,\n    url: Url,\n}\nThe GOODYLILI_NFT struct represents the NFT collection with all the necessary fields, including a balance field. Notice that the struct has the key and store abilities.\nThe NFTMinted struct is for emitting events whenever a new NFT is minted.\nNow, you’ll need an init function that will execute once to initialize traits and claim the publisher capability. The publisher capability allows you admin controls over the NFT collection.\nfun init(otw: GOODYLILI, ctx: &amp;mut TxContext) {\n        let keys = vector[\n            utf8(b&quot;name&quot;),\n            utf8(b&quot;description&quot;),\n            utf8(b&quot;image_url&quot;),\n            utf8(b&quot;rarity&quot;),\n \n        ];\n \n        let values = vector[\n            utf8(b&quot;name&quot;),\n            utf8(b&quot;description&quot;),\n            utf8(b&quot;image_url&quot;),\n            utf8(b&quot;rarity&quot;),\n \n        ];\n \n        let publisher = package::claim(otw, ctx);\n \n        let mut display = display::new_with_fields&lt;GOODYLILI_NFT&lt;SUI&gt;&gt; (\n            &amp;publisher, keys, values, ctx\n        );\n \n        display.update_version();\n \n        transfer::public_transfer(publisher, tx_context::sender(ctx));\n        transfer::public_transfer(display, tx_context::sender(ctx));\n    }\nThe publisher variable has this capability, and once the init function runs, it will be sent to the address that deploys the contract.\nYou’ll also need a mint function to mint new NFTs into circulation. Here’s how to declare one.\n#[allow(lint(self_transfer))]\npublic fun mint_to_sender&lt;T: store&gt;(\n    name: vector&lt;u8&gt;,\n    description: vector&lt;u8&gt;,\n    url: vector&lt;u8&gt;,\n    ctx: &amp;mut TxContext,\n) {\n    let sender = ctx.sender();\n    let nft = GOODYLILI_NFT&lt;T&gt; {\n        id: object::new(ctx),\n        name: string::utf8(name),\n        description: string::utf8(description),\n        url: url::new_unsafe_from_bytes(url),\n        balance: balance::zero(), // Initialize with zero balance\n    };\n \n    event::emit(NFTMinted {\n        nft_name: string::utf8(name),\n        description: string::utf8(description),\n        url: url::new_unsafe_from_bytes(url),\n    });\n \n    transfer::public_transfer(nft, sender);\n}\nAll you needed to do was create a new instance of the struct. Cool right? Here, we are emitting an event with details of our minted NFT.\nAnybody should be able to fund the NFT’s account, so you’ll need to make the add function a public entry function.\npublic entry fun add_balance&lt;T: store&gt;(\n    nft: &amp;mut GOODYLILI_NFT&lt;T&gt;,\n    amount: u64,\n    payment: &amp;mut Coin&lt;T&gt;\n){\n    let coin_balance = coin::balance_mut(payment);\n    let paid = balance::split(coin_balance, amount);\n    balance::join(&amp;mut nft.balance, paid);\n}\nThe coin_balance is the balance of the Coin&lt;T&gt; passed in by the caller, stored in the object. Then, the paid is a split off the amount from the balance. The balance::join function joins the NFT’s balance with the amount paid.\nYou’ll also need a function for holders to withdraw funds from the NFT.\npublic entry fun withdraw_balance&lt;T: store&gt;(\n    nft: &amp;mut GOODYLILI_NFT&lt;T&gt;,\n    amount: u64,\n    ctx: &amp;mut TxContext\n    ) {\n        let withdrawn = coin::from_balance(\n            balance::split(&amp;mut nft.balance, amount),\n            ctx\n        );\n \n        transfer::public_transfer(withdrawn, tx_context::sender(ctx));\n    }\n}\nIn this case, you’re using the balance::split function to split the amount from the NFT’s balance before sending the funds to the transaction sender.\n","title":"Building an NFT on Sui","titles":["Building NFTs and Setting up Kiosks on Sui"]},"33":{"href":"/nfts-kiosks#launching-nfts-with-kiosk","html":"\n<p>Sui provides kiosks that are more ergonomic than on-chain assets. It’s like opening a brand for items, and then you get to specify and enforce policies over the items.</p>\n<p>Many of your favourite NFT collections, including Prime Machin and Rootlets, use Kiosk.</p>\n<p>First, you need to add all these imports to your package.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::url::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> std::string::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::balance::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Balance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::sui::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SUI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::coin::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::balance;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::transfer_policy::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TransferPolicy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TransferPolicyCap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TransferRequest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> E_INSUFFICIENT_AMOUNT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>You’re importing the usual suspects: strings, coins, and balances plus <code>transfer_policy</code>, which is the real star of this section.</p>\n<p>The <code>transfer_policy</code> module defines <strong>how assets can be transferred</strong> and enforces rules on those transfers.</p>\n<p>Here’s a table of the transfer policy features:</p>\n<table><thead><tr><th>Feature</th><th>What it means</th></tr></thead><tbody><tr><td><code>TransferPolicy&lt;T&gt;</code></td><td>A shared object that defines the rules for transferring type <code>T</code></td></tr><tr><td><code>TransferPolicyCap&lt;T&gt;</code></td><td>A capability (object) that lets you <strong>modify</strong> the policy — only the holder can change or add rules</td></tr><tr><td><code>TransferRequest&lt;T&gt;</code></td><td>An object created whenever someone tries to transfer type <code>T</code>. They must fulfill the policy rules before the transfer is finalized</td></tr><tr><td><code>add_rule(...)</code></td><td>Adds a custom rule (like “pay 1 SUI”) to the policy</td></tr><tr><td><code>add_to_balance(...)</code></td><td>Lets you collect fees or payments tied to transfers</td></tr><tr><td><code>add_receipt(...)</code></td><td>Marks a rule as fulfilled for a given transfer</td></tr><tr><td><code>confirm_request(...)</code></td><td>Finalizes a transfer if <strong>all</strong> rules are met</td></tr></tbody></table>\n<p>Now that you understand the transfer policy. Let’s define the NFT struct and specify transfer policies on the NFT.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Art</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    id: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    name: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    url: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    balance: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Balance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SUI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>We’ll need to define a <strong>rule</strong> and a <strong>configuration t</strong>o charge a fee or enforce conditions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Rule</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> drop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">drop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span></code></pre>\n<p>This creates a new rule type, <code>Rule</code>, and an empty <code>Config</code>. We’ll plug this into the policy later.</p>\n<p>Here’s a basic function to mint a new <code>Art</code> NFT:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Mint an NFT (for demo/testing)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(name: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, url: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">): </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Art</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    Art</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        id: object::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        name,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        url,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        balance: balance::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">zero</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>It creates a new object and assigns it a name, image, and zero token balance.</p>\n<p>Now we need to create a transfer policy like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#[allow(lint(share_owned, self_transfer))]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> create_policy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(publisher: &amp;sui::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">package</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Publisher</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (policy, cap) = transfer_policy::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Art</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(publisher, ctx);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_share_object</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(policy);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(cap, tx_context::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Here’s what’s happening:</p>\n<ul>\n<li><code>transfer_policy::new</code> creates the policy and its capability (<code>cap</code>)</li>\n<li>The policy is made <strong>shared</strong> so everyone can access it</li>\n<li>The cap is <strong>transferred</strong> to the caller so only they can manage the policy</li>\n</ul>\n<p>This step is mandatory. Without a policy, Kiosk listings won’t be enforceable.</p>\n<p>Now, we can  attach the rule to the policy like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> add_rule</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    policy: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransferPolicy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Art</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cap: &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TransferPolicyCap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Art</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer_policy::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add_rule</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Rule</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}, policy, cap, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Config</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {});</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>This registers your custom rule (<code>Rule</code>) and its config. This function can only be called by whoever holds the <code>TransferPolicyCap</code>.</p>\n<p>Here’s the critical part: enforcing a <strong>1 SUI transfer fee:</strong></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> pay</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    policy: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransferPolicy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Art</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    request: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransferRequest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Art</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    coin: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SUI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">!(coin::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;coin) == </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_000_000_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">E_INSUFFICIENT_AMOUNT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer_policy::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add_to_balance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Rule</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}, policy, coin);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer_policy::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add_receipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Rule</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}, request);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>What’s happening here:</p>\n<ul>\n<li>It checks the coin’s value is exactly <strong>1 SUI</strong> (in Mist)</li>\n<li>Adds that payment to the policy’s internal balance</li>\n<li>Marks the <code>TransferRequest</code> as passed for this rule</li>\n</ul>\n<p>Once all rules are satisfied, the buyer must <strong>confirm the request</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> confirm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    policy: &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TransferPolicy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Art</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    request: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TransferRequest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Art</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer_policy::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">confirm_request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(policy, request);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The transfer is considered pending until this step is completed, and ownership won’t be finalized.</p>\n<p>This step is essential. Without calling <code>confirm_request()</code>, the item is stuck in limbo. That’s why TradePort asks recipients to claim from Kiosks.</p>\n","isPage":false,"text":"\nSui provides kiosks that are more ergonomic than on-chain assets. It’s like opening a brand for items, and then you get to specify and enforce policies over the items.\nMany of your favourite NFT collections, including Prime Machin and Rootlets, use Kiosk.\nFirst, you need to add all these imports to your package.\nuse sui::url::Url;\nuse std::string::String;\nuse sui::balance::Balance;\nuse sui::sui::SUI;\nuse sui::coin::{Self, Coin};\nuse sui::balance;\nuse sui::transfer_policy::{Self, TransferPolicy, TransferPolicyCap, TransferRequest};\n \nconst E_INSUFFICIENT_AMOUNT: u64 = 0;\nYou’re importing the usual suspects: strings, coins, and balances plus transfer_policy, which is the real star of this section.\nThe transfer_policy module defines how assets can be transferred and enforces rules on those transfers.\nHere’s a table of the transfer policy features:\nFeatureWhat it meansTransferPolicy&lt;T&gt;A shared object that defines the rules for transferring type TTransferPolicyCap&lt;T&gt;A capability (object) that lets you modify the policy — only the holder can change or add rulesTransferRequest&lt;T&gt;An object created whenever someone tries to transfer type T. They must fulfill the policy rules before the transfer is finalizedadd_rule(...)Adds a custom rule (like “pay 1 SUI”) to the policyadd_to_balance(...)Lets you collect fees or payments tied to transfersadd_receipt(...)Marks a rule as fulfilled for a given transferconfirm_request(...)Finalizes a transfer if all rules are met\nNow that you understand the transfer policy. Let’s define the NFT struct and specify transfer policies on the NFT.\npublic struct Art has key, store {\n    id: UID,\n    name: String,\n    url: Url,\n    balance: Balance&lt;SUI&gt;,\n}\nWe’ll need to define a rule and a configuration to charge a fee or enforce conditions:\npublic struct Rule has drop {}\npublic struct Config has store, drop {}\nThis creates a new rule type, Rule, and an empty Config. We’ll plug this into the policy later.\nHere’s a basic function to mint a new Art NFT:\n/// Mint an NFT (for demo/testing)\npublic fun mint(name: String, url: Url, ctx: &amp;mut TxContext): Art {\n    Art {\n        id: object::new(ctx),\n        name,\n        url,\n        balance: balance::zero(),\n    }\n}\nIt creates a new object and assigns it a name, image, and zero token balance.\nNow we need to create a transfer policy like this:\n#[allow(lint(share_owned, self_transfer))]\npublic fun create_policy(publisher: &amp;sui::package::Publisher, ctx: &amp;mut TxContext) {\n    let (policy, cap) = transfer_policy::new&lt;Art&gt;(publisher, ctx);\n    transfer::public_share_object(policy);\n    transfer::public_transfer(cap, tx_context::sender(ctx));\n}\nHere’s what’s happening:\n\ntransfer_policy::new creates the policy and its capability (cap)\nThe policy is made shared so everyone can access it\nThe cap is transferred to the caller so only they can manage the policy\n\nThis step is mandatory. Without a policy, Kiosk listings won’t be enforceable.\nNow, we can  attach the rule to the policy like this:\npublic fun add_rule(\n    policy: &amp;mut TransferPolicy&lt;Art&gt;,\n    cap: &amp;TransferPolicyCap&lt;Art&gt;\n) {\n    transfer_policy::add_rule(Rule {}, policy, cap, Config {});\n}\nThis registers your custom rule (Rule) and its config. This function can only be called by whoever holds the TransferPolicyCap.\nHere’s the critical part: enforcing a 1 SUI transfer fee:\npublic fun pay(\n    policy: &amp;mut TransferPolicy&lt;Art&gt;,\n    request: &amp;mut TransferRequest&lt;Art&gt;,\n    coin: Coin&lt;SUI&gt;\n) {\n    assert!(coin::value(&amp;coin) == 1_000_000_000, E_INSUFFICIENT_AMOUNT);\n    transfer_policy::add_to_balance(Rule {}, policy, coin);\n    transfer_policy::add_receipt(Rule {}, request);\n}\nWhat’s happening here:\n\nIt checks the coin’s value is exactly 1 SUI (in Mist)\nAdds that payment to the policy’s internal balance\nMarks the TransferRequest as passed for this rule\n\nOnce all rules are satisfied, the buyer must confirm the request:\npublic fun confirm(\n    policy: &amp;TransferPolicy&lt;Art&gt;,\n    request: TransferRequest&lt;Art&gt;\n) {\n    transfer_policy::confirm_request(policy, request);\n}\nThe transfer is considered pending until this step is completed, and ownership won’t be finalized.\nThis step is essential. Without calling confirm_request(), the item is stuck in limbo. That’s why TradePort asks recipients to claim from Kiosks.\n","title":"Launching NFTs with Kiosk","titles":["Building NFTs and Setting up Kiosks on Sui"]},"34":{"href":"/nfts-kiosks#conclusion","html":"\n<p>You now know how to launch NFTs on Sui. Ideally, you’ll need a decentralized storage to store your NFTs; check out Walrus for that.</p>\n<p>There’s a Walrus client tutorial in this series you should check out to learn how to store your NFTs on Walrus</p>","isPage":false,"text":"\nYou now know how to launch NFTs on Sui. Ideally, you’ll need a decentralized storage to store your NFTs; check out Walrus for that.\nThere’s a Walrus client tutorial in this series you should check out to learn how to store your NFTs on Walrus","title":"Conclusion","titles":["Building NFTs and Setting up Kiosks on Sui"]},"35":{"href":"/prod-packages#beyond-the-basics-of-move","html":"</header>\n<p>Once you understand the basics of Move programming, you can move on to Sui development. This article is a sequel to the Sui Move in 15 minutes article.</p>\n<p>In this article, you’ll learn the ergonomic aspects of Sui Move to write and publish production-ready smart contracts.</p>\n","isPage":true,"text":"\nOnce you understand the basics of Move programming, you can move on to Sui development. This article is a sequel to the Sui Move in 15 minutes article.\nIn this article, you’ll learn the ergonomic aspects of Sui Move to write and publish production-ready smart contracts.\n","title":"Beyond the Basics of Move","titles":[]},"36":{"href":"/prod-packages#transaction-context","html":"\n<p>You can access the input arguments and the transaction context when anybody sends transactions to your contracts.</p>\n<p>You can use the context to fetch <em>who called it</em>, <em>when</em>, and <em>what’s happening</em>. That context is passed into your functions as <code>&amp;mut TxContext</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> entry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> do_something</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // use ctx here</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Here’s what you can access from the transaction context:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> drop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    sender: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,             </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// who signed the transaction</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    tx_hash: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,         </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// transaction hash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    epoch: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,                  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// current epoch number</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    epoch_timestamp_ms: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,     </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// epoch start timestamp (ms)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ids_created: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#6A737D;--shiki-dark:#768390\">             // how many new IDs created during this tx</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>You never set these manually. Sui fills them in when the transaction runs.</p>\n<p>You’d often need to query what address is sending a transaction. Here’s how you can do that:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> entry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> owner = tx_context::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Now you can access the sender’s address via the <code>owner</code> variable.</p>\n","isPage":false,"text":"\nYou can access the input arguments and the transaction context when anybody sends transactions to your contracts.\nYou can use the context to fetch who called it, when, and what’s happening. That context is passed into your functions as &amp;mut TxContext.\npublic entry fun do_something(ctx: &amp;mut TxContext) {\n    // use ctx here\n}\nHere’s what you can access from the transaction context:\nstruct TxContext has drop {\n    sender: address,             // who signed the transaction\n    tx_hash: vector&lt;u8&gt;,         // transaction hash\n    epoch: u64,                  // current epoch number\n    epoch_timestamp_ms: u64,     // epoch start timestamp (ms)\n    ids_created: u64             // how many new IDs created during this tx\n}\nYou never set these manually. Sui fills them in when the transaction runs.\nYou’d often need to query what address is sending a transaction. Here’s how you can do that:\npublic entry fun mint(ctx: &amp;mut TxContext) {\n    let owner = tx_context::sender(ctx);\n}\nNow you can access the sender’s address via the owner variable.\n","title":"Transaction Context","titles":["Beyond the Basics of Move"]},"37":{"href":"/prod-packages#module-initializers","html":"\n<p>You’d need a module initializer to execute actions once e.g create a pool or assign special abilities.</p>\n<p>You’d declare an <code>init</code> function in the module, which runs automatically once published.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) { </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* setup code here */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n<p>Your initializer function must be named <code>init</code>, private, return nothing, and optionally take in a one-time witness.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(otw: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">OTW</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n<p>Here’s an <code>init</code> function with a one-time witness:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(otw: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">OTW</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) { </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* with one-time witness */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n<p>Now, you need to understand witnesses and one-time witnesses.</p>\n","isPage":false,"text":"\nYou’d need a module initializer to execute actions once e.g create a pool or assign special abilities.\nYou’d declare an init function in the module, which runs automatically once published.\nfun init(ctx: &amp;mut TxContext) { /* setup code here */ }\nYour initializer function must be named init, private, return nothing, and optionally take in a one-time witness.\nfun init(otw: OTW, ctx: &amp;mut TxContext) {\n \n }\nHere’s an init function with a one-time witness:\nfun init(otw: OTW, ctx: &amp;mut TxContext) { /* with one-time witness */ }\nNow, you need to understand witnesses and one-time witnesses.\n","title":"Module Initializers","titles":["Beyond the Basics of Move"]},"38":{"href":"/prod-packages#capabilities","html":"\n<p>Capabilities are objects that give rights and resource access. No need for risky <code>if sender == admin</code> conditionals. If you’ve got the cap, you’re allowed.</p>\n<p>Here’s an example of a struct with capabilities.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AdminCap</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { id: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n<blockquote>\n<p>The convention is adding <code>Cap</code> as a suffix with the CamelCase.You typically mint the capability once, right when the module is published with a module initializer:</p>\n</blockquote>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        AdminCap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { id: object::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx) },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The publisher receives the cap and becomes the admin. From there, they can set up the system or delegate the capability.</p>\n<p>The <code>init</code> function doesn’t stop someone from adding a new function that creates another cap later. Consider using a One-Time Witness or an un-upgradable package to enforce true one-time access.</p>\n","isPage":false,"text":"\nCapabilities are objects that give rights and resource access. No need for risky if sender == admin conditionals. If you’ve got the cap, you’re allowed.\nHere’s an example of a struct with capabilities.\npublic struct AdminCap has key, store { id: UID }\n\nThe convention is adding Cap as a suffix with the CamelCase.You typically mint the capability once, right when the module is published with a module initializer:\n\nfun init(ctx: &amp;mut TxContext) {\n    transfer::transfer(\n        AdminCap { id: object::new(ctx) },\n        ctx.sender()\n    );\n}\nThe publisher receives the cap and becomes the admin. From there, they can set up the system or delegate the capability.\nThe init function doesn’t stop someone from adding a new function that creates another cap later. Consider using a One-Time Witness or an un-upgradable package to enforce true one-time access.\n","title":"Capabilities","titles":["Beyond the Basics of Move"]},"39":{"href":"/prod-packages#witnesses","html":"\n<p>Capabilities are great for managing access, but what if you need <em>one-time</em> access to perform something sensitive, like initializing a global config, or minting a single admin cap that must <em>never</em> be duplicated? That’s where <strong>witnesses</strong> come in.</p>\n<p>A <strong>witness</strong> is a proof object passed into a function to prove that something happened before or didn’t happen.</p>\n","isPage":false,"text":"\nCapabilities are great for managing access, but what if you need one-time access to perform something sensitive, like initializing a global config, or minting a single admin cap that must never be duplicated? That’s where witnesses come in.\nA witness is a proof object passed into a function to prove that something happened before or didn’t happen.\n","title":"Witnesses","titles":["Beyond the Basics of Move"]},"40":{"href":"/prod-packages#one-time-witness","html":"\n<p>The <code>One-Time Witness (OTW)</code> pattern enforces that certain code can only run once. It is perfect for ensuring that only one capability is created or that something can only be initialized during the first and only setup phase.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> init</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(otw: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">OTW</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // only runs during publish</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AdminCap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { id: object::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx) }, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Sui provides the OTW during the <code>publish</code> phase. If you try calling the function again later, there will be no witness and no dice.</p>\n<aside data-callout=\"info\"><p>Use OTW when you need strict one-time-only logic baked into your module.</p></aside>\n","isPage":false,"text":"\nThe One-Time Witness (OTW) pattern enforces that certain code can only run once. It is perfect for ensuring that only one capability is created or that something can only be initialized during the first and only setup phase.\nfun init(otw: OTW, ctx: &amp;mut TxContext) {\n    // only runs during publish\n    transfer::transfer(AdminCap { id: object::new(ctx) }, ctx.sender());\n}\nSui provides the OTW during the publish phase. If you try calling the function again later, there will be no witness and no dice.\nUse OTW when you need strict one-time-only logic baked into your module.\n","title":"One-Time Witness","titles":["Beyond the Basics of Move","Witnesses"]},"41":{"href":"/prod-packages#time-management-on-sui","html":"\n<p>Blockchains use epochs to track time deterministically and Sui is no different.</p>\n<p>You can access epoch-related info from the transaction context:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let current_epoch = tx_context::epoch(ctx);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let epoch_start_time = tx_context::epoch_timestamp_ms(ctx);</span></span></code></pre>\n<p>You can also use the <code>Clock</code> module for For millisecond-level accuracy.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Clock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    id: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    timestamp_ms: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// current time in milliseconds</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>First, you’ll have to import it from the <code>sui</code> library:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::clock::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Clock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>You need to passed in <code>Clock</code>  as an immutable reference; then you can access the timestamp like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::clock::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Clock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> current_time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(clock: &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Clock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time = clock.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">timestamp_ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>You can build delayed token unlocks, time-limited auctions, expiring resources, etc.</p>\n","isPage":false,"text":"\nBlockchains use epochs to track time deterministically and Sui is no different.\nYou can access epoch-related info from the transaction context:\nlet current_epoch = tx_context::epoch(ctx);\nlet epoch_start_time = tx_context::epoch_timestamp_ms(ctx);\nYou can also use the Clock module for For millisecond-level accuracy.\nstruct Clock has key {\n    id: UID,\n    timestamp_ms: u64, // current time in milliseconds\n}\nFirst, you’ll have to import it from the sui library:\nuse sui::clock::Clock;\nYou need to passed in Clock  as an immutable reference; then you can access the timestamp like this:\nuse sui::clock::Clock;\n \npublic fun current_time(clock: &amp;Clock) {\n    let time = clock.timestamp_ms();\n    // ...\n}\nYou can build delayed token unlocks, time-limited auctions, expiring resources, etc.\n","title":"Time Management on Sui","titles":["Beyond the Basics of Move"]},"42":{"href":"/prod-packages#events","html":"\n<p>You can emit events and listen to them to log specific data as they happen on-chain.</p>\n<p>How? You’ll define your own event structs, then use the built-in <code>event::emit</code> function.</p>\n<p>First, import the <code>event</code> module like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::event;</span></span></code></pre>\n<p>Now, you can emit events over your structs.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> UserCreated</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> copy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">drop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    user_id: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">event::emit(UserCreated { user_id });</span></span></code></pre>\n<p>Events are off-chain observable. They don’t change state but are crucial for tracking contract activity and triggering app-side logic.</p>\n","isPage":false,"text":"\nYou can emit events and listen to them to log specific data as they happen on-chain.\nHow? You’ll define your own event structs, then use the built-in event::emit function.\nFirst, import the event module like this:\nuse sui::event;\nNow, you can emit events over your structs.\npublic struct UserCreated has copy, drop {\n    user_id: address,\n}\n \nevent::emit(UserCreated { user_id });\nEvents are off-chain observable. They don’t change state but are crucial for tracking contract activity and triggering app-side logic.\n","title":"Events","titles":["Beyond the Basics of Move"]},"43":{"href":"/prod-packages#error-handling","html":"\n<p>You’re going to run into errors, and you’ll need to handle them. By default, when your Move function hits an abort!, it fails the transaction and returns a mod<em>ule name + error code. That’s helpful—until it isn’t</em>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> do_something</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> field_1 = module_b::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">get_field</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// may abort with 0</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> field_2 = module_b::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">get_field</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// may abort with 0</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> field_3 = module_b::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">get_field</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// may abort with 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>If one of those calls fails with abort code <code>0</code>, you have <strong>no idea</strong> which one did it. That’s where better error-handling patterns come in.</p>\n<p>Instead of letting a function fail blindly, wrap it with checks. Constants come in handy here.</p>\n<p>First, define a constant for each error case:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> E_NO_FIELD_A</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> E_NO_FIELD_B</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> E_NO_FIELD_C</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Now you can add them to your assertions to narrow by your  error code:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assert_is_admin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">!(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">is_admin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), ENotAuthorized);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>In this case, when the assertion fails, you know exactly what happened based on the error constants you defined:</p>\n","isPage":false,"text":"\nYou’re going to run into errors, and you’ll need to handle them. By default, when your Move function hits an abort!, it fails the transaction and returns a module name + error code. That’s helpful—until it isn’t.\npublic fun do_something() {\n    let field_1 = module_b::get_field(1); // may abort with 0\n    let field_2 = module_b::get_field(2); // may abort with 0\n    let field_3 = module_b::get_field(3); // may abort with 0\n}\nIf one of those calls fails with abort code 0, you have no idea which one did it. That’s where better error-handling patterns come in.\nInstead of letting a function fail blindly, wrap it with checks. Constants come in handy here.\nFirst, define a constant for each error case:\nconst E_NO_FIELD_A: u64 = 0;\nconst E_NO_FIELD_B: u64 = 1;\nconst E_NO_FIELD_C: u64 = 2;\nNow you can add them to your assertions to narrow by your  error code:\npublic fun assert_is_admin() {\n    assert!(is_admin(), ENotAuthorized);\n}\nIn this case, when the assertion fails, you know exactly what happened based on the error constants you defined:\n","title":"Error Handling","titles":["Beyond the Basics of Move"]},"44":{"href":"/prod-packages#conclusion","html":"\n<p>You’ve learned the Sui development-specific features to start building and deploying packages on chain.</p>\n<p>Next, launch a coin for your first project so everything makes sense and you can use what you’ve learned.</p>","isPage":false,"text":"\nYou’ve learned the Sui development-specific features to start building and deploying packages on chain.\nNext, launch a coin for your first project so everything makes sense and you can use what you’ve learned.","title":"Conclusion","titles":["Beyond the Basics of Move"]},"45":{"href":"/sui-15min#learn-sui-move-in-15-minutes","html":"</header>\n<p>You want to learn Sui Move and start building really fast. I know what you are! You’re a developer who doesn’t have time for sentiments and wants to get shipping, especially since you’ve heard Move is easy peasy.</p>\n<p>This article will teach you everything you need to know to build and publish your first Sui smart contracts (programs) on the blockchain.</p>\n","isPage":true,"text":"\nYou want to learn Sui Move and start building really fast. I know what you are! You’re a developer who doesn’t have time for sentiments and wants to get shipping, especially since you’ve heard Move is easy peasy.\nThis article will teach you everything you need to know to build and publish your first Sui smart contracts (programs) on the blockchain.\n","title":"Learn Sui Move in 15 Minutes","titles":[]},"46":{"href":"/sui-15min#packages","html":"\n<p>You write programs that are grouped into packages to run on-chain. Every published package has an address. You can interact with packages by sending transactions that call the functions.</p>\n<p>Before we get our hands dirty, go to this article and follow the steps to set up Sui on your computer.</p>\n<p>Once you’re all set up, execute this command to create your first Sui project:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> move</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> new</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> impatience</span></span></code></pre>\n<p>Now, enter into the directory and open it in your code editor of choice.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> impatience</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">code</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .</span></span></code></pre>\n<p>The command above enters the <code>impatience</code> directory and opens it in Visual Studio Code.</p>\n<p>When you open the package, you should expect to see this file directory loaded with some content in the file.</p>\n<img src=\"/package-structure.png\" alt=\"Package structure\"/>\n<p>You’ll write your code in the <code>sources/</code> directory and tests in the <code>test/</code> directory. If there are any files you don’t want to include in your Git version control operations, you’ll include them in the <code>.gitignore</code> file. The <code>Move.toml</code> file is used to manage your packages and dependencies.</p>\n","isPage":false,"text":"\nYou write programs that are grouped into packages to run on-chain. Every published package has an address. You can interact with packages by sending transactions that call the functions.\nBefore we get our hands dirty, go to this article and follow the steps to set up Sui on your computer.\nOnce you’re all set up, execute this command to create your first Sui project:\nsui move new impatience\nNow, enter into the directory and open it in your code editor of choice.\ncd impatience\ncode .\nThe command above enters the impatience directory and opens it in Visual Studio Code.\nWhen you open the package, you should expect to see this file directory loaded with some content in the file.\n\nYou’ll write your code in the sources/ directory and tests in the test/ directory. If there are any files you don’t want to include in your Git version control operations, you’ll include them in the .gitignore file. The Move.toml file is used to manage your packages and dependencies.\n","title":"Packages","titles":["Learn Sui Move in 15 Minutes"]},"47":{"href":"/sui-15min#package-manifest-movetoml","html":"\n<p>The <code>Move.toml</code> file is the manifest. It contains the package’s details and dependencies in TOML format, with different sections for each.</p>\n<img src=\"/move-toml.png\" alt=\"The Move.toml File\"/>\n<p>In the [package] section, you’ll define the package name (<code>impatient</code>) and the language edition (<code>2024.beta</code>). The <code>[dependencies]</code> section would have the external packages, e.g., the Sui package.</p>\n<p>Named addresses go under <code>[addresses]</code> to assign aliases like <code>zsh = &quot;0x0&quot;</code> to onchain addresses for easier referencing in Move code. Optional sections like <code>[dev-dependencies]</code> and <code>[dev-addresses]</code> allow you to customize test environments.</p>\n","isPage":false,"text":"\nThe Move.toml file is the manifest. It contains the package’s details and dependencies in TOML format, with different sections for each.\n\nIn the [package] section, you’ll define the package name (impatient) and the language edition (2024.beta). The [dependencies] section would have the external packages, e.g., the Sui package.\nNamed addresses go under [addresses] to assign aliases like zsh = &quot;0x0&quot; to onchain addresses for easier referencing in Move code. Optional sections like [dev-dependencies] and [dev-addresses] allow you to customize test environments.\n","title":"Package Manifest (Move.toml)","titles":["Learn Sui Move in 15 Minutes","Packages"]},"48":{"href":"/sui-15min#addresses-and-accounts","html":"\n<p>Addresses are unique identifiers on the Sui blockchain. Sui uses addresses to identify packages, accounts, and objects.</p>\n<p>On Sui, addresses are case-sensitive, have a fixed byte size of 32 bytes, and are usually represented as hexadecimal with the <code>0x</code> prefix.</p>\n<img src=\"/addresses.png\" alt=\"Distinguishing addresses\"/>\n<p>Sui differentiates between account addresses and contract addresses by using the package name at the end of the address.</p>\n<p>Some addresses are reserved for identifying standard packages and objects. T<a href=\"https://move-book.com/appendix/reserved-addresses.html\">he Move Book reference</a> has all of them.</p>\n","isPage":false,"text":"\nAddresses are unique identifiers on the Sui blockchain. Sui uses addresses to identify packages, accounts, and objects.\nOn Sui, addresses are case-sensitive, have a fixed byte size of 32 bytes, and are usually represented as hexadecimal with the 0x prefix.\n\nSui differentiates between account addresses and contract addresses by using the package name at the end of the address.\nSome addresses are reserved for identifying standard packages and objects. The Move Book reference has all of them.\n","title":"Addresses and Accounts","titles":["Learn Sui Move in 15 Minutes"]},"49":{"href":"/sui-15min#transactions","html":"\n<p>Transactions are “actions” on the blockchain, such as calling functions, sending coins, or updating data. They can be anything that adds to or changes the state of data on the chain.</p>\n<p>Every transaction includes:</p>\n<ul>\n<li><strong>Sender</strong> – the account that signs and sends it</li>\n<li><strong>Commands</strong> – the list of actions to run, in order</li>\n<li><strong>Inputs</strong> – values or objects used in the commands</li>\n<li><strong>Gas</strong> – a coin used to pay for the transaction</li>\n<li><strong>Gas budget/price</strong> – how much will you pay to get it onchain?</li>\n</ul>\n<p>Transactions return the transaction digest, status, and details like what changes, the cost, and events.</p>\n","isPage":false,"text":"\nTransactions are “actions” on the blockchain, such as calling functions, sending coins, or updating data. They can be anything that adds to or changes the state of data on the chain.\nEvery transaction includes:\n\nSender – the account that signs and sends it\nCommands – the list of actions to run, in order\nInputs – values or objects used in the commands\nGas – a coin used to pay for the transaction\nGas budget/price – how much will you pay to get it onchain?\n\nTransactions return the transaction digest, status, and details like what changes, the cost, and events.\n","title":"Transactions","titles":["Learn Sui Move in 15 Minutes"]},"50":{"href":"/sui-15min#objects","html":"\n<p>On Sui, everything is an object. The objects are stored directly on the user accounts for full control.</p>\n<p>These are the types of addresses:</p>\n<ul>\n<li><strong>Owned Objects</strong>: Owned objects, like your tokens and NFTs, have one owner. Only the owner can use and interact with them.</li>\n<li><strong>Shared Objects</strong>: These have multiple owners, e.g, liquidity pools.</li>\n<li>Immutable Objects: They cannot be modified once they’re initialized.</li>\n</ul>\n<p>Every Sui object has:</p>\n<ul>\n<li><strong>ID</strong>: A unique identifier.</li>\n<li><strong>Type</strong>: Defines what kind of object it is.</li>\n<li><strong>Owner</strong>: Who owns the object (an address, another object, or shared).</li>\n<li><strong>Version</strong>: Tracks changes to the object.</li>\n<li><strong>Last Transaction</strong>: The most recent transaction that modified the object.</li>\n</ul>\n<p>You can add custom fields to objects to add features or new data.</p>\n","isPage":false,"text":"\nOn Sui, everything is an object. The objects are stored directly on the user accounts for full control.\nThese are the types of addresses:\n\nOwned Objects: Owned objects, like your tokens and NFTs, have one owner. Only the owner can use and interact with them.\nShared Objects: These have multiple owners, e.g, liquidity pools.\nImmutable Objects: They cannot be modified once they’re initialized.\n\nEvery Sui object has:\n\nID: A unique identifier.\nType: Defines what kind of object it is.\nOwner: Who owns the object (an address, another object, or shared).\nVersion: Tracks changes to the object.\nLast Transaction: The most recent transaction that modified the object.\n\nYou can add custom fields to objects to add features or new data.\n","title":"Objects","titles":["Learn Sui Move in 15 Minutes"]},"51":{"href":"/sui-15min#publishing-packages-onchain","html":"\n<p>Once you’re done writing your packages, you’ll need to publish them, and you can do that via the Sui CLI tool.</p>\n<p>First, you must build the package locally to ensure everything works.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> move</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span></span></code></pre>\n<p>If there are no errors with your output, you’ve successfully built the package.</p>\n<p>If you’ve written tests, run them before publishing with this command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> move</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span></code></pre>\n<p>Once your test cases pass, you can publish them to any network (mainnet, testnet, localnet) with this command.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> publish</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --gas-budget</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">BUDGET_IN_MIS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">PACKAGE_NAM</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">E</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># you can exempt the package name if it&#x27;s your current working directory</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> publish</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --gas-budget</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100000000</span></span></code></pre>\n<p>It would verify the dependencies on-chain and publish the package. You would then get many useful transaction data, including the package ID and the transaction digest.</p>\n<p><img src=\"attachment:8aaed66d-dd8c-484c-973f-03fcd62e11ed:image.png\" alt=\"image.png\"/></p>\n","isPage":false,"text":"\nOnce you’re done writing your packages, you’ll need to publish them, and you can do that via the Sui CLI tool.\nFirst, you must build the package locally to ensure everything works.\nsui move build\nIf there are no errors with your output, you’ve successfully built the package.\nIf you’ve written tests, run them before publishing with this command:\nsui move test\nOnce your test cases pass, you can publish them to any network (mainnet, testnet, localnet) with this command.\nsui client publish --gas-budget &lt;BUDGET_IN_MIST&gt; &lt;PACKAGE_NAME&gt;\n \n# you can exempt the package name if it&#x27;s your current working directory\nsui client publish --gas-budget 100000000\nIt would verify the dependencies on-chain and publish the package. You would then get many useful transaction data, including the package ID and the transaction digest.\n\n","title":"Publishing Packages Onchain","titles":["Learn Sui Move in 15 Minutes","Objects"]},"52":{"href":"/sui-15min#move-modules","html":"\n<p>Modules are how you manage units of your packages. You can use them to isolate similar functionality.</p>\n<p>You’ll declare modules using lowercase and snake case. Module names must be unique throughout the package.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">module</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> state</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">impatient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">module</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> state</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">paitient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>All your declarations (structs, functions, constants and imports) will enter the module.</p>\n","isPage":false,"text":"\nModules are how you manage units of your packages. You can use them to isolate similar functionality.\nYou’ll declare modules using lowercase and snake case. Module names must be unique throughout the package.\nmodule state::impatient;\nmodule state::paitient;\nAll your declarations (structs, functions, constants and imports) will enter the module.\n","title":"Move Modules","titles":["Learn Sui Move in 15 Minutes"]},"53":{"href":"/sui-15min#importing-modules","html":"\n<p>When working with multiple modules, you may need to import one module from another. Specifying the namespace with the <code>use</code> keyword works in this case:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::coin::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span></code></pre>\n<p>In this case, we’re importing the current module and the coin structure. When accessing items, you’ll specify <code>Self</code> without repeating the module name.</p>\n<p>You’ll need to add external dependencies to the dependencies section of your <code>Move.toml</code> file.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">dependencies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Pyth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">git = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://github.com/pyth-network/pyth-crosschain.git&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">subdir = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;target_chains/sui/contracts&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">rev = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sui-contract-mainnet&quot;</span></span></code></pre>\n<p>Then you can reference what you need to access with the <code>use</code> keyword.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pyth::price;</span></span></code></pre>\n<p>You’d have noticed that the <code>Sui</code> dependency has already been imported. You have access to those and automatically, the <code>std</code> module, which is the Move standard library.</p>\n","isPage":false,"text":"\nWhen working with multiple modules, you may need to import one module from another. Specifying the namespace with the use keyword works in this case:\nuse sui::coin::{Self, Coin};\nIn this case, we’re importing the current module and the coin structure. When accessing items, you’ll specify Self without repeating the module name.\nYou’ll need to add external dependencies to the dependencies section of your Move.toml file.\n[dependencies.Pyth]\ngit = &quot;https://github.com/pyth-network/pyth-crosschain.git&quot;\nsubdir = &quot;target_chains/sui/contracts&quot;\nrev = &quot;sui-contract-mainnet&quot;\nThen you can reference what you need to access with the use keyword.\nuse pyth::price;\nYou’d have noticed that the Sui dependency has already been imported. You have access to those and automatically, the std module, which is the Move standard library.\n","title":"Importing Modules","titles":["Learn Sui Move in 15 Minutes","Move Modules"]},"54":{"href":"/sui-15min#data-structures-and-types","html":"\n<p>Primitive types are your everyday data types. Sui Move supports:</p>\n<ul>\n<li><code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>u128</code>, <code>u256</code> – Unsigned integers of various sizes. Pick one and stick to it unless you like debugging overflow errors.</li>\n<li><code>bool</code> – <code>true</code> or <code>false</code>.</li>\n<li><code>signer</code> – a special type that represents the person calling the function. You use this to prove identity and ownership.</li>\n</ul>\n<p>Here’s how you can assign variables on types with the operator <code>=</code> operation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let &lt;variable_name&gt;[: &lt;type&gt;]  = &lt;expression&gt;;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Unsigned integers</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let a: u8 = 255;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let b: u64 = 1000000;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let c: u128 = 999999999999999999;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Boolean values</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let is_active: bool = true;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let is_zero: bool = false;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let user: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> = @</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0x123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">let</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> system</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> = @</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0x0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>The variables you’ve declared above are immutable (their values cannot change). If you need to change them, you’ll need to add the <code>mut</code> keyword in your definition.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let mut &lt;variable_name&gt;[: &lt;type&gt;] = &lt;expression&gt;;</span></span></code></pre>\n<aside data-callout=\"info\"><p>You can&#x27;t create a <code>signer</code> manually. The system passes that in when someone calls your code.</p></aside>\n","isPage":false,"text":"\nPrimitive types are your everyday data types. Sui Move supports:\n\nu8, u16, u32, u64, u128, u256 – Unsigned integers of various sizes. Pick one and stick to it unless you like debugging overflow errors.\nbool – true or false.\nsigner – a special type that represents the person calling the function. You use this to prove identity and ownership.\n\nHere’s how you can assign variables on types with the operator = operation:\nlet &lt;variable_name&gt;[: &lt;type&gt;]  = &lt;expression&gt;;\n \n// Unsigned integers\nlet a: u8 = 255;\nlet b: u64 = 1000000;\nlet c: u128 = 999999999999999999;\n \n// Boolean values\nlet is_active: bool = true;\nlet is_zero: bool = false;\n \n// Address\nlet user: address = @0x123;\nlet system: address = @0x0;\nThe variables you’ve declared above are immutable (their values cannot change). If you need to change them, you’ll need to add the mut keyword in your definition.\nlet mut &lt;variable_name&gt;[: &lt;type&gt;] = &lt;expression&gt;;\nYou can&#x27;t create a signer manually. The system passes that in when someone calls your code.\n","title":"Data Structures and Types","titles":["Learn Sui Move in 15 Minutes"]},"55":{"href":"/sui-15min#conditionals","html":"\n<p>Move has the classic <code>if</code>, <code>else if</code>, <code>else</code>. Here’s how you’ll use them:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">if health == 0 {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // do something</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} else if health &lt; 20 {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // do something else</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} else {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // default case</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>You can assign values conditionally, too:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let y = if (x &gt; 0) { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } else { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> };</span></span></code></pre>\n<p>Both <code>if</code> and <code>else</code> branches must return the same type if you&#x27;re assigning to a variable.</p>\n<p>You can use <code>assert!</code> to enforce rules at runtime:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">assert!(mana &gt;= 10, 0);</span></span></code></pre>\n<p>This checks if the condition is true. If it is, execution continues as usual. If it <strong>is not</strong>, the program <strong>aborts immediately</strong> and throws an error with <strong>code <code>0</code></strong>.</p>\n","isPage":false,"text":"\nMove has the classic if, else if, else. Here’s how you’ll use them:\nif health == 0 {\n    // do something\n} else if health &lt; 20 {\n    // do something else\n} else {\n    // default case\n}\nYou can assign values conditionally, too:\nlet y = if (x &gt; 0) { 1 } else { 0 };\nBoth if and else branches must return the same type if you&#x27;re assigning to a variable.\nYou can use assert! to enforce rules at runtime:\nassert!(mana &gt;= 10, 0);\nThis checks if the condition is true. If it is, execution continues as usual. If it is not, the program aborts immediately and throws an error with code 0.\n","title":"Conditionals","titles":["Learn Sui Move in 15 Minutes"]},"56":{"href":"/sui-15min#loops","html":"\n<p>You have <code>while</code> and <code>loop</code> repetitions:</p>\n<p>While loops run as long as the condition is true:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let mut x = 0;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">while (x &lt; 5) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    x = x + </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Useful when you know the ending condition.</p>\n<p>On the other hand, <code>loop</code> runs forever (until you manually <code>break</code> out of it):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let mut x = 0;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">loop {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    x = x + </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (x == </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        break</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>You can use the <code>break</code> and <code>continue</code> keywords to exit a loop and skip to another iteration respectively.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">loop {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    x = x + </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (x % </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> == </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        continue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// skip odd numbers</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (x == </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        break</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// exit when x is 10</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Want to leave a function before reaching the end? Use the <code>return</code> keyword. More on that in a bit.</p>\n","isPage":false,"text":"\nYou have while and loop repetitions:\nWhile loops run as long as the condition is true:\nlet mut x = 0;\nwhile (x &lt; 5) {\n    x = x + 1;\n}\nUseful when you know the ending condition.\nOn the other hand, loop runs forever (until you manually break out of it):\nlet mut x = 0;\nloop {\n    x = x + 1;\n    if (x == 5) {\n        break;\n    }\n}\nYou can use the break and continue keywords to exit a loop and skip to another iteration respectively.\nloop {\n    x = x + 1;\n \n    if (x % 2 == 1) {\n        continue; // skip odd numbers\n    }\n \n    if (x == 10) {\n        break; // exit when x is 10\n    }\n}\nWant to leave a function before reaching the end? Use the return keyword. More on that in a bit.\n","title":"Loops","titles":["Learn Sui Move in 15 Minutes"]},"57":{"href":"/sui-15min#structs","html":"\n<p>Structs are how you declare custom types for whatever you’re building. You’ll declare a struct with the <code>struct</code> keyword with the name of the type and add fields like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Artist</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    name: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    age: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Structs are also private by default. You’ll need to make them public with the <code>public</code> visibility modifier as above.</p>\n<blockquote>\n<p>Move does not support recursive structs so structs cannot encapsulate structs.Structs are more in Sui move, they also have abilities that define their behaviours e.g, adding any of the attributes means:</p>\n</blockquote>\n<ul>\n<li><code>copy</code> – can be copied.</li>\n<li><code>drop</code> – can be destroyed.</li>\n<li><code>store</code> – can be stored in memory.</li>\n<li><code>key</code> – can live on the blockchain as an object.</li>\n</ul>\n<p>Here’s how you can declare a struct with attributes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Counter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The <code>Counter</code> struct can now exist on-chain as an object with an ID itself.</p>\n","isPage":false,"text":"\nStructs are how you declare custom types for whatever you’re building. You’ll declare a struct with the struct keyword with the name of the type and add fields like this:\npublic struct Artist {\n    name: String,\n    age: u16,\n}\nStructs are also private by default. You’ll need to make them public with the public visibility modifier as above.\n\nMove does not support recursive structs so structs cannot encapsulate structs.Structs are more in Sui move, they also have abilities that define their behaviours e.g, adding any of the attributes means:\n\n\ncopy – can be copied.\ndrop – can be destroyed.\nstore – can be stored in memory.\nkey – can live on the blockchain as an object.\n\nHere’s how you can declare a struct with attributes:\nstruct Counter has key {\n    value: u64,\n}\nThe Counter struct can now exist on-chain as an object with an ID itself.\n","title":"Structs","titles":["Learn Sui Move in 15 Minutes"]},"58":{"href":"/sui-15min#vectors","html":"\n<p>Vectors are how you’ll express a list of items. They’re dynamic and shrinkable.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let nums: vector&lt;u64&gt; = vector[1, 2, 3];</span></span></code></pre>\n<p>You’ll manipulate them using the <code>vector</code> module. It’s part of the standard library, so you don’t have to import it.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vector::push_back(&amp;mut nums, 4);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let last_value = vector::pop_back(&amp;mut nums);</span></span></code></pre>\n<p>The <code>push_back</code> method adds an element to the end of the vector, and the <code>pop_back</code> method removes the last element.</p>\n","isPage":false,"text":"\nVectors are how you’ll express a list of items. They’re dynamic and shrinkable.\nlet nums: vector&lt;u64&gt; = vector[1, 2, 3];\nYou’ll manipulate them using the vector module. It’s part of the standard library, so you don’t have to import it.\nvector::push_back(&amp;mut nums, 4);\nlet last_value = vector::pop_back(&amp;mut nums);\nThe push_back method adds an element to the end of the vector, and the pop_back method removes the last element.\n","title":"Vectors","titles":["Learn Sui Move in 15 Minutes"]},"59":{"href":"/sui-15min#collections","html":"\n<p>You can go further with Vectors for more complex operations around a collection of items.</p>\n","isPage":false,"text":"\nYou can go further with Vectors for more complex operations around a collection of items.\n","title":"Collections","titles":["Learn Sui Move in 15 Minutes"]},"60":{"href":"/sui-15min#vecset","html":"\n<p>VecSet stores unique items, no duplicates. Very useful if you want to store addresses or unique IDs.</p>\n<p>You’ll have to import <code>VecSet</code> from the Sui library like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::vec_set::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">VecSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span></code></pre>\n<p>You can declare an empty set like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let set = vec_set::empty&lt;u8&gt;(); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// create an empty set</span></span></code></pre>\n<p>You can declare a VecSet field in a struct like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Airdrop</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> drop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    eligible: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">VecSet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>VecSet will fail when an attempt is made to insert an existing item in the set.</p>\n","isPage":false,"text":"\nVecSet stores unique items, no duplicates. Very useful if you want to store addresses or unique IDs.\nYou’ll have to import VecSet from the Sui library like this:\nuse sui::vec_set::{Self, VecSet};\nYou can declare an empty set like this:\nlet set = vec_set::empty&lt;u8&gt;(); // create an empty set\nYou can declare a VecSet field in a struct like this:\npublic struct Airdrop has drop {\n    eligible: VecSet&lt;address&gt;\n}\nVecSet will fail when an attempt is made to insert an existing item in the set.\n","title":"VecSet","titles":["Learn Sui Move in 15 Minutes"]},"61":{"href":"/sui-15min#vecmap","html":"\n<p>You’d use VecMaps to store a collection of key-value pairs and access elements by their keys.</p>\n<blockquote>\n<p>The keys must be unique. If they’re not, the old one get’s replaced, better not to try.VecMaps come in handy in cases where you want to map addresses to balances or anything of the sort.</p>\n</blockquote>\n<p>You’ll have to import <code>VecMap</code> from the Sui library like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::vec_map::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">VecMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span></code></pre>\n<p>You can declare an empty map like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let mut map = vec_map::empty();</span></span></code></pre>\n<p>You can declare a VecMap field in a struct like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Allocations</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> drop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    x_username: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    allocations: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">VecMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nYou’d use VecMaps to store a collection of key-value pairs and access elements by their keys.\n\nThe keys must be unique. If they’re not, the old one get’s replaced, better not to try.VecMaps come in handy in cases where you want to map addresses to balances or anything of the sort.\n\nYou’ll have to import VecMap from the Sui library like this:\nuse sui::vec_map::{Self, VecMap};\nYou can declare an empty map like this:\nlet mut map = vec_map::empty();\nYou can declare a VecMap field in a struct like this:\npublic struct Allocations has drop {\n    x_username: String,\n    allocations: VecMap&lt;address, u8&gt;\n}\n","title":"VecMap","titles":["Learn Sui Move in 15 Minutes"]},"62":{"href":"/sui-15min#strings","html":"\n<p>Strings in Move are <em>not</em> like JS or Python strings. They’re byte arrays with UTF-8 encoding in the <code>String</code> module.</p>\n<p>First, you’ll need to import the module and methods you need from the <code>string</code> library:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> std::string::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span></code></pre>\n<p>Now you can use the <code>utf8</code> method to declare a string variable.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let hello: String = string::utf8(b&quot;Hello&quot;);</span></span></code></pre>\n<p>You can also declare strings with vector elements with the <code>to_string</code> method like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let hello = b&quot;Hello&quot;.to_string();</span></span></code></pre>\n<p>Now you can use these methods to interact with the strings.</p>\n","isPage":false,"text":"\nStrings in Move are not like JS or Python strings. They’re byte arrays with UTF-8 encoding in the String module.\nFirst, you’ll need to import the module and methods you need from the string library:\nuse std::string::{Self, String};\nNow you can use the utf8 method to declare a string variable.\nlet hello: String = string::utf8(b&quot;Hello&quot;);\nYou can also declare strings with vector elements with the to_string method like this:\nlet hello = b&quot;Hello&quot;.to_string();\nNow you can use these methods to interact with the strings.\n","title":"Strings","titles":["Learn Sui Move in 15 Minutes"]},"63":{"href":"/sui-15min#constants","html":"\n<p>Need a value that never changes? Declare a constant with the <code>const</code> keyword:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> MAX_SUPPLY</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Constants must be compile-time evaluable. No funny business like calling functions or referencing state.</p>\n","isPage":false,"text":"\nNeed a value that never changes? Declare a constant with the const keyword:\nconst MAX_SUPPLY: u64 = 1000000;\nConstants must be compile-time evaluable. No funny business like calling functions or referencing state.\n","title":"Constants","titles":["Learn Sui Move in 15 Minutes"]},"64":{"href":"/sui-15min#option","html":"\n<p>Options represent values that may not exist. You’ll encase the field type with <code>Option&lt;Type&gt;</code> to specify the field is optional.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> User</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> drop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    first_name: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    middle_name: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Option</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    last_name: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>In this case, the <code>middle_name</code> field is optional. When the struct is initialized, it can contain a string value or remain empty.</p>\n","isPage":false,"text":"\nOptions represent values that may not exist. You’ll encase the field type with Option&lt;Type&gt; to specify the field is optional.\npublic struct User has drop {\n    first_name: String,\n    middle_name: Option&lt;String&gt;,\n    last_name: String,\n}\nIn this case, the middle_name field is optional. When the struct is initialized, it can contain a string value or remain empty.\n","title":"Option","titles":["Learn Sui Move in 15 Minutes"]},"65":{"href":"/sui-15min#bags","html":"\n<p>Bags are key-value stores with no rules. They are like a carry-everything collection, storing any value of any type.</p>\n<p>They come in handy when you don’t want to restrict value types or you need to store dynamic content that you’ll unpack later.</p>\n<p>You’ll need to import  bags to use them, like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::bag::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Bag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span></code></pre>\n<p>Then you can declare a bag as a variable or a struct field.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::bag::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Bag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let mut bag = bag::new(ctx);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Carrier</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    id: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    bag: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Bag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>You can use methods on your Bag variables or fields, like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">bag.add(b&quot;name&quot;, string::utf8(b&quot;Ada&quot;));</span></span></code></pre>\n<p>In this case, you’ve added a key-value pair to the bag  the string in the bag using the <code>my_key</code> key with the <code>borrow</code> method.</p>\n","isPage":false,"text":"\nBags are key-value stores with no rules. They are like a carry-everything collection, storing any value of any type.\nThey come in handy when you don’t want to restrict value types or you need to store dynamic content that you’ll unpack later.\nYou’ll need to import  bags to use them, like this:\nuse sui::bag::{Self, Bag};\nThen you can declare a bag as a variable or a struct field.\nuse sui::bag::{Self, Bag};\n \nlet mut bag = bag::new(ctx);\n \npublic struct Carrier has key {\n    id: UID,\n    bag: Bag,\n}\nYou can use methods on your Bag variables or fields, like this:\nbag.add(b&quot;name&quot;, string::utf8(b&quot;Ada&quot;));\nIn this case, you’ve added a key-value pair to the bag  the string in the bag using the my_key key with the borrow method.\n","title":"Bags","titles":["Learn Sui Move in 15 Minutes"]},"66":{"href":"/sui-15min#tables","html":"\n<p>Tables are an underrated data structure in Sui Move. Similar to bags, they’re strict; you’d need to specify the types in the table beforehand, and they’d be enforced on every entry.</p>\n<p>Here’s how you’ll import tables from the Sui package:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::table::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Table</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span></code></pre>\n<p>Now you can declare your tables like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let mut table: Table&lt;K, V&gt; = table::new&lt;K, V&gt;(ctx);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> UserRegistry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    id: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    table: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Table</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>You can populate your tables with the <code>add</code> method like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let mut table: Table&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; = </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">table</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">String</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">table</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(@</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0x123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Alice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;));</span></span></code></pre>\n<p>In this case, we’ve declared a table that maps addresses to strings before adding an entry using the <code>add</code> method.</p>\n","isPage":false,"text":"\nTables are an underrated data structure in Sui Move. Similar to bags, they’re strict; you’d need to specify the types in the table beforehand, and they’d be enforced on every entry.\nHere’s how you’ll import tables from the Sui package:\nuse sui::table::{Self, Table};\nNow you can declare your tables like this:\nlet mut table: Table&lt;K, V&gt; = table::new&lt;K, V&gt;(ctx);\n \npublic struct UserRegistry has key {\n    id: UID,\n    table: Table&lt;address, String&gt;,\n}\nYou can populate your tables with the add method like this:\nlet mut table: Table&lt;address, String&gt; = table::new&lt;address, String&gt;(ctx);\n \ntable.add(@0x123, string::utf8(b&quot;Alice&quot;));\nIn this case, we’ve declared a table that maps addresses to strings before adding an entry using the add method.\n","title":"Tables","titles":["Learn Sui Move in 15 Minutes"]},"67":{"href":"/sui-15min#functions-and-methods","html":"\n<p>You have functions for defining reusable logic. You’ll declare them in Move modules like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> greet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():   {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    string::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">Hello, Sui!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>In this case, the <code>greet()</code> function returns a String.</p>\n<p>Functions can take in parameters and return multiple parameters as well.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, b: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">): (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    (a + b, b - a)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Functions are private by default. If you want external modules or</p>\n<p>You can write functions operating on structs as methods by making the struct the first parameter, like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hero</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> drop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    health: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> heal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(self: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hero</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    self.health = self.health + </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let mut hero = Hero { health: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> };</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">hero.heal();</span></span></code></pre>\n<p>This defines a <code>Hero</code> struct as a <code>health</code> field and a <code>heal</code>ing function that increases that health.</p>\n<p>Because the <code>heal</code> function takes <code>&amp;mut Hero</code> as the first argument and is defined in the same module, you can call it using method syntax like <code>hero.heal();</code>. It&#x27;s just syntactic sugar—the compiler rewrites it as <code>heal(&amp;mut hero)</code> under the hood.</p>\n","isPage":false,"text":"\nYou have functions for defining reusable logic. You’ll declare them in Move modules like this:\nfun greet():   {\n    string::utf8(b&quot;Hello, Sui!&quot;)\n}\nIn this case, the greet() function returns a String.\nFunctions can take in parameters and return multiple parameters as well.\nfun add(a: u64, b: u64): (u64, u64) {\n    (a + b, b - a)\n}\nFunctions are private by default. If you want external modules or\nYou can write functions operating on structs as methods by making the struct the first parameter, like this:\npublic struct Hero has drop {\n    health: u8,\n}\n \npublic fun heal(self: &amp;mut Hero) {\n    self.health = self.health + 10;\n}\n \n// Usage\nlet mut hero = Hero { health: 100 };\nhero.heal();\nThis defines a Hero struct as a health field and a healing function that increases that health.\nBecause the heal function takes &amp;mut Hero as the first argument and is defined in the same module, you can call it using method syntax like hero.heal();. It&#x27;s just syntactic sugar—the compiler rewrites it as heal(&amp;mut hero) under the hood.\n","title":"Functions and Methods","titles":["Learn Sui Move in 15 Minutes"]},"68":{"href":"/sui-15min#memory-management--ownership","html":"\n<p>Move is built with Rust, so the ownership and borrowing primitives are valid, and they play nicely too, especially since you’re working with assets.</p>\n<p>In Move, variables aren’t copied by default—they’re <strong>moved</strong>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let name = string::utf8(b&quot;Ada&quot;);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let name2 = name; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// name is now invalid</span></span></code></pre>\n<p>The value moved into <code>name2</code>, and <code>name</code> is no longer usable unless the type has the <code>copy</code> ability.</p>\n<p>Want to reuse a value without moving it? Borrow it:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let ref_name = &amp;name;        </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// read-only borrow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let mut_ref = &amp;mut name2;    </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// mutable borrow</span></span></code></pre>\n<p>You can have multiple immutable borrows, or one mutable borrow, but not both simultaneously.</p>\n","isPage":false,"text":"\nMove is built with Rust, so the ownership and borrowing primitives are valid, and they play nicely too, especially since you’re working with assets.\nIn Move, variables aren’t copied by default—they’re moved.\nlet name = string::utf8(b&quot;Ada&quot;);\nlet name2 = name; // name is now invalid\nThe value moved into name2, and name is no longer usable unless the type has the copy ability.\nWant to reuse a value without moving it? Borrow it:\nlet ref_name = &amp;name;        // read-only borrow\nlet mut_ref = &amp;mut name2;    // mutable borrow\nYou can have multiple immutable borrows, or one mutable borrow, but not both simultaneously.\n","title":"Memory Management &amp; Ownership","titles":["Learn Sui Move in 15 Minutes"]},"69":{"href":"/sui-15min#generics","html":"\n<p>Generics are available for defining fields and variables that work with any type.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Wrapper</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>You can now create a <code>Wrapper&lt;u64&gt;</code>, a <code>Wrapper&lt;String&gt;</code>, or whatever else.</p>\n<p>Here’s how you’ll initialize a generic struct:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let wrapped_number = Wrapper { value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> };</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">let wrapped_text = Wrapper { value: string::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">utf8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">hello</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;) };</span></span></code></pre>\n<p>Just ensure the type you&#x27;re wrapping has the right abilities (like <code>store</code>) or the compiler will yell at you.</p>\n","isPage":false,"text":"\nGenerics are available for defining fields and variables that work with any type.\nstruct Wrapper&lt;T&gt; has store {\n    value: T,\n}\nYou can now create a Wrapper&lt;u64&gt;, a Wrapper&lt;String&gt;, or whatever else.\nHere’s how you’ll initialize a generic struct:\nlet wrapped_number = Wrapper { value: 42 };\nlet wrapped_text = Wrapper { value: string::utf8(b&quot;hello&quot;) };\nJust ensure the type you&#x27;re wrapping has the right abilities (like store) or the compiler will yell at you.\n","title":"Generics","titles":["Learn Sui Move in 15 Minutes"]},"70":{"href":"/sui-15min#conclusion","html":"\n<p>You’ve learnt the basics of Sui Move, enough for you to get your hands dirty. You’re now a Sui developer.</p>\n<p>Next is an advanced variant of this article where we’ll delve into smart contract specifics to help you build your first project.</p>","isPage":false,"text":"\nYou’ve learnt the basics of Sui Move, enough for you to get your hands dirty. You’re now a Sui developer.\nNext is an advanced variant of this article where we’ll delve into smart contract specifics to help you build your first project.","title":"Conclusion","titles":["Learn Sui Move in 15 Minutes"]},"71":{"href":"/sui-60s#sui--move-overview","html":"</header>\n<p>Move is the secure and resource-oriented programming language  for building on the Sui blockchain. It’s designed to manage digital assets safely and efficiently, giving developers fine-grained control over how assets are created, transferred, and stored.</p>\n<iframe width=\"100%\" height=\"350\" src=\"https://www.youtube.com/embed/ItHXDdyZ_s0\" title=\"Sui Blockchain vs Traditional Blockchain\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\"></iframe>\n<p>Originally developed by Meta for Diem, Move was adopted and evolved by Mysten Labs to power Sui, a high-performance Layer 1 blockchain built for speed, scalability, and smart contract safety.</p>\n<p>Unlike traditional programming languages that treat data like generic variables, Move introduces a new concept: <em><strong>resources</strong></em>. In Move, resources are first-class citizens; they can’t be copied or accidentally dropped.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"vanilla.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">module</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TokenExample</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> std::signer;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> create</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(account: &amp;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">signer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, amount: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        move_to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(account, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Token</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { value: amount });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> get_value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(addr: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">): </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> acquires</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Token</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        borrow_global</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Token</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(addr).value</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>This is cool because assets like NFTs or tokens are handled with cryptographic-level safety.</p>\n<p>Instead of garbage collection or manual memory management, Move uses <em>ownership</em> and <em>move semantics</em>. Each value in Move has exactly one owner at a time, and when that value is moved, the original reference becomes invalid.</p>\n<p>This avoids double-spends and dangling references—two common bugs in smart contract development.</p>\n","isPage":true,"text":"\nMove is the secure and resource-oriented programming language  for building on the Sui blockchain. It’s designed to manage digital assets safely and efficiently, giving developers fine-grained control over how assets are created, transferred, and stored.\n\nOriginally developed by Meta for Diem, Move was adopted and evolved by Mysten Labs to power Sui, a high-performance Layer 1 blockchain built for speed, scalability, and smart contract safety.\nUnlike traditional programming languages that treat data like generic variables, Move introduces a new concept: resources. In Move, resources are first-class citizens; they can’t be copied or accidentally dropped.\nmodule 0x0::TokenExample {\n    use std::signer;\n \n    struct Token has key {\n        value: u64\n    }\n \n    public fun create(account: &amp;signer, amount: u64) {\n        move_to(account, Token { value: amount });\n    }\n \n    public fun get_value(addr: address): u64 acquires Token {\n        borrow_global&lt;Token&gt;(addr).value\n    }\n}\nThis is cool because assets like NFTs or tokens are handled with cryptographic-level safety.\nInstead of garbage collection or manual memory management, Move uses ownership and move semantics. Each value in Move has exactly one owner at a time, and when that value is moved, the original reference becomes invalid.\nThis avoids double-spends and dangling references—two common bugs in smart contract development.\n","title":"Sui &amp; Move Overview","titles":[]},"72":{"href":"/sui-60s#sui-move-extends-on-move","html":"\n<img src=\"/move-evolution.png\" alt=\"Move Evolution\"/>\n<p>Sui Move is a variant of Move (different from the original version). Sui Move extends the core Move language with new features like object-centric programming.</p>\n<p>On Sui, everything is treated as an object with a unique ID—a coin, a smart contract, or a game item. These objects live on-chain and can be passed between users, upgraded, or mutated using Move functions called <em>entry functions</em>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">module</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sui_example</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">token</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::object::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::transfer;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::tx_context::{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> has</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        id: </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> entry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> create</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token = </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Token</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            id: object::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            value</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        };</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token, tx_context::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To get started with Sui Move, install the Sui CLI and initialize a new project with <code>sui move new</code>. Write your modules in <code>.move</code> files and define structs, functions, and resources.</p>\n<p>Use the <code>entry</code> keyword to declare public entry points for your smart contracts. Then compile your code with <code>sui move build</code> and test it locally before deploying.</p>\n<p>Sui Move has a powerful standard library and frameworks for handling complex operations, from capability-based access control to programmable transactions.</p>\n<p>You’re ready to  build a secure, asset-centric smart contract on one of the fastest blockchains. That’s Sui Move in 100 seconds.</p>","isPage":false,"text":"\n\nSui Move is a variant of Move (different from the original version). Sui Move extends the core Move language with new features like object-centric programming.\nOn Sui, everything is treated as an object with a unique ID—a coin, a smart contract, or a game item. These objects live on-chain and can be passed between users, upgraded, or mutated using Move functions called entry functions.\nmodule sui_example::token {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n \n    struct Token has key, store {\n        id: UID,\n        value: u64\n    }\n \n    public entry fun create(value: u64, ctx: &amp;mut TxContext) {\n        let token = Token {\n            id: object::new(ctx),\n            value\n        };\n        transfer::public_transfer(token, tx_context::sender(ctx));\n    }\n}\nTo get started with Sui Move, install the Sui CLI and initialize a new project with sui move new. Write your modules in .move files and define structs, functions, and resources.\nUse the entry keyword to declare public entry points for your smart contracts. Then compile your code with sui move build and test it locally before deploying.\nSui Move has a powerful standard library and frameworks for handling complex operations, from capability-based access control to programmable transactions.\nYou’re ready to  build a secure, asset-centric smart contract on one of the fastest blockchains. That’s Sui Move in 100 seconds.","title":"Sui Move Extends on Move","titles":["Sui &amp; Move Overview"]},"73":{"href":"/ts-advanced#advanced-sui-typescript-sdk-operations","html":"</header>\n<p>You’re most likely building the frontend for your Sui, and you want to improve efficiency as you do so, so this article is for you.</p>\n<p>Here, you’ll learn production-centric operations to ship frontends and backends that interact with the Sui blockchain.</p>\n","isPage":true,"text":"\nYou’re most likely building the frontend for your Sui, and you want to improve efficiency as you do so, so this article is for you.\nHere, you’ll learn production-centric operations to ship frontends and backends that interact with the Sui blockchain.\n","title":"Advanced Sui TypeScript SDK Operations","titles":[]},"74":{"href":"/ts-advanced#getting-started-with-sui--typescript","html":"\n<p>This is not the first or introductory piece I’m working on for Sui and TypeScript. If you need to get some basics to get more comfortable, please check out <a href=\"https://dev.to/goodylili/how-to-use-the-sui-typescript-sdk-2dep\">this introductory article</a> on the Sui TypeScript SDK.</p>\n<p>Install the Sui TypeScript SDK in your project with this command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @mysten/sui.js</span></span></code></pre>\n<p>Now that you’re good to go, let’s start with programmable transactions, one of Sui&#x27;s special features.</p>\n","isPage":false,"text":"\nThis is not the first or introductory piece I’m working on for Sui and TypeScript. If you need to get some basics to get more comfortable, please check out this introductory article on the Sui TypeScript SDK.\nInstall the Sui TypeScript SDK in your project with this command:\nnpm i @mysten/sui.js\nNow that you’re good to go, let’s start with programmable transactions, one of Sui&#x27;s special features.\n","title":"Getting Started with Sui &amp; TypeScript","titles":["Advanced Sui TypeScript SDK Operations"]},"75":{"href":"/ts-advanced#programmable-transactions-blocks","html":"\n<p>Programmable transaction blocks (PTB) allow you to combine multiple transactions into one block and execute them.</p>\n<p>Add these imports to your projects, let us send a programmable transaction.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Transaction } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/transactions&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Ed25519Keypair } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/keypairs/ed25519&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SuiClient, getFullnodeUrl } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/client&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>In this programmable transaction, I want to split a coin and send them to multiple recipients all in one transaction.</p>\n<p>First, I’ll have to create the transaction keypair and define a new transaction instance for the programmable transaction.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Initialize client</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SuiClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ url: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getFullnodeUrl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;testnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create a keypair from your secret</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keypair</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Ed25519Keypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromSecretKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &#x27;suiprivkey1qq9r6rkysny207t5vr7m5025swh7w0wzra9p0553paprhn8zshqsx2rz64r&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create a single new programmable transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Define multiple transfers and the amounts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transfers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        { to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x83ecd81fdd132d4fb4f9ae2608656b000df13c4c3c5b10490d48ee981bc8f433&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, amount: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">500000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        { to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1b2e893cb5164f2f48bd65f77ea76c14d025d8577ab89f2b40a7af0376a8584c&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, amount: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">50000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ];</span></span></code></pre>\n<p>Now, we need to split the gas coin int multiple amounts for transfer with the <code>splitCoins</code> function like this.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Split gas coin into exact amounts for transfers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> coins</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">splitCoins</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        tx.gas,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        transfers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> transfer.amount)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Transfer each split coin to its corresponding address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transfers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">forEach</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">index</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transferObjects</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([coins[index]], transfer.to);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Sign and execute the entire programmable transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signAndExecuteTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        signer: keypair,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        transaction: tx,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction executed successfully.&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Execution result:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(console.error);</span></span></code></pre>\n<p>The <code>transfers.forEach</code> makes the transfers to each recipient and then you’ll sign the programmable transaction with the <code>signAndExecuteTransaction</code> function by passing in the keypair and the transaction you’ve built.</p>\n<img src=\"/programmable.png\" alt=\"Programmable Transactions on Explorer\"/>\n","isPage":false,"text":"\nProgrammable transaction blocks (PTB) allow you to combine multiple transactions into one block and execute them.\nAdd these imports to your projects, let us send a programmable transaction.\nimport { Transaction } from &#x27;@mysten/sui/transactions&#x27;;\nimport { Ed25519Keypair } from &#x27;@mysten/sui/keypairs/ed25519&#x27;;\nimport { SuiClient, getFullnodeUrl } from &#x27;@mysten/sui/client&#x27;;\nIn this programmable transaction, I want to split a coin and send them to multiple recipients all in one transaction.\nFirst, I’ll have to create the transaction keypair and define a new transaction instance for the programmable transaction.\nasync function main() {\n    // Initialize client\n    const client = new SuiClient({ url: getFullnodeUrl(&#x27;testnet&#x27;) });\n \n    // Create a keypair from your secret\n    const keypair = Ed25519Keypair.fromSecretKey(\n        &#x27;suiprivkey1qq9r6rkysny207t5vr7m5025swh7w0wzra9p0553paprhn8zshqsx2rz64r&#x27;\n    );\n \n    // Create a single new programmable transaction\n    const tx = new Transaction();\n \n    // Define multiple transfers and the amounts\n    const transfers = [\n        { to: &#x27;0x83ecd81fdd132d4fb4f9ae2608656b000df13c4c3c5b10490d48ee981bc8f433&#x27;, amount: 500000 },\n        { to: &#x27;0x1b2e893cb5164f2f48bd65f77ea76c14d025d8577ab89f2b40a7af0376a8584c&#x27;, amount: 50000 },\n    ];\nNow, we need to split the gas coin int multiple amounts for transfer with the splitCoins function like this.\n \n// Split gas coin into exact amounts for transfers\n    const coins = tx.splitCoins(\n        tx.gas,\n        transfers.map((transfer) =&gt; transfer.amount)\n    );\n \n    // Transfer each split coin to its corresponding address\n    transfers.forEach((transfer, index) =&gt; {\n        tx.transferObjects([coins[index]], transfer.to);\n    });\n \n    // Sign and execute the entire programmable transaction\n    const result = await client.signAndExecuteTransaction({\n        signer: keypair,\n        transaction: tx,\n    });\n \n    console.log(&#x27;Transaction executed successfully.&#x27;);\n    console.log(&#x27;Execution result:&#x27;, result);\n}\n \nmain().catch(console.error);\nThe transfers.forEach makes the transfers to each recipient and then you’ll sign the programmable transaction with the signAndExecuteTransaction function by passing in the keypair and the transaction you’ve built.\n\n","title":"Programmable Transactions Blocks","titles":["Advanced Sui TypeScript SDK Operations"]},"76":{"href":"/ts-advanced#gas-management-on-sui","html":"\n<p>By default, your transaction uses one of your owned SUI coins as the gas coin. The Sui TypeScript SDK automatically selects a coin not otherwise used in your transaction inputs. However, you can customize gas handling for special cases like sponsored transactions.</p>\n","isPage":false,"text":"\nBy default, your transaction uses one of your owned SUI coins as the gas coin. The Sui TypeScript SDK automatically selects a coin not otherwise used in your transaction inputs. However, you can customize gas handling for special cases like sponsored transactions.\n","title":"Gas Management on Sui","titles":["Advanced Sui TypeScript SDK Operations"]},"77":{"href":"/ts-advanced#standard-gas-payments","html":"\n<p>You can explicitly control the gas settings on a transaction:</p>\n<p>Set a custom gas price:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setGasPrice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(gasPrice);</span></span></code></pre>\n<p>Set a custom gas budget:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setGasBudget</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(gasBudgetAmount);</span></span></code></pre>\n<p>Specify exactly which coins to use as gas payment:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setGasPayment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([{ objectId, version, digest }]);</span></span></code></pre>\n<p>When splitting coins or transferring tokens, you can reuse the gas coin itself as input, because it can be used <strong>by reference</strong> multiple times safely inside the same transaction block.</p>\n<p>If you want to transfer your entire gas coin (send your full balance), you can simply:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transferObjects</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([tx.gas], </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xRecipientAddress&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>This will move your SUI to the recipient and consume the gas object.</p>\n","isPage":false,"text":"\nYou can explicitly control the gas settings on a transaction:\nSet a custom gas price:\ntx.setGasPrice(gasPrice);\nSet a custom gas budget:\ntx.setGasBudget(gasBudgetAmount);\nSpecify exactly which coins to use as gas payment:\ntx.setGasPayment([{ objectId, version, digest }]);\nWhen splitting coins or transferring tokens, you can reuse the gas coin itself as input, because it can be used by reference multiple times safely inside the same transaction block.\nIf you want to transfer your entire gas coin (send your full balance), you can simply:\ntx.transferObjects([tx.gas], &#x27;0xRecipientAddress&#x27;);\nThis will move your SUI to the recipient and consume the gas object.\n","title":"Standard Gas Payments","titles":["Advanced Sui TypeScript SDK Operations","Gas Management on Sui"]},"78":{"href":"/ts-advanced#sponsored-gas-gasless-transactions","html":"\n<p>In a sponsored transaction, another account (the <strong>sponsor</strong>) pays for the gas fees instead of the original sender.</p>\n<p>Here’s a typical example of sending a coin to a recipient where the sender pays for gas.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Transaction } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/transactions&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Ed25519Keypair } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/keypairs/ed25519&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SuiClient, getFullnodeUrl } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/client&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> userPaysForGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SuiClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ url: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getFullnodeUrl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;testnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Use your provided main keypair</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keypair</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Ed25519Keypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromSecretKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;suiprivkey1qq9r6rkysny207t5vr7m5025swh7w0wzra9p0553paprhn8zshqsx2rz64r&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setSender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(keypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPublicKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toSuiAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setGasBudget</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">50_000_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setGasPrice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">splitCoins</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx.gas, [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_000_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transferObjects</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([coin], </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xRecipientAddressHere&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Change this to your target address</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signAndExecuteTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    signer: keypair,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transaction: tx,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;User-paid transaction successful with digest:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.digest);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">userPaysForGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(console.error);</span></span></code></pre>\n<p>In this case, the sender is automatically paying, but what if you want another account to pay the gas? Here’s how you’d implement that.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Transaction } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/transactions&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Ed25519Keypair } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/keypairs/ed25519&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SuiClient, getFullnodeUrl } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/client&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> sponsoredTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SuiClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ url: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getFullnodeUrl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;testnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // User&#x27;s main keypair (your provided key)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> userKeypair</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Ed25519Keypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromSecretKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &#x27;suiprivkey1qq9r6rkysny207t5vr7m5025swh7w0wzra9p0553paprhn8zshqsx2rz64r&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Sponsor keypair (your provided key)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sponsorKeypair</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Ed25519Keypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromSecretKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &#x27;suiprivkey1qr3dtpdvecp2usjah06uyw8d8jvx9syqykxlu5x45cymq8lxn7hz2cqpwte&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Build the user&#x27;s transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setSender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(userKeypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPublicKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toSuiAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">splitCoins</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx.gas, [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_000_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Split 0.001 SUI</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transferObjects</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([coin], </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x83ecd81fdd132d4fb4f9ae2608656b000df13c4c3c5b10490d48ee981bc8f433&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Build KIND bytes (no gas owner yet)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> kindBytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">build</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        client,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        onlyTransactionKind: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Sponsor modifies transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sponsoredTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Transaction.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromKind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(kindBytes);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    sponsoredTx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setSender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(userKeypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPublicKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toSuiAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    sponsoredTx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setGasOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sponsorKeypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPublicKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toSuiAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Build final transaction bytes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> builtBytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sponsoredTx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">build</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ client });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ✍️ User signs first</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">signature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">userSignature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> userKeypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(builtBytes);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ✍️ Sponsor signs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">signature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">sponsorSignature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sponsorKeypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(builtBytes);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // 🚀 Execute with both signatures</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">executeTransactionBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        transactionBlock: builtBytes,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        signature: [userSignature, sponsorSignature], </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// ✅ Two signatures required</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        options: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            showEffects: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            showEvents: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;✅ Sponsored Transaction Successful!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Digest:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.digest);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sponsoredTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(console.error);</span></span></code></pre>\n<p>We  build the transaction into kind bytes using <code>tx.build({ onlyTransactionKind: true })</code> so no gas owner is assigned yet.</p>\n<p>Next, we reload the transaction using <code>Transaction.fromKind(kindBytes)</code>, set the sender again with <code>sponsoredTx.setSender()</code>, and assign the sponsor as the gas payer with <code>sponsoredTx.setGasOwner()</code>.</p>\n<p>After building the final transaction bytes using <code>sponsoredTx.build({ client })</code>, both the user and the sponsor sign the transaction with <code>signTransaction()</code>, and finally, we submit the transaction along with both signatures using <code>client.executeTransactionBlock()</code>.</p>\n<p>On the explorer you’d be able to see that it’s a sponsored transaction like this:</p>\n<img src=\"/sponsored.png\" alt=\"sponsored Transactions on Explorer\"/>\n","isPage":false,"text":"\nIn a sponsored transaction, another account (the sponsor) pays for the gas fees instead of the original sender.\nHere’s a typical example of sending a coin to a recipient where the sender pays for gas.\nimport { Transaction } from &#x27;@mysten/sui/transactions&#x27;;\nimport { Ed25519Keypair } from &#x27;@mysten/sui/keypairs/ed25519&#x27;;\nimport { SuiClient, getFullnodeUrl } from &#x27;@mysten/sui/client&#x27;;\n \nasync function userPaysForGas() {\n  const client = new SuiClient({ url: getFullnodeUrl(&#x27;testnet&#x27;) });\n \n  // Use your provided main keypair\n  const keypair = Ed25519Keypair.fromSecretKey(\n    &#x27;suiprivkey1qq9r6rkysny207t5vr7m5025swh7w0wzra9p0553paprhn8zshqsx2rz64r&#x27;\n  );\n \n  const tx = new Transaction();\n  tx.setSender(keypair.getPublicKey().toSuiAddress());\n \n  tx.setGasBudget(50_000_000);\n  tx.setGasPrice(1000);\n \n  const [coin] = tx.splitCoins(tx.gas, [1_000_000]);\n  tx.transferObjects([coin], &#x27;0xRecipientAddressHere&#x27;); // Change this to your target address\n \n  const result = await client.signAndExecuteTransaction({\n    signer: keypair,\n    transaction: tx,\n  });\n \n  console.log(&#x27;User-paid transaction successful with digest:&#x27;, result.digest);\n}\n \nuserPaysForGas().catch(console.error);\nIn this case, the sender is automatically paying, but what if you want another account to pay the gas? Here’s how you’d implement that.\nimport { Transaction } from &#x27;@mysten/sui/transactions&#x27;;\nimport { Ed25519Keypair } from &#x27;@mysten/sui/keypairs/ed25519&#x27;;\nimport { SuiClient, getFullnodeUrl } from &#x27;@mysten/sui/client&#x27;;\n \nasync function sponsoredTransaction() {\n    const client = new SuiClient({ url: getFullnodeUrl(&#x27;testnet&#x27;) });\n \n    // User&#x27;s main keypair (your provided key)\n    const userKeypair = Ed25519Keypair.fromSecretKey(\n        &#x27;suiprivkey1qq9r6rkysny207t5vr7m5025swh7w0wzra9p0553paprhn8zshqsx2rz64r&#x27;\n    );\n \n    // Sponsor keypair (your provided key)\n    const sponsorKeypair = Ed25519Keypair.fromSecretKey(\n        &#x27;suiprivkey1qr3dtpdvecp2usjah06uyw8d8jvx9syqykxlu5x45cymq8lxn7hz2cqpwte&#x27;\n    );\n \n    // Build the user&#x27;s transaction\n    const tx = new Transaction();\n    tx.setSender(userKeypair.getPublicKey().toSuiAddress());\n \n    const [coin] = tx.splitCoins(tx.gas, [1_000_000]); // Split 0.001 SUI\n    tx.transferObjects([coin], &#x27;0x83ecd81fdd132d4fb4f9ae2608656b000df13c4c3c5b10490d48ee981bc8f433&#x27;);\n \n    // Build KIND bytes (no gas owner yet)\n    const kindBytes = await tx.build({\n        client,\n        onlyTransactionKind: true,\n    });\n \n    // Sponsor modifies transaction\n    const sponsoredTx = Transaction.fromKind(kindBytes);\n \n    sponsoredTx.setSender(userKeypair.getPublicKey().toSuiAddress());\n    sponsoredTx.setGasOwner(sponsorKeypair.getPublicKey().toSuiAddress());\n \n    // Build final transaction bytes\n    const builtBytes = await sponsoredTx.build({ client });\n \n    // ✍️ User signs first\n    const { signature: userSignature } = await userKeypair.signTransaction(builtBytes);\n \n    // ✍️ Sponsor signs\n    const { signature: sponsorSignature } = await sponsorKeypair.signTransaction(builtBytes);\n \n    // 🚀 Execute with both signatures\n    const result = await client.executeTransactionBlock({\n        transactionBlock: builtBytes,\n        signature: [userSignature, sponsorSignature], // ✅ Two signatures required\n        options: {\n            showEffects: true,\n            showEvents: true,\n        },\n    });\n \n    console.log(&#x27;✅ Sponsored Transaction Successful!&#x27;);\n    console.log(&#x27;Digest:&#x27;, result.digest);\n}\n \nsponsoredTransaction().catch(console.error);\nWe  build the transaction into kind bytes using tx.build({ onlyTransactionKind: true }) so no gas owner is assigned yet.\nNext, we reload the transaction using Transaction.fromKind(kindBytes), set the sender again with sponsoredTx.setSender(), and assign the sponsor as the gas payer with sponsoredTx.setGasOwner().\nAfter building the final transaction bytes using sponsoredTx.build({ client }), both the user and the sponsor sign the transaction with signTransaction(), and finally, we submit the transaction along with both signatures using client.executeTransactionBlock().\nOn the explorer you’d be able to see that it’s a sponsored transaction like this:\n\n","title":"Sponsored Gas (Gasless Transactions)","titles":["Advanced Sui TypeScript SDK Operations","Gas Management on Sui"]},"79":{"href":"/ts-advanced#calling-smart-contracts","html":"\n<p>You’ll use the <code>moveCall</code> function inside your transaction to call any Move function on-chain.</p>\n<p>First, make sure you have your imports set:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Transaction } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/transactions&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Here’s how you can call a Move function:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">moveCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  target: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x2::devnet_nft::mint&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  arguments: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    tx.pure.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;NFT Name&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    tx.pure.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;NFT Description&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    tx.pure.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://link-to-your-nft-image.com&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n<p>After you add your <code>moveCall</code>, you can sign and execute the transaction like before.</p>\n","isPage":false,"text":"\nYou’ll use the moveCall function inside your transaction to call any Move function on-chain.\nFirst, make sure you have your imports set:\nimport { Transaction } from &#x27;@mysten/sui/transactions&#x27;;\nHere’s how you can call a Move function:\nconst tx = new Transaction();\ntx.moveCall({\n  target: &#x27;0x2::devnet_nft::mint&#x27;,\n  arguments: [\n    tx.pure.string(&#x27;NFT Name&#x27;),\n    tx.pure.string(&#x27;NFT Description&#x27;),\n    tx.pure.string(&#x27;https://link-to-your-nft-image.com&#x27;),\n  ],\n});\nAfter you add your moveCall, you can sign and execute the transaction like before.\n","title":"Calling Smart Contracts","titles":["Advanced Sui TypeScript SDK Operations"]},"80":{"href":"/ts-advanced#conclusion","html":"\n<p>You’ve learned more advanced, development-centric functions you’ll probably use if you’re building on Sui.</p>\n<p>Now, you can go ahead and start building more sophisticated full stack apps on Sui</p>","isPage":false,"text":"\nYou’ve learned more advanced, development-centric functions you’ll probably use if you’re building on Sui.\nNow, you can go ahead and start building more sophisticated full stack apps on Sui","title":"Conclusion","titles":["Advanced Sui TypeScript SDK Operations"]},"81":{"href":"/ts-intro#sui--typescript-sdk-basics","html":"</header>\n<p>Sui is the chain of the moment, and although Move is the holy grail for writing smart contracts on Sui, the TypeScript support is significant. You can interact with and use Sui and most of the DeFi apps on the ecosystem with TypeScript.</p>\n<p>In this tutorial, I’ll teach you how to interact with the Sui network via TypeScript. You’ll learn how to read the state of the blockchain, write transactions to the chain from your TypeScript programs.</p>\n","isPage":true,"text":"\nSui is the chain of the moment, and although Move is the holy grail for writing smart contracts on Sui, the TypeScript support is significant. You can interact with and use Sui and most of the DeFi apps on the ecosystem with TypeScript.\nIn this tutorial, I’ll teach you how to interact with the Sui network via TypeScript. You’ll learn how to read the state of the blockchain, write transactions to the chain from your TypeScript programs.\n","title":"Sui &amp; TypeScript SDK Basics","titles":[]},"82":{"href":"/ts-intro#getting-started-with-sui-and-typescript","html":"\n<p>The only prerequisite is that you’ll need basic JS/TS knowledge to run this tutorial smoothly. I’ll walk you through everything else.</p>\n<p>First, create a new TypeScript project in your terminal and initialize a new Node.js project.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mkdir</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> SuiTS</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> SuiTS</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> init</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -y</span></span></code></pre>\n<p>Install TypeScript as a development dependency if you don’t have it already.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> typescript</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --save-dev</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ts-node</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> //runs</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> TS</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> without</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> the</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> need</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> transpiling</span></span></code></pre>\n<p>Now, you can initialize a new TypeScript project. This command will create a <code>tsconfig.json</code> file with default options that you can customize for your project.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npx</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tsc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --init</span></span></code></pre>\n<p>Open the <code>tsconfig.json</code> and paste these configurations.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"tsconfig.json\" data-lang=\"json\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;compilerOptions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;target&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ES2020&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;module&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;CommonJS&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;outDir&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./dist&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;rootDir&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./src&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;strict&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;esModuleInterop&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;types&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;node&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;resolveJsonModule&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;exclude&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;node_modules&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;scripts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;build&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;tsc&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;start&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;node dist/index.js&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Create a <code>src</code> directory where you’ll add your TypeScript files.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mkdir</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">touch</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src/index.ts</span></span></code></pre>\n<p>Finally, install the Sui TypeScript SDK with this command.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @mysten/sui.js</span></span></code></pre>\n<p>You’re all set. You can start writing TypeScript programs that interact with the Sui blockchain.</p>\n","isPage":false,"text":"\nThe only prerequisite is that you’ll need basic JS/TS knowledge to run this tutorial smoothly. I’ll walk you through everything else.\nFirst, create a new TypeScript project in your terminal and initialize a new Node.js project.\nmkdir SuiTS\ncd SuiTS\nnpm init -y\nInstall TypeScript as a development dependency if you don’t have it already.\nnpm install typescript --save-dev\nnpm install ts-node //runs TS without the need for transpiling\nNow, you can initialize a new TypeScript project. This command will create a tsconfig.json file with default options that you can customize for your project.\nnpx tsc --init\nOpen the tsconfig.json and paste these configurations.\n{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;ES2020&quot;,\n    &quot;module&quot;: &quot;CommonJS&quot;,\n    &quot;outDir&quot;: &quot;./dist&quot;,\n    &quot;rootDir&quot;: &quot;./src&quot;,\n    &quot;strict&quot;: true,\n    &quot;esModuleInterop&quot;: true,\n    &quot;types&quot;: [&quot;node&quot;],\n    &quot;resolveJsonModule&quot;: true\n  },\n  &quot;exclude&quot;: [&quot;node_modules&quot;],\n \n  &quot;scripts&quot;: {\n    &quot;build&quot;: &quot;tsc&quot;,\n    &quot;start&quot;: &quot;node dist/index.js&quot;\n  }\n}\nCreate a src directory where you’ll add your TypeScript files.\nmkdir src\ntouch src/index.ts\nFinally, install the Sui TypeScript SDK with this command.\nnpm i @mysten/sui.js\nYou’re all set. You can start writing TypeScript programs that interact with the Sui blockchain.\n","title":"Getting Started With Sui and TypeScript","titles":["Sui &amp; TypeScript SDK Basics"]},"83":{"href":"/ts-intro#connecting-to-the-sui-blockchain","html":"\n<p>You must connect to a Sui blockchain to interact with the chain.</p>\n<p>First, import <code>getFullnodeUrl</code> and <code>SuiClient</code> from the SDK client module.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">import</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> {</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> getFullnodeUrl,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> SuiClient</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> }</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/client&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Now, depending on your desired connection, you can use <code>getFullnodeUrl</code> to retrieve the full node URL of the Sui testnet, mainnet, localnet, or devnet; then, use the <code>SuiClient</code> to connect to the client instance.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getFullnodeUrl, SuiClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/client&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rpcUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getFullnodeUrl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mainnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SuiClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ url: rpcUrl });</span></span></code></pre>\n<p>To test your connection, You can use the <code>getLatestSuiSystemState</code> to retrieve the latest state of the network.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// index.ts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getFullnodeUrl, SuiClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/client&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rpcUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getFullnodeUrl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;mainnet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SuiClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ url: rpcUrl });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getNetworkStatus</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> currentEpoch</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLatestSuiSystemState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(currentEpoch)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getNetworkStatus</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>Now, transpile the TypeScript code to JavaScript and run it with this command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ts-node</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> index.ts</span></span></code></pre>\n<p>You should expect an output similar to this when you execute the command.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6hdtnnms7stcmxwzs9b.png\" alt=\"typescript-setup-output\"/></p>\n","isPage":false,"text":"\nYou must connect to a Sui blockchain to interact with the chain.\nFirst, import getFullnodeUrl and SuiClient from the SDK client module.\nimport { getFullnodeUrl, SuiClient } from &#x27;@mysten/sui/client&#x27;;\nNow, depending on your desired connection, you can use getFullnodeUrl to retrieve the full node URL of the Sui testnet, mainnet, localnet, or devnet; then, use the SuiClient to connect to the client instance.\nimport { getFullnodeUrl, SuiClient } from &#x27;@mysten/sui/client&#x27;;\n \nconst rpcUrl = getFullnodeUrl(&#x27;mainnet&#x27;);\n \nconst client = new SuiClient({ url: rpcUrl });\nTo test your connection, You can use the getLatestSuiSystemState to retrieve the latest state of the network.\n// index.ts\nimport { getFullnodeUrl, SuiClient } from &#x27;@mysten/sui/client&#x27;;\n \nconst rpcUrl = getFullnodeUrl(&quot;mainnet&quot;);\n \nconst client = new SuiClient({ url: rpcUrl });\n \nasync function getNetworkStatus() {\n    const currentEpoch = await client.getLatestSuiSystemState();\n    console.log(currentEpoch)\n}\n \ngetNetworkStatus();\nNow, transpile the TypeScript code to JavaScript and run it with this command:\nts-node index.ts\nYou should expect an output similar to this when you execute the command.\n\n","title":"Connecting to the Sui Blockchain","titles":["Sui &amp; TypeScript SDK Basics"]},"84":{"href":"/ts-intro#creating-a-sui-wallet","html":"\n<p>Creating a wallet is another popular operation that might be handy if you build on the Sui Network.</p>\n<p>Here’s how to generate Sui wallet keypairs and retrieve the private and public keys from the Keypair.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Ed25519Keypair } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/keypairs/ed25519&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getFullnodeUrl, SuiClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/client&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rpcUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getFullnodeUrl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;mainnet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SuiClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ url: rpcUrl });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// random Keypair</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keypair</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Ed25519Keypair</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> publicKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> keypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPublicKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> privatekey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> keypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSecretKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(privatekey.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(publicKey.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toSuiAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span></code></pre>\n<p>The <code>Ed25519Keypair</code> function creates a new key pair. The <code>getPublicKey</code> and <code>getPrivateKey</code> methods give you access to the public and private keys, respectively.</p>\n<p>Here’s the string output of the private and public keys I generated with the program:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">suiprivkey1qq9r6rkysny207t5vr7m5025swh7w0wzra9p0553paprhn8zshqsx2rz64r</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">New Sui Address: 0xbd46d7582ced464ef369114252704b10317436ef70f196a33fcf2c724991fcba</span></span></code></pre>\n<p>I’m funding this wallet with 0.25 Sui for the next set of operations. Feel free to verify and scan the wallet. Do not send any funds; it’s just a dummy wallet.</p>\n","isPage":false,"text":"\nCreating a wallet is another popular operation that might be handy if you build on the Sui Network.\nHere’s how to generate Sui wallet keypairs and retrieve the private and public keys from the Keypair.\nimport { Ed25519Keypair } from &#x27;@mysten/sui/keypairs/ed25519&#x27;;\nimport { getFullnodeUrl, SuiClient } from &#x27;@mysten/sui/client&#x27;;\n \nconst rpcUrl = getFullnodeUrl(&quot;mainnet&quot;);\n \nconst client = new SuiClient({ url: rpcUrl });\n \n// random Keypair\nconst keypair = new Ed25519Keypair();\n \nconst publicKey = keypair.getPublicKey();\nconst privatekey = keypair.getSecretKey();\n \nconsole.log(privatekey.toString());\nconsole.log(publicKey.toSuiAddress());\nThe Ed25519Keypair function creates a new key pair. The getPublicKey and getPrivateKey methods give you access to the public and private keys, respectively.\nHere’s the string output of the private and public keys I generated with the program:\nsuiprivkey1qq9r6rkysny207t5vr7m5025swh7w0wzra9p0553paprhn8zshqsx2rz64r\nNew Sui Address: 0xbd46d7582ced464ef369114252704b10317436ef70f196a33fcf2c724991fcba\nI’m funding this wallet with 0.25 Sui for the next set of operations. Feel free to verify and scan the wallet. Do not send any funds; it’s just a dummy wallet.\n","title":"Creating a Sui Wallet","titles":["Sui &amp; TypeScript SDK Basics"]},"85":{"href":"/ts-intro#reading-sui-wallet-balances","html":"\n<p>You can use the <code>getCoins</code> function on your client instance to retrieve details on the coins in a wallet address.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getFullnodeUrl, SuiClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/client&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// use getFullnodeUrl to define the Devnet RPC location</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rpcUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getFullnodeUrl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mainnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// create a client connected to devnet</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SuiClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ url: rpcUrl });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getOwnedCoins</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> coins</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCoins</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        owner: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xbd46d7582ced464ef369114252704b10317436ef70f196a33fcf2c724991fcba&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(coins);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getOwnedCoins</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>The function returns details on the Sui coin alone and the details. The output is in MIST, the Sui gas token. 1 SUI equals 1 billion MIST.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxxlj9pyd3akc93zpo78.png\" alt=\"wallet-balance-details\"/></p>\n<p>The getAllCoins function can be used in the same way to get a list of all the coins in a wallet.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAllCoins</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Get the list of owned coins (tokens) for the given owner address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ownedCoins</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAllCoins</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ owner: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xbd46d7582ced464ef369114252704b10317436ef70f196a33fcf2c724991fcba&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Access the coin data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> coins</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ownedCoins.data;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Iterate through the coins and print their details</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> coin</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> coins) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Coin Type: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">coin</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">coinType</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Coin Object ID: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">coin</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">coinObjectId</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Balance: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">coin</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">balance</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;--------------------&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // If there is more data, handle pagination</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (ownedCoins.hasNextPage) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;More data available. Fetching next page...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // You can handle the next page using ownedCoins.nextCursor if needed</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAllCoins</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>For this example, I traded some Sui for $FUD on Hop Aggregator, and here’s the output after running the program.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amc6xxd0fnhgtv5qd556.png\" alt=\"listing-all-balances\"/></p>\n","isPage":false,"text":"\nYou can use the getCoins function on your client instance to retrieve details on the coins in a wallet address.\nimport { getFullnodeUrl, SuiClient } from &#x27;@mysten/sui/client&#x27;;\n \n// use getFullnodeUrl to define the Devnet RPC location\nconst rpcUrl = getFullnodeUrl(&#x27;mainnet&#x27;);\n \n// create a client connected to devnet\nconst client = new SuiClient({ url: rpcUrl });\n \nasync function getOwnedCoins() {\n    const coins = await client.getCoins({\n        owner: &#x27;0xbd46d7582ced464ef369114252704b10317436ef70f196a33fcf2c724991fcba&#x27;,\n    });\n    console.log(coins);\n}\n \ngetOwnedCoins();\nThe function returns details on the Sui coin alone and the details. The output is in MIST, the Sui gas token. 1 SUI equals 1 billion MIST.\n\nThe getAllCoins function can be used in the same way to get a list of all the coins in a wallet.\nasync function getAllCoins() {\n    // Get the list of owned coins (tokens) for the given owner address\n    const ownedCoins = await client.getAllCoins({ owner: &quot;0xbd46d7582ced464ef369114252704b10317436ef70f196a33fcf2c724991fcba&quot; });\n \n    // Access the coin data\n    const coins = ownedCoins.data;\n \n    // Iterate through the coins and print their details\n    for (const coin of coins) {\n        console.log(`Coin Type: ${coin.coinType}`);\n        console.log(`Coin Object ID: ${coin.coinObjectId}`);\n        console.log(`Balance: ${coin.balance}`);\n        console.log(&#x27;--------------------&#x27;);\n    }\n \n    // If there is more data, handle pagination\n    if (ownedCoins.hasNextPage) {\n        console.log(&#x27;More data available. Fetching next page...&#x27;);\n        // You can handle the next page using ownedCoins.nextCursor if needed\n    }\n}\n \ngetAllCoins();\nFor this example, I traded some Sui for $FUD on Hop Aggregator, and here’s the output after running the program.\n\n","title":"Reading Sui Wallet Balances","titles":["Sui &amp; TypeScript SDK Basics"]},"86":{"href":"/ts-intro#send-coins-or-objects","html":"\n<p>Finally, the interesting part is that you’ll learn to send transactions on the blockchain.</p>\n<p>Let’s send some $FUD tokens to another wallet. This works for any coins on the Sui Network.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {getFullnodeUrl, SuiClient} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/client&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {Ed25519Keypair} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/keypairs/ed25519&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {Transaction} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/transactions&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set the RPC URL to connect to the Sui mainnet</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rpcUrl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getFullnodeUrl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;mainnet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SuiClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({url: rpcUrl});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create the keypair using the private key</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keypair</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Ed25519Keypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromSecretKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;suiprivkey1qq9r6rkysny207t5vr7m5025swh7w0wzra9p0553paprhn8zshqsx2rz64r&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// FUD coin type</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> FUD_TYPE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x76cb819b01abed502bee8a702b4c2d547532c12f25001c9dea795a5e631c26f1::fud::FUD&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> sendFUD</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Fetch FUD coins owned by the sender</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> coins</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCoins</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({owner: keypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPublicKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toSuiAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), coinType: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">FUD_TYPE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (coins.data.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;No FUD coins found in the wallet.&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Choose the first available FUD coin and split it for the transfer (adjust amount if needed)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">splitCoins</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(coins.data[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].coinObjectId, [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transferObjects</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([coin], </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xb0042cf2c5a16d0a240fc1391d570cd5fe06548f860583f1878c327db70f2a22&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signAndExecuteTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({signer: keypair, transaction: tx});</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">waitForTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({digest: result.digest});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Transaction successful. Digest:&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.digest);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendFUD</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">then</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(console.log).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(console.error);</span></span></code></pre>\n<p>First, I checked that the wallet had some $FUD and split it for the transfer. The <code>tx.transferObjects</code> transfer the split coin to the specified address.</p>\n<p>Finally, you need to sign the transaction with the <code>client.signAndExecuteTransaction</code>, and you can wait for the transaction with <code>waitForTransaction</code> to confirm the transaction went through</p>\n","isPage":false,"text":"\nFinally, the interesting part is that you’ll learn to send transactions on the blockchain.\nLet’s send some $FUD tokens to another wallet. This works for any coins on the Sui Network.\nimport {getFullnodeUrl, SuiClient} from &#x27;@mysten/sui/client&#x27;;\nimport {Ed25519Keypair} from &#x27;@mysten/sui/keypairs/ed25519&#x27;;\nimport {Transaction} from &#x27;@mysten/sui/transactions&#x27;;\n \n// Set the RPC URL to connect to the Sui mainnet\nconst rpcUrl = getFullnodeUrl(&quot;mainnet&quot;);\n \nconst client = new SuiClient({url: rpcUrl});\n \n// Create the keypair using the private key\nconst keypair = Ed25519Keypair.fromSecretKey(&quot;suiprivkey1qq9r6rkysny207t5vr7m5025swh7w0wzra9p0553paprhn8zshqsx2rz64r&quot;);\n \n// FUD coin type\nconst FUD_TYPE = &#x27;0x76cb819b01abed502bee8a702b4c2d547532c12f25001c9dea795a5e631c26f1::fud::FUD&#x27;;\n \nasync function sendFUD() {\n    const tx = new Transaction();\n \n    // Fetch FUD coins owned by the sender\n    const coins = await client.getCoins({owner: keypair.getPublicKey().toSuiAddress(), coinType: FUD_TYPE});\n \n    if (coins.data.length === 0) {\n        console.log(&quot;No FUD coins found in the wallet.&quot;);\n        return;\n    }\n \n    // Choose the first available FUD coin and split it for the transfer (adjust amount if needed)\n    const [coin] = tx.splitCoins(coins.data[0].coinObjectId, [100000000]);\n \n    tx.transferObjects([coin], &#x27;0xb0042cf2c5a16d0a240fc1391d570cd5fe06548f860583f1878c327db70f2a22&#x27;);\n \n    const result = await client.signAndExecuteTransaction({signer: keypair, transaction: tx});\n    await client.waitForTransaction({digest: result.digest});\n \n    console.log(&quot;Transaction successful. Digest:&quot;, result.digest);\n}\n \nsendFUD().then(console.log).catch(console.error);\nFirst, I checked that the wallet had some $FUD and split it for the transfer. The tx.transferObjects transfer the split coin to the specified address.\nFinally, you need to sign the transaction with the client.signAndExecuteTransaction, and you can wait for the transaction with waitForTransaction to confirm the transaction went through\n","title":"Send Coins or Objects","titles":["Sui &amp; TypeScript SDK Basics"]},"87":{"href":"/ts-intro#conclusion","html":"\n<p>You’ve learned to interact with the Sui blockchain using the official TypeScript SDK. There’s so much you can build on Sui with your newly acquired knowledge, such as building wallets and bots.</p>\n<p>You can take this further by learning how to interact with Move contracts on Sui to build more sophisticated dApps</p>","isPage":false,"text":"\nYou’ve learned to interact with the Sui blockchain using the official TypeScript SDK. There’s so much you can build on Sui with your newly acquired knowledge, such as building wallets and bots.\nYou can take this further by learning how to interact with Move contracts on Sui to build more sophisticated dApps","title":"Conclusion","titles":["Sui &amp; TypeScript SDK Basics"]},"88":{"href":"/wallet-evac#build-a-wallet-evacuation-package","html":"</header>\n<p>Have you ever wanted to send multiple assets to another wallet or totally evacuate a wallet because you think you’re at risk of a drainer?</p>\n<p>I haven’t come across a tool or wallet that allows you to do this, but it’s really useful, so why not build one on Sui now?</p>\n","isPage":true,"text":"\nHave you ever wanted to send multiple assets to another wallet or totally evacuate a wallet because you think you’re at risk of a drainer?\nI haven’t come across a tool or wallet that allows you to do this, but it’s really useful, so why not build one on Sui now?\n","title":"Build a Wallet Evacuation Package","titles":[]},"89":{"href":"/wallet-evac#building-the-evacuation-package","html":"\n<p>Once you have your project setup, define the module at the top of your Move file like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">module</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rendevous</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">evacuate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Now import the <code>Coin</code> module like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sui::coin::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Feel free to define custom errors:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> E_LENGTH_MISMATCH</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>You’ll use this to  catch cases where the user provides a mismatched number of coins and amounts.</p>\n<p>Here’s the function signature for the evacuation. The function takes in the recipient address, a vector of the coins and the amounts you want to send for each, and the transaction context.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> entry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> fun</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> evacuate_wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    recipient: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> coins: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    amounts: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx: &amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>Now, you’d have to make sure the lengths of the vectors match like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> num_coins = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;coins);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> num_amounts = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;amounts);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">!(num_coins == num_amounts, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">E_LENGTH_MISMATCH</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Now, the core evaluation functionality!  You could go through each coin, split the amount to send, transfer both the split and leftover to the recipient, and clean up the original coin vector.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> num_coins = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;coins);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> num_amounts = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;amounts);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">!(num_coins == num_amounts, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">E_LENGTH_MISMATCH</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    while</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (i &lt; num_coins) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> coin = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">pop_back</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> coins);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount = *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">borrow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;amounts, i);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> portion = sui::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">coin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">split</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> coin, amount, ctx);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(portion, recipient);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        transfer::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">public_transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(coin, recipient);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        i = i + </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    vector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">destroy_empty</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(coins);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>You have to destroy the original coin vector because in Sui Move, a <strong><code>vector&lt;Coin&lt;T&gt;&gt;</code></strong> does <strong>not</strong> have the <strong><code>drop</code></strong> ability (since <strong><code>Coin&lt;T&gt;</code></strong> itself does not have <strong><code>drop</code></strong>).</p>\n<p>Now build the package to make sure everything works as expected:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sui move build</span></span></code></pre>\n<p>You can execute this command to publish the package to a Sui network.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sui client publish --gas-budget 100000000</span></span></code></pre>\n<p>Execute this command to evacuate or send multiple coins to a wallet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"sui.move\" data-lang=\"move\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sui client call \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --package &lt;PACKAGE_ID&gt; \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">module</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> evacuate \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --function evacuate_wallet \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --args &lt;RECIPIENT_ADDRESS&gt; \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">         &#x27;[&lt;COIN_ID_1&gt;, &lt;COIN_ID_2&gt;, ...]&#x27; \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">         &#x27;[&lt;AMOUNT_1&gt;, &lt;AMOUNT_2&gt;, ...]&#x27; \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --type-args &lt;TOKEN_TYPE&gt; \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --gas-budget 100000000</span></span></code></pre>\n<p>Replace the placeholders:</p>\n<ul>\n<li><code>&lt;PACKAGE_ID&gt;</code> – your published package ID.</li>\n<li><code>&lt;RECIPIENT_ADDRESS&gt;</code> – the address you’re evacuating to.</li>\n<li><code>&lt;COIN_ID_1&gt;...</code> – the object IDs of the coins you’re transferring.</li>\n<li><code>&lt;AMOUNT_1&gt;...</code> – the exact amount to transfer from each coin.</li>\n<li><code>&lt;TOKEN_TYPE&gt;</code> – the type of the token (e.g., <code>0x2::sui::SUI</code> or your custom coin).</li>\n</ul>\n<p>Your tokens should all be sent in one transaction, and you’ll surely save on gas.</p>\n","isPage":false,"text":"\nOnce you have your project setup, define the module at the top of your Move file like this:\nmodule rendevous::evacuate;\nNow import the Coin module like this:\nuse sui::coin::Coin;\nFeel free to define custom errors:\nconst E_LENGTH_MISMATCH: u64 = 0;\nYou’ll use this to  catch cases where the user provides a mismatched number of coins and amounts.\nHere’s the function signature for the evacuation. The function takes in the recipient address, a vector of the coins and the amounts you want to send for each, and the transaction context.\npublic entry fun evacuate_wallet&lt;T: store&gt;(\n    recipient: address,\n    mut coins: vector&lt;Coin&lt;T&gt;&gt;,\n    amounts: vector&lt;u64&gt;,\n    ctx: &amp;mut TxContext,\n)\nNow, you’d have to make sure the lengths of the vectors match like this:\n{\n    let num_coins = vector::length(&amp;coins);\n    let num_amounts = vector::length(&amp;amounts);\n    assert!(num_coins == num_amounts, E_LENGTH_MISMATCH);\nNow, the core evaluation functionality!  You could go through each coin, split the amount to send, transfer both the split and leftover to the recipient, and clean up the original coin vector.\n {\n    let num_coins = vector::length(&amp;coins);\n    let num_amounts = vector::length(&amp;amounts);\n    assert!(num_coins == num_amounts, E_LENGTH_MISMATCH);\n \n    let mut i = 0;\n    while (i &lt; num_coins) {\n        let mut coin = vector::pop_back(&amp;mut coins);\n        let amount = *vector::borrow(&amp;amounts, i);\n        let portion = sui::coin::split(&amp;mut coin, amount, ctx);\n        transfer::public_transfer(portion, recipient);\n        transfer::public_transfer(coin, recipient);\n        \n        i = i + 1;\n    };\n \n    vector::destroy_empty(coins);\n}\nYou have to destroy the original coin vector because in Sui Move, a vector&lt;Coin&lt;T&gt;&gt; does not have the drop ability (since Coin&lt;T&gt; itself does not have drop).\nNow build the package to make sure everything works as expected:\nsui move build\nYou can execute this command to publish the package to a Sui network.\nsui client publish --gas-budget 100000000\nExecute this command to evacuate or send multiple coins to a wallet:\nsui client call \\\n  --package &lt;PACKAGE_ID&gt; \\\n  --module evacuate \\\n  --function evacuate_wallet \\\n  --args &lt;RECIPIENT_ADDRESS&gt; \\\n         &#x27;[&lt;COIN_ID_1&gt;, &lt;COIN_ID_2&gt;, ...]&#x27; \\\n         &#x27;[&lt;AMOUNT_1&gt;, &lt;AMOUNT_2&gt;, ...]&#x27; \\\n  --type-args &lt;TOKEN_TYPE&gt; \\\n  --gas-budget 100000000\nReplace the placeholders:\n\n&lt;PACKAGE_ID&gt; – your published package ID.\n&lt;RECIPIENT_ADDRESS&gt; – the address you’re evacuating to.\n&lt;COIN_ID_1&gt;... – the object IDs of the coins you’re transferring.\n&lt;AMOUNT_1&gt;... – the exact amount to transfer from each coin.\n&lt;TOKEN_TYPE&gt; – the type of the token (e.g., 0x2::sui::SUI or your custom coin).\n\nYour tokens should all be sent in one transaction, and you’ll surely save on gas.\n","title":"Building the Evacuation Package","titles":["Build a Wallet Evacuation Package"]},"90":{"href":"/wallet-evac#conclusion","html":"\n<p>If you ever need to send out multiple assets from a single wallet, you know how to go around it.</p>\n<p>Up next is clients because you’re definitely not shipping CLI commands to users.</p>","isPage":false,"text":"\nIf you ever need to send out multiple assets from a single wallet, you know how to go around it.\nUp next is clients because you’re definitely not shipping CLI commands to users.","title":"Conclusion","titles":["Build a Wallet Evacuation Package"]},"91":{"href":"/walrus-deploy#lets-deploy-a-walrus-site","html":"</header>\n<p>Crypto’s centralized facets have most of their frontends on Web2 servers and services, and that&#x27;s a pretty big deal. What if the entire stack could be decentralized?</p>\n<p>That’s the problem Walrus solves. Now you can deploy any static website to Walrus and harness all the benefits of decentralization. This article will teach you how to deploy a Walrus site.</p>\n","isPage":true,"text":"\nCrypto’s centralized facets have most of their frontends on Web2 servers and services, and that&#x27;s a pretty big deal. What if the entire stack could be decentralized?\nThat’s the problem Walrus solves. Now you can deploy any static website to Walrus and harness all the benefits of decentralization. This article will teach you how to deploy a Walrus site.\n","title":"Let’s Deploy a Walrus Site","titles":[]},"92":{"href":"/walrus-deploy#installing-walrus-site-builder","html":"\n<p>First, you’ll need to get set up with Walrus. I recommend installing via the CLI commands, especially if you’re on a Mac, because I ran into an issue trying to install it on my Mac.</p>\n<p>You will likely deploy your Walrus site on Mainnet, so execute this command to install the Walrus CLI tool and then the website builder for mainnet.</p>\n<p>Execute this command to install the latest Walrus mainnet version:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -sSf</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://docs.wal.app/setup/walrus-install.sh</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> sh</span></span></code></pre>\n<p>You’ll need to add the <code>walrus</code> binary to your PATH. Also, you need to download the latest Walrus cofigurations with this command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://docs.wal.app/setup/client_config.yaml</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -o</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~/.config/walrus/client_config.yaml</span></span></code></pre>\n<p>Now execute this command to install the website builder.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">SYSTEM</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> # set this to your system</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ubuntu</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">x86_64, ubuntu</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">x86_64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">generic, macos</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">x86_64, macos</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">arm64, windows</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">x86_64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exe</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">curl https</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//storage.googleapis.com/mysten-walrus-binaries/site-builder-mainnet-latest-$SYSTEM -o site-builder</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">chmod </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">x site</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">builder</span></span></code></pre>\n<p>You’ll also need to move the binary to any directory included in your $PATH environment variable. You can do that with this command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sudo mv site</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">builder </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">usr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">local</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">bin</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span></span></code></pre>\n<p>Once you’re set up, you should be able to use <code>site-builder</code> as a command in your terminal like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">site-builder</span></span></code></pre>\n<p>If you encounter any issues, visit the <a href=\"https://docs.wal.app/walrus-sites/tutorial-install.html\">site builder installation page</a> for cues or ask the AI.</p>\n","isPage":false,"text":"\nFirst, you’ll need to get set up with Walrus. I recommend installing via the CLI commands, especially if you’re on a Mac, because I ran into an issue trying to install it on my Mac.\nYou will likely deploy your Walrus site on Mainnet, so execute this command to install the Walrus CLI tool and then the website builder for mainnet.\nExecute this command to install the latest Walrus mainnet version:\ncurl -sSf https://docs.wal.app/setup/walrus-install.sh | sh\nYou’ll need to add the walrus binary to your PATH. Also, you need to download the latest Walrus cofigurations with this command:\ncurl https://docs.wal.app/setup/client_config.yaml -o ~/.config/walrus/client_config.yaml\nNow execute this command to install the website builder.\nSYSTEM= # set this to your system: ubuntu-x86_64, ubuntu-x86_64-generic, macos-x86_64, macos-arm64, windows-x86_64.exe\ncurl https://storage.googleapis.com/mysten-walrus-binaries/site-builder-mainnet-latest-$SYSTEM -o site-builder\nchmod +x site-builder\nYou’ll also need to move the binary to any directory included in your $PATH environment variable. You can do that with this command:\nsudo mv site-builder /usr/local/bin/\nOnce you’re set up, you should be able to use site-builder as a command in your terminal like this:\nsite-builder\nIf you encounter any issues, visit the site builder installation page for cues or ask the AI.\n","title":"Installing Walrus Site Builder","titles":["Let’s Deploy a Walrus Site"]},"93":{"href":"/walrus-deploy#deploying-your-walrus-site","html":"\n<p>Regardless of the frontend framework you’re using, you can transpile into static files and build with Walrus.</p>\n<p>In this case, I’m going to deploy a Vitepress site, so I’ll need to build it with this command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">npm run build</span></span></code></pre>\n<p>Once you have your static files based on whatever frontend framework you’re using now, onto Walrus.</p>\n<p>You’ll need to download the latest Walrus configuration file. Execute this command for that:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mkdir </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p ~</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">walrus</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">curl https</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6A737D;--shiki-dark:#768390\">//raw.githubusercontent.com/MystenLabs/walrus-sites/refs/heads/mainnet/sites-config.yaml -o ~/.config/walrus/sites-config.yaml</span></span></code></pre>\n<p>You should find  the file in your working directory. Here’s the path:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">~</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">walrus</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sites</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">yaml</span></span></code></pre>\n<p>Now <code>site-builder</code> will automatically find it — you don&#x27;t need to pass <code>--config</code> manually every time!</p>\n<p>Now execute this command to deploy the site</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">site</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">builder publish </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">./</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">dist </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">--</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">epochs </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span></span></code></pre>\n<p>The <code>./dist</code> is the folder with static files. <code>-epochs 1</code> means the site will live for at least 1 epoch (you can set more if you want)</p>\n<p>This should build the site and you’ll get some important data as output</p>\n<p>including Blob IDs created for each file, the <strong>new Site Object ID</strong> (important!) and the options you have to share your site.</p>\n<img src=\"/deployed.png\" alt=\"Site Deployed\"/>\n<p>Congratulations, your site is <strong>live on Walrus!</strong></p>\n","isPage":false,"text":"\nRegardless of the frontend framework you’re using, you can transpile into static files and build with Walrus.\nIn this case, I’m going to deploy a Vitepress site, so I’ll need to build it with this command:\nnpm run build\nOnce you have your static files based on whatever frontend framework you’re using now, onto Walrus.\nYou’ll need to download the latest Walrus configuration file. Execute this command for that:\nmkdir -p ~/.config/walrus\ncurl https://raw.githubusercontent.com/MystenLabs/walrus-sites/refs/heads/mainnet/sites-config.yaml -o ~/.config/walrus/sites-config.yaml\nYou should find  the file in your working directory. Here’s the path:\n~/.config/walrus/sites-config.yaml\nNow site-builder will automatically find it — you don&#x27;t need to pass --config manually every time!\nNow execute this command to deploy the site\nsite-builder publish ./dist --epochs 1\nThe ./dist is the folder with static files. -epochs 1 means the site will live for at least 1 epoch (you can set more if you want)\nThis should build the site and you’ll get some important data as output\nincluding Blob IDs created for each file, the new Site Object ID (important!) and the options you have to share your site.\n\nCongratulations, your site is live on Walrus!\n","title":"Deploying Your Walrus Site","titles":["Let’s Deploy a Walrus Site"]},"94":{"href":"/walrus-deploy#purchasing-and-registering-domain-names","html":"\n<p>You can <a href=\"https://docs.wal.app/walrus-sites/bring-your-own-domain.html\">bring your existing domains</a> to Walrus, or you can use the Sui name service to keep the entire system down to naming decentralized.</p>\n<p>Simply head over to the <a href=\"http://suins.io\">Sui Name Service Website</a> and buy a <code>.sui</code> domain for your project:</p>\n<img src=\"/names.png\" alt=\"Names you own\"/>\n<p>After buying the domain, select one of the domain names you own and enter the site object ID like this:</p>\n<img src=\"/suins.gif\" alt=\"SuiNS GIF\"/>\n<p>Once that’s done. Immediately visting the domain (your name).wal.app should</p>\n","isPage":false,"text":"\nYou can bring your existing domains to Walrus, or you can use the Sui name service to keep the entire system down to naming decentralized.\nSimply head over to the Sui Name Service Website and buy a .sui domain for your project:\n\nAfter buying the domain, select one of the domain names you own and enter the site object ID like this:\n\nOnce that’s done. Immediately visting the domain (your name).wal.app should\n","title":"Purchasing and Registering Domain Names","titles":["Let’s Deploy a Walrus Site"]},"95":{"href":"/walrus-deploy#conclusion","html":"\n<p>You’ve learned how you can deploy a Walrus site and keep the domain name service decentralized by connecting it to a SuiNS domain.</p>\n<p>Next, learn how you can store your files on Walrus with the official TypeScript SDK.</p>","isPage":false,"text":"\nYou’ve learned how you can deploy a Walrus site and keep the domain name service decentralized by connecting it to a SuiNS domain.\nNext, learn how you can store your files on Walrus with the official TypeScript SDK.","title":"Conclusion","titles":["Let’s Deploy a Walrus Site"]},"96":{"href":"/walrus-ts#walrus-typescript-sdk-guide","html":"</header>\n<p>Walrus is undoutedly the best decentralized storage solution in the market right now by every metric. The developer tooling scene is also great.</p>\n<p>This article will walk you though interacting with the Walrus protocol. You’ll learn everything you’ll need  to start uploading and retrieving blobs and generally interacting with the Walrus protocol.</p>\n","isPage":true,"text":"\nWalrus is undoutedly the best decentralized storage solution in the market right now by every metric. The developer tooling scene is also great.\nThis article will walk you though interacting with the Walrus protocol. You’ll learn everything you’ll need  to start uploading and retrieving blobs and generally interacting with the Walrus protocol.\n","title":"Walrus TypeScript SDK Guide","titles":[]},"97":{"href":"/walrus-ts#getting-started-with-walrus--typescript","html":"\n<p>First, you’ll need to get set up with Walrus. I recommend installing via the CLI commands, especially if you’re on a Mac, because I ran into an issue trying to install it on my Mac.</p>\n<p>You will likely deploy your Walrus site on Mainnet, so execute this command to install the Walrus CLI tool and then the website builder for mainnet.</p>\n<p>Execute this command to install the latest Walrus mainnet version:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -sSf</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://docs.wal.app/setup/walrus-install.sh</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> sh</span></span></code></pre>\n<p>You’ll need to add the <code>walrus</code> binary to your PATH. Also, you need to download the latest Walrus configurations with this command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://docs.wal.app/setup/client_config.yaml</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -o</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~/.config/walrus/client_config.yaml</span></span></code></pre>\n<p>You just installed Walrus CLI in this case for the sole purpose of requesting test tokens.</p>\n<p>To request Walrus Testnet WAL tokens, make sure you have a Sui Testnet wallet with some SUI tokens. You can get some from the <a href=\"https://faucet.sui.io/?network=testnet\">**Sui Testnet faucet</a>.</p>\n<p>Now, execute this command in your terminal to exchange some SUI for WAL:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">walrus</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> get-wal</span></span></code></pre>\n<p>By default, this command exchanges 0.5 SUI for 0.5 WAL (Testnet tokens, both with no real value). You can specify a different amount using the <code>--amount</code> option, and a specific SUI/WAL exchange object with the <code>--exchange-id</code> option.</p>\n<p>For more options, run:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">walrus</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> get-wal</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --help</span></span></code></pre>\n<p>After running the command, you can check your balances with:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sui</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> client</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> balance</span></span></code></pre>\n<p>You should see both your SUI and WAL balances listed.</p>\n<p>Finally, install the Walrus and Sui TypeScript SDKs with this command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --save</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @mysten/walrus</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @mysten/sui</span></span></code></pre>\n<p>Now, you’re ready to start building with Walrus. The <code>get-wal</code> command is only available on Walrus testnet. On mainnet you’ll need to visit an exchange or use Slush Wallet to swap for some.</p>\n","isPage":false,"text":"\nFirst, you’ll need to get set up with Walrus. I recommend installing via the CLI commands, especially if you’re on a Mac, because I ran into an issue trying to install it on my Mac.\nYou will likely deploy your Walrus site on Mainnet, so execute this command to install the Walrus CLI tool and then the website builder for mainnet.\nExecute this command to install the latest Walrus mainnet version:\ncurl -sSf https://docs.wal.app/setup/walrus-install.sh | sh\nYou’ll need to add the walrus binary to your PATH. Also, you need to download the latest Walrus configurations with this command:\ncurl https://docs.wal.app/setup/client_config.yaml -o ~/.config/walrus/client_config.yaml\nYou just installed Walrus CLI in this case for the sole purpose of requesting test tokens.\nTo request Walrus Testnet WAL tokens, make sure you have a Sui Testnet wallet with some SUI tokens. You can get some from the **Sui Testnet faucet.\nNow, execute this command in your terminal to exchange some SUI for WAL:\nwalrus get-wal\nBy default, this command exchanges 0.5 SUI for 0.5 WAL (Testnet tokens, both with no real value). You can specify a different amount using the --amount option, and a specific SUI/WAL exchange object with the --exchange-id option.\nFor more options, run:\nwalrus get-wal --help\nAfter running the command, you can check your balances with:\nsui client balance\nYou should see both your SUI and WAL balances listed.\nFinally, install the Walrus and Sui TypeScript SDKs with this command:\nnpm install --save @mysten/walrus @mysten/sui\nNow, you’re ready to start building with Walrus. The get-wal command is only available on Walrus testnet. On mainnet you’ll need to visit an exchange or use Slush Wallet to swap for some.\n","title":"Getting Started with Walrus &amp; TypeScript","titles":["Walrus TypeScript SDK Guide"]},"98":{"href":"/walrus-ts#writing-data-to-walrus","html":"\n<p>First, add these imports to the top of your file from the Sui and Walrus SDKs.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getFullnodeUrl, SuiClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/client&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { WalrusClient, RetryableWalrusClientError } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/walrus&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Ed25519Keypair } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/sui/keypairs/ed25519&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>You’ll need to define Sui and Walrus clients respectively like this, and specify the networks:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> suiClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SuiClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    url: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getFullnodeUrl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mainnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> walrusClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> WalrusClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    network: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mainnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    suiClient,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n<p>You’ll also need the keypair you’ve funded with SUI and WAL.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keypair</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Ed25519Keypair.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromSecretKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;&lt;KEY_PAIR&gt;&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Now, you can upload a file to Walrus with the <code>writeBlob</code> command. It takes in the blob and other configurations including if you want it deletable, the number of epochs you want to perisist the data for, and the signer.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> uploadPackageJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">path</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> content</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> readFileSync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;utf-8&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> fileBytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TextEncoder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(content);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">blobId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">blobObject</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> walrusClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeBlob</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        blob: fileBytes,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        deletable: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        epochs: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        signer: keypair,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Uploaded with blobId: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">blobId</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Uploaded with blobObject: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">blobObject</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">id</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">id</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> blobId;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blobId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> uploadPackageJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;./package.json&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre>\n<p>In this case, I’m uploading the <code>package.json</code> file in my project, and I’m logging the  blob ID  and object ID to the console. If your upload is complete, you should get the ID like this.</p>\n<img src=\"/upload-blob.png\" alt=\"Upload Blob\"/>\n","isPage":false,"text":"\nFirst, add these imports to the top of your file from the Sui and Walrus SDKs.\nimport { getFullnodeUrl, SuiClient } from &#x27;@mysten/sui/client&#x27;;\nimport { WalrusClient, RetryableWalrusClientError } from &#x27;@mysten/walrus&#x27;;\nimport { Ed25519Keypair } from &#x27;@mysten/sui/keypairs/ed25519&#x27;;\nYou’ll need to define Sui and Walrus clients respectively like this, and specify the networks:\nconst suiClient = new SuiClient({\n    url: getFullnodeUrl(&#x27;mainnet&#x27;),\n});\n \nconst walrusClient = new WalrusClient({\n    network: &#x27;mainnet&#x27;,\n    suiClient,\n});\nYou’ll also need the keypair you’ve funded with SUI and WAL.\nconst keypair = Ed25519Keypair.fromSecretKey(\n    &#x27;&lt;KEY_PAIR&gt;&#x27;\n);\nNow, you can upload a file to Walrus with the writeBlob command. It takes in the blob and other configurations including if you want it deletable, the number of epochs you want to perisist the data for, and the signer.\nasync function uploadPackageJson(path: string): Promise&lt;string&gt; {\n    const content = readFileSync(path, &#x27;utf-8&#x27;);\n    const fileBytes = new TextEncoder().encode(content);\n \n    const { blobId, blobObject } = await walrusClient.writeBlob({\n        blob: fileBytes,\n        deletable: true,\n        epochs: 3,\n        signer: keypair,\n    });\n \n    console.log(`Uploaded with blobId: ${blobId}`);\n    console.log(`Uploaded with blobObject: ${blobObject.id.id}`);\n    return blobId;\n}\n \n//\n \n(async () =&gt; {\n    const blobId = await uploadPackageJson(&#x27;./package.json&#x27;);\n})();\nIn this case, I’m uploading the package.json file in my project, and I’m logging the  blob ID  and object ID to the console. If your upload is complete, you should get the ID like this.\n\n","title":"Writing Data to Walrus","titles":["Walrus TypeScript SDK Guide"]},"99":{"href":"/walrus-ts#reading-data-from-walrus","html":"\n<p>You’ll need the blob ID to read the file from Walrus network. Here’s how you can read it and save it to a path.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { writeFileSync } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;fs&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { RetryableWalrusClientError, WalrusClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@mysten/walrus&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> downloadPackageJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blobId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">outputPath</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> walrusClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readBlob</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ blobId });</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> json</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TextDecoder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        writeFileSync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(outputPath, json, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;utf-8&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Downloaded and saved to ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">outputPath</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">instanceof</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> RetryableWalrusClientError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Retryable error occurred. Resetting client and retrying...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            walrusClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> downloadPackageJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blobId, outputPath);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        throw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> downloadPackageJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;guaJi9QLJOeoH8zZg11dtmbtWN4YmXRlDyxXCgMT5fo&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;./downloaded-package.json&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})();</span></span></code></pre>\n<p>The <strong><code>readBlob</code></strong> function fetches the binary content from Walrus nodes. Then, <strong><code>TextDecoder().decode(...)</code></strong> converts the binary blob to a string, before <strong><code>writeFileSync</code></strong> saves it to a file.</p>\n<p>If a network or sync issue occurs (e.g., during epoch transition), the retry logic ensures you don’t crash on transient errors.</p>\n<img src=\"/download-blob.png\" alt=\"Download Blob\"/>\n","isPage":false,"text":"\nYou’ll need the blob ID to read the file from Walrus network. Here’s how you can read it and save it to a path.\nimport { writeFileSync } from &#x27;fs&#x27;;\nimport { RetryableWalrusClientError, WalrusClient } from &#x27;@mysten/walrus&#x27;;\n \nasync function downloadPackageJson(blobId: string, outputPath: string): Promise&lt;void&gt; {\n    try {\n        const data = await walrusClient.readBlob({ blobId });\n        const json = new TextDecoder().decode(data);\n        writeFileSync(outputPath, json, &#x27;utf-8&#x27;);\n        console.log(`Downloaded and saved to ${outputPath}`);\n    } catch (error) {\n        if (error instanceof RetryableWalrusClientError) {\n            console.warn(&#x27;Retryable error occurred. Resetting client and retrying...&#x27;);\n            walrusClient.reset();\n            return downloadPackageJson(blobId, outputPath);\n        }\n        throw error;\n    }\n}\n \n(async () =&gt; {\n    await downloadPackageJson(&quot;guaJi9QLJOeoH8zZg11dtmbtWN4YmXRlDyxXCgMT5fo&quot;, &#x27;./downloaded-package.json&#x27;);\n})();\nThe readBlob function fetches the binary content from Walrus nodes. Then, TextDecoder().decode(...) converts the binary blob to a string, before writeFileSync saves it to a file.\nIf a network or sync issue occurs (e.g., during epoch transition), the retry logic ensures you don’t crash on transient errors.\n\n","title":"Reading Data From Walrus","titles":["Walrus TypeScript SDK Guide"]},"100":{"href":"/walrus-ts#deleting-data-from-walrus","html":"\n<p>Provided that you set the <code>deletable</code> option to true when you uploaded your blob to Walrus, you should be able to delete it from the  network with the <code>executeDeleteBlobTransaction</code> function like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deleteBlobByObjectId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blobObjectId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">digest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> walrusClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">executeDeleteBlobTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            blobObjectId,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            signer: keypair,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`✅ Blob deleted successfully. Transaction digest: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">digest</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (err) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">instanceof</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> RetryableWalrusClientError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            walrusClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;⚠️ Retrying after client reset...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">digest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> walrusClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">executeDeleteBlobTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                blobObjectId,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                signer: keypair,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`✅ Blob deleted after retry. Digest: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">digest</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;❌ Failed to delete blob:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n<p>In this case, you’ll use the Sui object ID during the function call to delete the object like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"index.ts\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deleteBlobByObjectId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xac0988c339c5ec5c6b230f64e75b22a09457eff136e1e30fc3ce21412aa93ef6&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Here’s the output you should expect if you execute the function:</p>\n<img src=\"/delete-blob.png\" alt=\"Delete Blob\"/>\n","isPage":false,"text":"\nProvided that you set the deletable option to true when you uploaded your blob to Walrus, you should be able to delete it from the  network with the executeDeleteBlobTransaction function like this:\nasync function deleteBlobByObjectId(blobObjectId: string) {\n    try {\n        const { digest } = await walrusClient.executeDeleteBlobTransaction({\n            blobObjectId,\n            signer: keypair,\n        });\n \n        console.log(`✅ Blob deleted successfully. Transaction digest: ${digest}`);\n    } catch (err) {\n        if (err instanceof RetryableWalrusClientError) {\n            walrusClient.reset();\n            console.warn(&#x27;⚠️ Retrying after client reset...&#x27;);\n            const { digest } = await walrusClient.executeDeleteBlobTransaction({\n                blobObjectId,\n                signer: keypair,\n            });\n            console.log(`✅ Blob deleted after retry. Digest: ${digest}`);\n        } else {\n            console.error(&#x27;❌ Failed to delete blob:&#x27;, err);\n        }\n    }\nIn this case, you’ll use the Sui object ID during the function call to delete the object like this:\ndeleteBlobByObjectId(&#x27;0xac0988c339c5ec5c6b230f64e75b22a09457eff136e1e30fc3ce21412aa93ef6&#x27;);\nHere’s the output you should expect if you execute the function:\n\n","title":"Deleting Data from Walrus","titles":["Walrus TypeScript SDK Guide"]},"101":{"href":"/walrus-ts#conclusion","html":"\n<p>You’ve learned how to install Walrus and do the basic functions of storage over the TypeScript client. Regardless of what you’re building now you can keep the entire stack decentralized.</p>","isPage":false,"text":"\nYou’ve learned how to install Walrus and do the basic functions of storage over the TypeScript client. Regardless of what you’re building now you can keep the entire stack decentralized.","title":"Conclusion","titles":["Walrus TypeScript SDK Guide"]}},"dirtCount":0,"index":[["❌",{"2":{"100":1}}],["⚠️",{"2":{"100":1}}],["64",{"2":{"92":4}}],["~",{"2":{"92":1,"93":3,"97":1}}],["|",{"2":{"92":1,"97":1}}],["`✅",{"2":{"100":2}}],["`downloaded",{"2":{"99":1}}],["`uploaded",{"2":{"98":2}}],["`balance",{"2":{"85":1}}],["`",{"2":{"85":3,"98":2,"99":1,"100":2}}],["`coin",{"2":{"85":2}}],["$path",{"2":{"92":1}}],["$system",{"2":{"92":1}}],["$fud",{"2":{"85":1,"86":2}}],["$",{"2":{"85":3,"98":2,"99":1,"100":2}}],["✅",{"2":{"78":2}}],["🚀",{"2":{"78":1}}],["✍️",{"2":{"78":2}}],["42",{"2":{"69":1}}],["4",{"2":{"58":1}}],["40",{"2":{"15":1}}],["50",{"2":{"78":1}}],["50000",{"2":{"75":1}}],["500000",{"2":{"75":1}}],["5000000",{"2":{"9":2}}],["5",{"2":{"56":2,"97":2}}],["x86",{"2":{"92":4}}],["x",{"2":{"55":1,"56":13,"61":1}}],["x27",{"2":{"1":5,"8":6,"11":1,"26":1,"27":2,"31":1,"32":1,"51":1,"54":1,"55":1,"67":1,"69":1,"74":1,"75":18,"77":2,"78":34,"79":10,"83":8,"84":4,"85":10,"86":10,"89":4,"91":1,"93":1,"98":16,"99":10,"100":6}}],["yaml",{"2":{"92":2,"93":3,"97":2}}],["yet",{"2":{"78":2}}],["yell",{"2":{"69":1}}],["y",{"2":{"55":1,"82":1}}],["youjuggling",{"2":{"10":1}}],["your",{"0":{"93":1},"2":{"1":5,"3":1,"4":6,"6":1,"7":1,"8":3,"11":2,"12":1,"13":1,"15":4,"16":2,"19":1,"23":1,"24":1,"25":1,"27":4,"28":2,"31":3,"32":3,"33":3,"34":2,"36":2,"37":1,"40":1,"42":2,"43":3,"44":1,"45":1,"46":6,"50":1,"51":4,"52":2,"53":1,"54":3,"65":1,"66":2,"70":2,"72":3,"73":1,"74":1,"75":2,"76":3,"77":3,"78":4,"79":4,"81":1,"82":3,"83":2,"85":1,"87":1,"89":5,"92":5,"93":4,"94":3,"95":1,"97":5,"98":2,"100":1}}],["you",{"2":{"0":1,"1":11,"2":2,"3":4,"4":11,"5":8,"6":6,"7":10,"8":6,"9":2,"10":12,"11":2,"12":7,"13":4,"14":2,"15":12,"16":4,"18":1,"19":1,"20":2,"22":2,"23":5,"24":5,"25":4,"26":7,"27":8,"28":4,"29":2,"30":4,"31":4,"32":9,"33":6,"34":3,"35":3,"36":7,"37":3,"38":3,"39":1,"40":2,"41":6,"42":3,"43":6,"44":3,"45":6,"46":8,"47":2,"49":1,"50":1,"51":9,"52":3,"53":7,"54":7,"55":4,"56":4,"57":5,"58":3,"59":1,"60":4,"61":5,"62":5,"64":1,"65":7,"66":4,"67":5,"68":2,"69":4,"70":4,"72":1,"73":5,"74":2,"75":3,"76":1,"77":4,"78":3,"79":5,"80":4,"81":3,"82":8,"83":5,"84":2,"85":2,"86":3,"87":3,"88":4,"89":10,"90":3,"91":2,"92":10,"93":11,"94":3,"95":3,"96":3,"97":13,"98":7,"99":3,"100":6,"101":3}}],["999999999999999999",{"2":{"54":1}}],["9000",{"2":{"5":1}}],["zsh",{"2":{"47":1}}],["zero",{"2":{"23":1,"32":2,"33":2,"54":1}}],["32",{"2":{"48":1}}],["3",{"2":{"43":2,"58":1,"98":1}}],["300",{"2":{"27":3}}],["8",{"2":{"27":2,"62":1,"98":1,"99":1}}],["js",{"2":{"62":1,"74":1,"82":4}}],["json",{"2":{"8":1,"82":2,"98":2,"99":3}}],["joins",{"2":{"32":1}}],["join",{"2":{"32":2}}],["journey",{"2":{"16":1}}],["jpg",{"2":{"27":1}}],["javascript",{"2":{"15":1,"83":1}}],["just",{"2":{"2":1,"10":1,"11":1,"25":3,"67":1,"69":1,"84":1,"97":1}}],["query",{"2":{"36":1}}],["querying",{"2":{"3":1}}],["quick",{"2":{"13":1}}],["quot",{"2":{"5":2,"7":2,"8":6,"12":4,"26":8,"27":8,"32":16,"47":2,"53":6,"62":4,"65":4,"66":2,"67":2,"68":2,"69":2,"82":42,"83":2,"84":2,"85":2,"86":8,"99":2}}],["risk",{"2":{"88":1}}],["risky",{"2":{"38":1}}],["rights",{"2":{"38":1}}],["right",{"2":{"16":1,"26":1,"32":1,"38":1,"69":1,"96":1}}],["rootdir",{"2":{"82":1}}],["rootlets",{"2":{"33":1}}],["route",{"2":{"4":2,"15":1}}],["ran",{"2":{"92":1,"97":1}}],["random",{"2":{"84":1}}],["rarity",{"2":{"32":4}}],["raw",{"2":{"8":1,"93":1}}],["rpcurl",{"2":{"83":4,"84":2,"85":2,"86":2}}],["rpc",{"2":{"5":3,"85":1,"86":1}}],["rule",{"2":{"33":16}}],["rulestransferrequest",{"2":{"33":1}}],["rules",{"2":{"33":5,"55":1,"65":1}}],["runtime",{"2":{"55":1}}],["runs",{"2":{"32":1,"36":1,"37":1,"40":1,"56":1,"82":1}}],["run",{"2":{"7":1,"40":1,"43":1,"46":1,"49":1,"51":1,"56":1,"82":1,"83":1,"93":1,"97":1}}],["running",{"2":{"4":2,"5":1,"15":2,"85":1,"97":1}}],["rust",{"2":{"4":2,"5":1,"14":1,"15":1,"68":1}}],["rendevous",{"2":{"89":1}}],["retry",{"2":{"99":1,"100":1}}],["retrying",{"2":{"99":1,"100":1}}],["retryable",{"2":{"99":1}}],["retryablewalrusclienterror",{"2":{"98":1,"99":2,"100":1}}],["retrieving",{"2":{"96":1}}],["retrieve",{"2":{"83":2,"84":1,"85":1}}],["returns",{"2":{"43":1,"67":1,"85":1}}],["return",{"2":{"37":1,"49":1,"55":1,"56":1,"67":1,"86":1,"98":1,"99":1}}],["reload",{"2":{"78":1}}],["related",{"2":{"41":1}}],["required",{"2":{"78":1}}],["requesting",{"2":{"97":1}}],["request",{"2":{"8":3,"33":8,"97":1}}],["reuse",{"2":{"68":1,"77":1}}],["reusable",{"2":{"67":1}}],["rewrites",{"2":{"67":1}}],["removes",{"2":{"58":1}}],["remain",{"2":{"15":1,"64":1}}],["rev",{"2":{"53":1}}],["revenue",{"2":{"32":1}}],["repetitions",{"2":{"56":1}}],["repeating",{"2":{"53":1}}],["represent",{"2":{"64":1}}],["represents",{"2":{"32":1,"54":1}}],["represented",{"2":{"23":1,"48":1}}],["replaced",{"2":{"61":1}}],["replace",{"2":{"1":1,"12":1,"89":1}}],["reset",{"2":{"99":1,"100":2}}],["resetting",{"2":{"99":1}}],["reserved",{"2":{"48":1}}],["resolvejsonmodule",{"2":{"82":1}}],["resource",{"2":{"25":1,"38":1,"71":1}}],["resources",{"0":{"16":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1},"2":{"16":2,"22":1,"41":1,"71":2,"72":1}}],["result",{"2":{"75":3,"78":4,"86":3}}],["results",{"2":{"20":1}}],["restrict",{"2":{"65":1}}],["respectively",{"2":{"56":1,"84":1,"98":1}}],["refs",{"2":{"93":1}}],["ref",{"2":{"68":2}}],["referencing",{"2":{"47":1,"63":1}}],["references",{"2":{"71":1}}],["reference",{"2":{"16":1,"41":1,"48":1,"53":1,"71":1,"77":1}}],["refresher",{"2":{"13":1}}],["reaching",{"2":{"56":1}}],["really",{"2":{"45":1,"88":1}}],["real",{"2":{"17":1,"24":1,"33":1,"97":1}}],["reasons",{"2":{"7":2}}],["readblob",{"2":{"99":2}}],["readfilesync",{"2":{"98":1}}],["reading",{"0":{"85":1,"99":1}}],["ready",{"2":{"17":1,"35":1,"72":1,"97":1}}],["read",{"2":{"3":1,"68":1,"81":1,"99":2}}],["regular",{"2":{"29":1}}],["registering",{"0":{"94":1}}],["registers",{"2":{"33":1}}],["register",{"2":{"25":1}}],["registry",{"0":{"21":1},"2":{"11":1,"21":1}}],["regenesis",{"2":{"5":1}}],["regardless",{"2":{"4":1,"19":1,"93":1,"101":1}}],["re",{"2":{"1":1,"4":4,"5":1,"7":2,"8":1,"10":1,"11":1,"12":2,"13":1,"15":4,"20":1,"25":2,"27":1,"28":1,"31":2,"32":1,"33":1,"38":1,"43":1,"45":1,"46":1,"50":1,"51":1,"53":1,"55":1,"57":1,"58":1,"61":1,"62":1,"66":1,"68":2,"69":1,"70":1,"72":1,"73":1,"74":1,"80":1,"82":1,"88":1,"89":2,"90":1,"92":2,"93":2,"97":2,"101":1}}],["recursive",{"2":{"57":1}}],["recent",{"2":{"50":1}}],["receipt",{"2":{"33":2}}],["receives",{"2":{"38":1}}],["receive",{"2":{"1":1}}],["recommend",{"2":{"15":1,"92":1,"97":1}}],["recieve",{"2":{"1":1}}],["recipient",{"2":{"1":10,"8":1,"10":1,"12":1,"27":2,"75":1,"77":1,"78":1,"89":7}}],["recipients",{"2":{"0":1,"1":9,"2":1,"10":4,"33":1,"75":1}}],["25",{"2":{"84":1}}],["255",{"2":{"54":1}}],["2024",{"2":{"47":1}}],["2025",{"2":{"15":1}}],["20",{"2":{"25":1,"55":1}}],["2",{"2":{"1":2,"43":3,"56":1,"58":1,"89":2}}],["void",{"2":{"99":1}}],["v",{"2":{"66":2}}],["vscode",{"2":{"15":2}}],["valid",{"2":{"68":1}}],["value",{"2":{"25":1,"28":1,"33":2,"57":1,"58":1,"61":1,"63":1,"64":1,"65":4,"68":2,"69":3,"71":6,"72":3,"97":1}}],["values",{"2":{"1":1,"32":2,"49":1,"54":2,"55":1,"64":1}}],["variant",{"2":{"70":1,"72":1}}],["variables",{"2":{"54":2,"65":1,"68":1,"69":1,"71":1}}],["variable",{"2":{"32":1,"36":1,"54":2,"55":1,"62":1,"65":1,"92":1}}],["various",{"2":{"10":1,"54":1}}],["v1",{"2":{"8":1}}],["vitepress",{"2":{"93":1}}],["visting",{"2":{"94":1}}],["visibility",{"2":{"57":1}}],["visit",{"2":{"8":1,"28":2,"92":1,"97":1}}],["visual",{"2":{"46":1}}],["video",{"2":{"28":1}}],["view",{"2":{"6":1,"25":1}}],["via",{"2":{"1":1,"4":2,"15":2,"36":1,"51":1,"81":1,"92":1,"97":1}}],["vecmaps",{"2":{"61":2}}],["vecmap",{"0":{"61":1},"2":{"61":4}}],["vec",{"2":{"60":2,"61":2}}],["vecset",{"0":{"60":1},"2":{"60":6}}],["vector",{"2":{"1":6,"32":5,"36":1,"58":6,"62":1,"89":13}}],["vectors",{"0":{"58":1},"2":{"1":2,"58":1,"59":1,"89":1}}],["very",{"2":{"11":1,"16":1,"26":1,"60":1}}],["verify",{"2":{"4":1,"15":1,"51":1,"84":1}}],["version",{"2":{"4":3,"15":2,"32":1,"46":1,"50":1,"72":1,"77":1,"92":1,"97":1}}],["ve",{"2":{"1":1,"2":1,"5":1,"7":1,"10":1,"15":1,"22":1,"27":1,"29":1,"38":1,"44":2,"45":1,"51":2,"54":1,"65":1,"66":1,"70":1,"75":1,"80":1,"87":1,"95":1,"98":1,"101":1}}],["k",{"2":{"66":2}}],["kiosk",{"0":{"33":1},"2":{"33":2}}],["kiosks",{"0":{"30":1},"1":{"31":1,"32":1,"33":1,"34":1},"2":{"29":1,"33":2}}],["kindbytes",{"2":{"78":3}}],["kinda",{"2":{"12":1}}],["kind",{"2":{"2":1,"50":1,"78":2}}],["keywords",{"2":{"56":1}}],["keyword",{"2":{"53":2,"54":1,"56":1,"57":1,"63":1,"72":1}}],["keypairs",{"2":{"75":1,"78":2,"84":2,"86":1,"98":1}}],["keypair",{"2":{"7":3,"75":5,"78":6,"84":5,"86":4,"98":3,"100":2}}],["keytool",{"2":{"7":5}}],["keystore",{"2":{"7":1}}],["keys",{"2":{"6":1,"7":3,"32":2,"61":2,"84":3}}],["key",{"0":{"6":1,"7":1},"2":{"7":1,"25":1,"32":2,"33":1,"38":1,"41":1,"57":2,"61":1,"65":5,"66":1,"71":1,"72":1,"78":2,"84":1,"86":1,"98":1}}],["keep",{"2":{"5":1,"10":1,"25":1,"94":1,"95":1,"101":1}}],["keeping",{"2":{"1":1}}],["know",{"2":{"1":1,"34":1,"43":1,"45":2,"56":1,"90":1}}],["knowledge",{"2":{"0":1,"82":1,"87":1}}],["15",{"0":{"45":1},"1":{"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1},"2":{"35":1}}],["100",{"2":{"67":1,"72":1}}],["1000000",{"2":{"54":1,"63":1}}],["10000000",{"2":{"1":1}}],["100000000",{"2":{"1":1,"27":2,"51":1,"86":1,"89":2}}],["1000",{"2":{"25":2,"78":1}}],["10",{"2":{"55":1,"56":2,"67":1}}],["10^8",{"2":{"27":3}}],["127",{"2":{"5":1}}],["1",{"2":{"1":3,"5":1,"15":2,"33":4,"43":3,"55":1,"56":4,"58":1,"71":1,"78":2,"85":2,"89":5,"93":3}}],["+x",{"2":{"92":1}}],["+",{"2":{"1":1,"43":1,"56":3,"67":2,"89":1}}],["high",{"2":{"71":1}}],["hits",{"2":{"43":1}}],["http",{"2":{"5":1}}],["https",{"2":{"4":1,"8":1,"26":1,"27":1,"53":1,"79":1,"92":3,"93":1,"97":2}}],["h",{"2":{"4":1}}],["hero",{"2":{"67":9}}],["here",{"2":{"1":1,"4":1,"5":1,"6":1,"9":1,"15":2,"19":1,"25":1,"27":1,"28":1,"32":2,"33":5,"36":3,"37":2,"38":1,"43":1,"54":1,"55":1,"57":1,"66":1,"69":1,"73":1,"78":2,"79":1,"84":2,"85":1,"89":1,"93":1,"99":1,"100":1}}],["hello",{"2":{"62":4,"67":1,"69":1}}],["helpful",{"2":{"16":1,"43":1}}],["help",{"2":{"4":4,"70":1,"97":1}}],["hexadecimal",{"2":{"48":1}}],["head",{"2":{"94":1}}],["heads",{"2":{"93":1}}],["header",{"2":{"8":1}}],["healing",{"2":{"67":1}}],["heal",{"2":{"67":5}}],["health",{"2":{"55":2,"67":6}}],["heard",{"2":{"45":1}}],["hop",{"2":{"85":1}}],["hopefully",{"2":{"13":1}}],["holy",{"2":{"81":1}}],["hold",{"2":{"32":1}}],["holders",{"2":{"32":2}}],["holder",{"2":{"26":1,"33":1}}],["holding",{"2":{"25":1}}],["holds",{"2":{"25":1,"33":1}}],["hood",{"2":{"67":1}}],["homebrew",{"2":{"4":1,"15":2}}],["however",{"2":{"76":1}}],["how",{"2":{"4":1,"6":1,"10":1,"15":1,"22":1,"23":2,"25":1,"29":2,"32":1,"33":1,"34":2,"36":2,"42":1,"49":1,"52":1,"54":1,"55":1,"57":2,"58":1,"66":1,"69":1,"71":1,"78":1,"79":1,"81":2,"84":1,"87":1,"90":1,"91":1,"95":2,"99":1,"101":1}}],["house",{"2":{"1":1}}],["hundreds",{"2":{"2":1}}],["harness",{"2":{"91":1}}],["hardly",{"2":{"15":1}}],["had",{"2":{"86":1}}],["happen",{"2":{"39":1,"42":1}}],["happened",{"2":{"39":1,"43":1}}],["happening",{"2":{"33":2,"36":1}}],["habits",{"2":{"32":1}}],["hand",{"2":{"56":1}}],["handled",{"2":{"71":1}}],["handle",{"2":{"43":1,"85":2}}],["handling",{"0":{"43":1},"2":{"43":1,"72":1,"76":1}}],["hands",{"2":{"31":1,"46":1,"70":1}}],["handoff",{"2":{"10":1}}],["handy",{"2":{"4":1,"11":1,"43":1,"61":1,"65":1,"84":1}}],["hasnextpage",{"2":{"85":1}}],["hash",{"2":{"36":2}}],["has",{"2":{"1":2,"10":1,"11":1,"18":1,"25":1,"27":1,"32":4,"33":3,"36":1,"38":1,"41":1,"42":1,"46":1,"48":1,"50":1,"53":1,"55":1,"57":1,"60":1,"61":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":2,"71":2,"72":2}}],["haven",{"2":{"27":1,"88":1}}],["have",{"2":{"1":1,"4":2,"10":1,"13":1,"15":1,"23":1,"24":1,"25":1,"27":1,"28":2,"30":1,"31":1,"41":1,"43":1,"45":1,"47":1,"48":1,"50":2,"53":2,"56":1,"57":1,"58":1,"60":1,"61":1,"67":1,"68":1,"75":1,"79":1,"82":1,"88":1,"89":5,"91":1,"93":2,"97":1}}],["001",{"2":{"78":1}}],["000",{"2":{"33":3,"78":6}}],["0xac0988c339c5ec5c6b230f64e75b22a09457eff136e1e30fc3ce21412aa93ef6",{"2":{"100":1}}],["0xb0042cf2c5a16d0a240fc1391d570cd5fe06548f860583f1878c327db70f2a22",{"2":{"86":1}}],["0xbd46d7582ced464ef369114252704b10317436ef70f196a33fcf2c724991fcba",{"2":{"84":1,"85":2}}],["0x76cb819b01abed502bee8a702b4c2d547532c12f25001c9dea795a5e631c26f1",{"2":{"86":1}}],["0x2",{"2":{"79":1,"89":1}}],["0xrecipientaddresshere",{"2":{"78":1}}],["0xrecipientaddress",{"2":{"77":1}}],["0x1b2e893cb5164f2f48bd65f77ea76c14d025d8577ab89f2b40a7af0376a8584c",{"2":{"75":1}}],["0x123",{"2":{"54":1,"66":1}}],["0x83ecd81fdd132d4fb4f9ae2608656b000df13c4c3c5b10490d48ee981bc8f433",{"2":{"75":1,"78":1}}],["0x",{"2":{"48":1}}],["0x0",{"2":{"47":1,"54":1,"71":1}}],["0kkocvalgamb9xhzcfi6talxggq",{"2":{"27":1}}],["0",{"2":{"1":2,"5":2,"33":1,"43":5,"55":5,"56":2,"78":1,"84":1,"86":2,"89":2,"97":2}}],["===",{"2":{"86":1}}],["==",{"2":{"1":1,"33":1,"38":1,"55":1,"56":3,"89":2}}],["=",{"2":{"1":8,"26":1,"27":6,"32":9,"33":2,"36":1,"41":3,"43":6,"47":1,"53":3,"54":10,"55":2,"56":5,"58":2,"60":1,"61":1,"62":2,"63":1,"65":1,"66":2,"67":2,"68":4,"69":2,"72":1,"75":8,"78":16,"79":1,"83":5,"84":5,"85":5,"86":8,"89":10,"98":8,"99":3,"100":2}}],["ubuntu",{"2":{"92":2}}],["utf",{"2":{"62":1,"98":1,"99":1}}],["utf8",{"2":{"32":12,"62":2,"65":1,"66":1,"67":1,"68":1,"69":1}}],["u256",{"2":{"54":1}}],["u128",{"2":{"54":2}}],["u16",{"2":{"54":1,"57":1}}],["u32",{"2":{"54":1}}],["uid",{"2":{"32":1,"33":1,"38":1,"41":1,"65":1,"66":1,"72":2}}],["ultimately",{"2":{"30":1}}],["u8",{"2":{"27":1,"32":5,"36":1,"54":2,"60":1,"61":1,"67":1}}],["undoutedly",{"2":{"96":1}}],["underrated",{"2":{"66":1}}],["under",{"2":{"47":1,"67":1}}],["understand",{"2":{"14":1,"24":1,"26":1,"31":1,"32":1,"33":1,"35":1,"37":1}}],["unpack",{"2":{"65":1}}],["unsigned",{"2":{"54":2}}],["unsafe",{"2":{"27":1,"32":2}}],["unless",{"2":{"54":1,"68":1}}],["unlocks",{"2":{"41":1}}],["unlike",{"2":{"25":2,"71":1}}],["un",{"2":{"38":1}}],["until",{"2":{"33":1,"43":1,"56":1}}],["units",{"2":{"25":1,"27":1,"52":1}}],["unique",{"2":{"25":1,"48":1,"50":1,"52":1,"60":2,"61":1,"72":1}}],["unix",{"2":{"4":1,"15":1}}],["unfortunately",{"2":{"15":1}}],["uploaded",{"2":{"100":1}}],["uploadpackagejson",{"2":{"98":2}}],["upload",{"2":{"98":2}}],["uploading",{"2":{"96":1,"98":1}}],["upgraded",{"2":{"72":1}}],["upgradable",{"2":{"38":1}}],["updating",{"2":{"49":1}}],["update",{"2":{"32":1}}],["up",{"0":{"30":1},"1":{"31":1,"32":1,"33":1,"34":1},"2":{"10":1,"14":1,"22":1,"24":1,"27":1,"31":2,"38":1,"46":2,"89":1,"90":1,"92":2,"97":1}}],["urls",{"2":{"31":1}}],["url",{"2":{"5":1,"26":2,"27":6,"31":2,"32":13,"33":7,"75":1,"78":2,"83":3,"84":1,"85":1,"86":2,"98":1}}],["usr",{"2":{"92":1}}],["usage",{"2":{"67":1}}],["usable",{"2":{"25":1,"68":1}}],["usually",{"2":{"48":1}}],["usual",{"2":{"33":1,"55":1}}],["usdc",{"2":{"28":1}}],["us",{"2":{"16":1,"75":1}}],["using",{"2":{"4":2,"10":1,"15":2,"16":1,"32":1,"38":1,"48":1,"52":1,"58":1,"65":1,"66":1,"67":1,"72":1,"78":4,"85":1,"86":1,"87":1,"93":2,"97":1}}],["uses",{"2":{"48":1,"71":1,"76":1}}],["userkeypair",{"2":{"78":4}}],["userpaysforgas",{"2":{"78":2}}],["userregistry",{"2":{"66":1}}],["username",{"2":{"61":1}}],["usercreated",{"2":{"42":2}}],["user",{"2":{"25":1,"42":2,"50":1,"54":1,"64":1,"78":5,"89":1}}],["usersignature",{"2":{"78":2}}],["users",{"2":{"7":2,"10":1,"72":1,"90":1}}],["useful",{"0":{"16":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1},"2":{"16":2,"22":1,"51":1,"56":1,"60":1,"88":1}}],["used",{"2":{"15":1,"46":1,"49":2,"76":1,"77":1,"85":1}}],["use",{"2":{"0":1,"1":3,"4":2,"5":1,"7":1,"8":1,"10":2,"11":1,"12":1,"15":2,"17":2,"20":1,"22":2,"26":1,"27":3,"31":5,"33":8,"36":2,"40":1,"41":4,"42":2,"44":1,"50":1,"52":1,"53":4,"54":1,"55":2,"56":2,"60":1,"61":2,"62":3,"65":4,"66":1,"71":1,"72":4,"77":1,"78":1,"79":1,"80":1,"81":1,"83":3,"85":2,"89":2,"92":1,"94":1,"97":1,"100":1}}],["u64",{"2":{"1":3,"27":1,"32":2,"33":1,"36":3,"41":1,"43":3,"54":2,"57":1,"58":1,"63":1,"67":4,"69":1,"71":3,"72":2,"89":2}}],["npx",{"2":{"82":1}}],["npm",{"2":{"74":1,"82":4,"93":1,"97":1}}],["npmjs",{"2":{"21":1}}],["nicely",{"2":{"68":1}}],["nftminted",{"2":{"32":3}}],["nft",{"0":{"32":1},"2":{"30":3,"31":1,"32":26,"33":5,"79":4}}],["nfts",{"0":{"30":1,"33":1},"1":{"31":1,"32":1,"33":1,"34":1},"2":{"29":1,"30":2,"32":1,"34":3,"50":1,"71":1}}],["naming",{"2":{"94":1}}],["name2",{"2":{"68":3}}],["namespace",{"2":{"53":1}}],["names",{"0":{"94":1},"2":{"52":1,"94":1}}],["named",{"2":{"37":1,"47":1}}],["name",{"2":{"5":1,"12":1,"26":2,"31":1,"32":9,"33":4,"43":1,"47":1,"48":1,"51":2,"53":1,"54":2,"57":2,"64":4,"65":1,"68":6,"79":1,"94":3,"95":1}}],["narrow",{"2":{"20":1,"43":1}}],["native",{"2":{"12":1}}],["natural",{"2":{"2":1}}],["nah",{"2":{"8":1}}],["nodes",{"2":{"99":1}}],["node",{"2":{"82":5,"83":2}}],["node=info",{"2":{"5":1}}],["nor",{"2":{"7":1}}],["no",{"2":{"2":1,"26":1,"38":1,"40":2,"41":1,"43":4,"51":1,"60":1,"63":1,"65":1,"68":1,"78":2,"86":1,"97":1}}],["nothing",{"2":{"37":1}}],["noticed",{"2":{"53":1}}],["notice",{"2":{"32":1}}],["not",{"2":{"2":1,"25":2,"26":1,"27":2,"55":1,"57":1,"61":2,"62":1,"64":1,"68":1,"74":1,"76":1,"84":1,"88":1,"89":2,"90":1}}],["now",{"2":{"1":4,"5":2,"26":1,"27":3,"28":1,"31":2,"32":1,"33":3,"34":1,"36":1,"37":1,"42":1,"43":1,"46":1,"57":1,"62":2,"66":1,"68":1,"69":1,"70":1,"74":1,"75":1,"80":1,"82":1,"83":2,"88":1,"89":4,"91":1,"92":1,"93":3,"96":1,"97":2,"98":1,"101":1}}],["nums",{"2":{"58":3}}],["number",{"2":{"36":1,"69":1,"89":1,"98":1}}],["numbers",{"2":{"25":1,"56":1}}],["num",{"2":{"1":5,"89":9}}],["never",{"2":{"36":1,"39":1,"63":1}}],["necessary",{"2":{"19":1,"32":1}}],["nextcursor",{"2":{"85":1}}],["next",{"2":{"15":1,"29":1,"44":1,"70":1,"78":1,"84":1,"85":2,"90":1,"95":1}}],["neither",{"2":{"7":1}}],["networks",{"2":{"5":1,"98":1}}],["network",{"2":{"1":1,"5":4,"9":1,"51":1,"53":1,"81":1,"83":1,"84":1,"86":1,"89":1,"98":1,"99":2,"100":1}}],["needs",{"2":{"16":1}}],["needed",{"2":{"12":1,"32":1,"85":1,"86":1}}],["need",{"2":{"1":3,"2":1,"3":2,"4":2,"8":2,"10":4,"12":1,"13":1,"14":1,"15":3,"16":1,"23":1,"24":1,"27":2,"32":5,"33":3,"34":1,"36":1,"37":2,"38":1,"39":1,"40":1,"41":1,"43":1,"45":1,"51":1,"53":3,"54":2,"57":1,"62":2,"63":1,"65":2,"66":1,"74":1,"75":1,"82":2,"86":1,"90":1,"92":4,"93":3,"96":1,"97":4,"98":2,"99":1}}],["newly",{"2":{"87":1}}],["new",{"2":{"0":1,"1":1,"5":5,"13":1,"26":1,"27":2,"31":2,"32":7,"33":6,"36":1,"38":2,"40":1,"46":1,"50":1,"65":1,"66":2,"71":1,"72":4,"75":4,"78":4,"79":1,"82":3,"83":2,"84":4,"85":1,"86":2,"93":1,"98":3,"99":1}}],["mv",{"2":{"92":1}}],["mkdir",{"2":{"82":2,"93":1}}],["m",{"2":{"74":1,"84":1,"93":1,"98":2}}],["ms",{"2":{"36":2,"41":3}}],["mtk",{"2":{"26":1}}],["mytoken",{"2":{"25":4,"26":3}}],["my",{"2":{"14":1,"15":1,"16":1,"24":1,"65":1,"92":1,"97":1,"98":1}}],["mysten",{"0":{"18":1},"2":{"16":1,"18":1,"71":1,"74":1,"75":3,"78":6,"79":1,"82":1,"83":3,"84":2,"85":1,"86":3,"92":1,"97":2,"98":3,"99":1}}],["mystenlabs",{"2":{"4":1,"93":1}}],["myself",{"2":{"14":1}}],["memory",{"0":{"68":1},"2":{"57":1,"71":1}}],["means",{"2":{"57":1,"93":1}}],["meanstransferpolicy",{"2":{"33":1}}],["metric",{"2":{"96":1}}],["meta",{"2":{"71":1}}],["metadata",{"0":{"26":1},"2":{"11":1,"26":7,"27":3}}],["methods",{"0":{"67":1},"2":{"62":2,"65":1,"67":1,"84":1}}],["method",{"2":{"58":2,"62":2,"65":1,"66":2,"67":1}}],["met",{"2":{"33":1}}],["mechanics",{"2":{"26":1}}],["merge",{"2":{"10":5,"25":1}}],["mnemonic",{"2":{"7":3}}],["middle",{"2":{"64":2}}],["milliseconds",{"2":{"41":1}}],["millisecond",{"2":{"41":1}}],["minutes",{"0":{"45":1},"1":{"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1},"2":{"35":1}}],["minted",{"2":{"26":1,"32":2}}],["mint",{"2":{"26":2,"27":6,"32":3,"33":3,"36":1,"38":1,"79":1}}],["minting",{"2":{"26":1,"27":2,"39":1}}],["mini",{"2":{"12":1}}],["mist",{"2":{"9":1,"33":1,"51":1,"85":2}}],["mismatched",{"2":{"89":1}}],["mismatch",{"2":{"1":2,"89":3}}],["might",{"2":{"7":1,"11":1,"84":1}}],["multiplier",{"2":{"27":3}}],["multiple",{"2":{"0":2,"1":1,"2":1,"10":2,"12":2,"17":1,"50":1,"53":1,"67":1,"68":1,"75":4,"77":1,"88":1,"89":1,"90":1}}],["must",{"2":{"16":1,"33":2,"37":1,"39":1,"51":1,"52":1,"55":1,"61":1,"63":1,"83":1}}],["much",{"2":{"2":1,"10":1,"15":1,"25":1,"49":1,"87":1}}],["mutated",{"2":{"72":1}}],["mutable",{"2":{"27":1,"68":2}}],["mut",{"2":{"1":3,"27":5,"32":10,"33":5,"36":3,"37":3,"38":1,"40":1,"54":2,"56":2,"58":2,"61":1,"65":1,"66":2,"67":4,"68":2,"72":1,"89":6}}],["making",{"2":{"67":1}}],["makes",{"2":{"44":1,"75":1}}],["make",{"2":{"1":1,"2":1,"3":1,"13":1,"16":1,"23":1,"27":2,"30":1,"32":1,"57":1,"79":1,"89":2,"97":1}}],["max",{"2":{"63":1}}],["may",{"2":{"43":3,"53":1,"64":1}}],["maybe",{"2":{"10":1}}],["made",{"2":{"33":1,"60":1}}],["mac",{"2":{"92":2,"97":2}}],["machin",{"2":{"33":1}}],["macos",{"2":{"4":1,"15":1,"92":2}}],["market",{"2":{"96":1}}],["marketplaces",{"2":{"30":1}}],["marks",{"2":{"33":2}}],["marinate",{"2":{"25":1}}],["maps",{"2":{"66":1}}],["map",{"2":{"25":1,"61":5,"75":1}}],["manual",{"2":{"71":1}}],["manually",{"2":{"36":1,"54":1,"56":1,"93":1}}],["manipulate",{"2":{"58":1}}],["manifest",{"0":{"47":1},"2":{"47":1}}],["mana",{"2":{"55":1}}],["managing",{"2":{"39":1}}],["manage",{"2":{"27":1,"33":1,"46":1,"52":1,"71":1}}],["management",{"0":{"5":1,"6":1,"7":1,"10":1,"11":1,"41":1,"68":1,"76":1},"1":{"77":1,"78":1},"2":{"71":1}}],["managers",{"2":{"15":2}}],["manager",{"2":{"4":2,"15":1}}],["mandatory",{"2":{"33":1}}],["many",{"2":{"33":1,"36":1,"51":1}}],["mantle",{"2":{"4":1}}],["mainnet",{"2":{"5":1,"8":3,"24":1,"51":1,"53":1,"83":3,"84":1,"85":1,"86":2,"92":4,"93":1,"97":4,"98":2}}],["main",{"2":{"1":1,"75":2,"78":2}}],["match",{"2":{"1":1,"89":1}}],["mass",{"2":{"1":2}}],["moment",{"2":{"81":1}}],["moving",{"2":{"68":1}}],["movecall",{"2":{"79":3}}],["moved",{"2":{"68":2,"71":1}}],["movepump",{"2":{"23":1}}],["moves",{"2":{"10":1}}],["move",{"0":{"14":1,"15":1,"19":1,"21":1,"35":1,"45":1,"47":1,"52":1,"71":1,"72":2},"1":{"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":2,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"72":1},"2":{"1":2,"12":2,"14":2,"15":3,"16":2,"19":3,"20":3,"21":3,"24":1,"27":2,"31":2,"35":4,"43":1,"45":2,"46":2,"47":2,"48":1,"51":2,"53":2,"54":1,"55":1,"57":2,"62":1,"66":1,"67":1,"68":2,"70":1,"71":8,"72":11,"77":1,"79":2,"81":1,"87":1,"89":3,"92":1}}],["more",{"2":{"12":1,"13":1,"16":2,"23":1,"25":2,"26":2,"33":1,"56":1,"57":1,"59":1,"74":1,"80":2,"85":2,"87":1,"93":1,"97":1}}],["most",{"2":{"7":1,"9":1,"15":1,"16":1,"22":1,"23":1,"28":1,"50":1,"73":1,"81":1,"91":1}}],["modifies",{"2":{"78":1}}],["modifier",{"2":{"57":1}}],["modified",{"2":{"50":2}}],["modifiable",{"2":{"27":1}}],["modify",{"2":{"33":1}}],["mode",{"2":{"5":1}}],["models",{"2":{"16":1}}],["model",{"0":{"25":1},"1":{"26":1},"2":{"2":1}}],["modules",{"0":{"52":1,"53":1},"1":{"53":1},"2":{"52":2,"53":1,"67":2,"72":1,"82":1}}],["module",{"0":{"37":1},"2":{"1":5,"12":2,"27":1,"33":1,"37":2,"38":2,"40":1,"41":1,"42":1,"43":4,"52":4,"53":4,"58":1,"62":2,"67":1,"71":1,"72":1,"82":1,"83":1,"89":4}}],["equals",{"2":{"85":1}}],["ecosystem",{"2":{"81":1}}],["economics",{"2":{"26":1}}],["efficiency",{"2":{"73":1}}],["efficiently",{"2":{"71":1}}],["eligible",{"2":{"60":1}}],["elements",{"2":{"61":1,"62":1}}],["element",{"2":{"58":2}}],["else",{"2":{"11":1,"55":7,"69":1,"82":1,"100":1}}],["edition",{"2":{"47":1}}],["editor",{"2":{"46":1}}],["ed25519keypair",{"2":{"75":2,"78":5,"84":3,"86":2,"98":2}}],["ed25519",{"2":{"7":3,"75":1,"78":2,"84":1,"86":1,"98":1}}],["epochs",{"2":{"41":1,"93":2,"98":2}}],["epoch",{"2":{"36":4,"41":5,"93":1,"99":1}}],["esmoduleinterop",{"2":{"82":1}}],["es2020",{"2":{"82":1}}],["essential",{"2":{"33":1}}],["especially",{"2":{"10":1,"45":1,"68":1,"92":1,"97":1}}],["empty",{"2":{"33":1,"60":3,"61":2,"64":1,"89":1}}],["emits",{"2":{"1":1}}],["emit",{"2":{"1":1,"31":1,"32":1,"42":4}}],["emitting",{"2":{"1":1,"32":2}}],["evaluation",{"2":{"89":1}}],["evaluable",{"2":{"63":1}}],["evacuating",{"2":{"89":1}}],["evacuation",{"0":{"88":1,"89":1},"1":{"89":1,"90":1},"2":{"89":1}}],["evacuate",{"2":{"88":1,"89":5}}],["evolved",{"2":{"71":1}}],["evolve",{"2":{"30":1}}],["ever",{"2":{"13":1,"26":1,"88":1,"90":1}}],["everyday",{"2":{"54":1}}],["everyone",{"2":{"33":1}}],["everybody",{"0":{"20":1}}],["every",{"2":{"1":2,"4":2,"5":1,"25":2,"46":1,"49":1,"50":1,"66":1,"93":1,"96":1}}],["everything",{"2":{"0":1,"1":1,"14":1,"19":1,"25":1,"27":1,"44":1,"45":1,"50":1,"51":1,"65":1,"72":1,"82":1,"89":1,"96":1}}],["even",{"2":{"11":1,"14":1}}],["eventually",{"2":{"3":1}}],["events",{"0":{"42":1},"2":{"1":1,"31":1,"32":1,"42":3,"49":1}}],["event",{"2":{"1":5,"31":1,"32":2,"42":5}}],["err",{"2":{"100":3}}],["errors",{"2":{"43":1,"51":1,"54":1,"89":1,"99":1}}],["error",{"0":{"43":1},"2":{"1":1,"43":5,"55":1,"75":1,"78":2,"86":1,"99":4,"100":1}}],["ergonomic",{"2":{"33":1,"35":1}}],["ergonomics",{"2":{"23":1}}],["erc",{"2":{"25":1}}],["etc",{"2":{"17":1,"41":1}}],["exchange",{"2":{"97":4}}],["exchanges",{"2":{"8":1,"97":1}}],["exclude",{"2":{"82":1}}],["exist",{"2":{"57":1,"64":1}}],["existing",{"2":{"7":1,"60":1,"94":1}}],["exit",{"2":{"56":2}}],["exe",{"2":{"92":1}}],["exempt",{"2":{"51":1}}],["execution",{"2":{"2":1,"55":1,"75":1}}],["executetransactionblock",{"2":{"78":2}}],["executedeleteblobtransaction",{"2":{"100":3}}],["executed",{"2":{"75":1}}],["executes",{"2":{"12":1}}],["execute",{"2":{"1":1,"2":1,"3":1,"4":4,"5":1,"8":1,"15":3,"32":1,"37":1,"46":1,"75":2,"78":1,"79":1,"83":1,"89":2,"92":3,"93":2,"97":3,"100":1}}],["extends",{"0":{"72":1},"2":{"72":1}}],["extension",{"2":{"15":1}}],["external",{"2":{"47":1,"53":1,"67":1}}],["exact",{"2":{"75":1,"89":1}}],["exactly",{"2":{"33":1,"43":1,"71":1,"77":1}}],["examples",{"0":{"18":1},"2":{"18":2}}],["example",{"2":{"9":1,"26":1,"38":1,"72":1,"78":1,"85":1}}],["explorer",{"2":{"78":1}}],["explicitly",{"2":{"77":1}}],["expected",{"2":{"89":1}}],["expect",{"2":{"46":1,"83":1,"100":1}}],["expertise",{"2":{"15":1}}],["experienced",{"2":{"14":1}}],["experience",{"2":{"14":1,"15":1}}],["expiring",{"2":{"41":1}}],["expression",{"2":{"54":2}}],["express",{"2":{"14":1,"58":1}}],["easier",{"2":{"47":1}}],["easily",{"2":{"3":1,"8":1,"15":1}}],["easy",{"2":{"28":1,"45":1}}],["each",{"2":{"1":1,"10":1,"43":1,"47":1,"71":1,"75":2,"89":3,"93":1}}],["enough",{"2":{"70":1}}],["enotauthorized",{"2":{"43":1}}],["encode",{"2":{"98":1}}],["encoding",{"2":{"62":1}}],["encounter",{"2":{"92":1}}],["encase",{"2":{"64":1}}],["encapsulate",{"2":{"57":1}}],["entire",{"2":{"75":1,"77":1,"91":1,"94":1,"101":1}}],["enters",{"2":{"46":1}}],["enter",{"2":{"46":1,"52":1,"94":1}}],["entry",{"2":{"1":1,"27":1,"32":3,"36":2,"66":2,"72":4,"89":1}}],["ensuring",{"2":{"40":1}}],["ensures",{"2":{"99":1}}],["ensure",{"2":{"1":1,"51":1,"69":1}}],["enforcing",{"2":{"33":1}}],["enforced",{"2":{"66":1}}],["enforceable",{"2":{"33":1}}],["enforces",{"2":{"33":1,"40":1}}],["enforce",{"2":{"33":2,"38":1,"55":1}}],["ending",{"2":{"56":1}}],["end",{"2":{"30":2,"48":1,"56":1,"58":1}}],["ends",{"2":{"27":1}}],["env",{"2":{"5":6}}],["environments",{"2":{"47":1}}],["environment",{"0":{"5":1},"2":{"5":4,"8":1,"24":1,"31":1,"92":1}}],["engine",{"2":{"2":1}}],["e",{"2":{"1":2,"33":2,"37":1,"43":3,"47":1,"50":1,"57":1,"89":4,"99":1}}],["dapps",{"2":{"87":1}}],["dangling",{"2":{"71":1}}],["data",{"0":{"54":1,"98":1,"99":1,"100":1},"2":{"3":1,"8":1,"11":1,"42":1,"49":2,"50":1,"51":1,"54":1,"66":1,"71":1,"85":4,"86":2,"93":1,"98":1,"99":2}}],["dummy",{"2":{"84":1}}],["duplicates",{"2":{"60":1}}],["duplicated",{"2":{"39":1}}],["duly",{"2":{"27":1}}],["during",{"2":{"11":1,"36":1,"40":3,"99":1,"100":1}}],["d",{"2":{"23":1,"24":2,"26":1,"27":1,"32":1,"36":1,"37":2,"53":1,"61":1,"66":2,"78":2,"89":1}}],["dynamic",{"2":{"11":3,"30":1,"58":1,"65":1}}],["diem",{"2":{"71":1}}],["did",{"2":{"43":1}}],["didn",{"2":{"39":1}}],["dice",{"2":{"40":1}}],["dirty",{"2":{"31":1,"46":1,"70":1}}],["directory",{"2":{"18":1,"46":5,"51":1,"82":1,"92":1,"93":1}}],["directly",{"2":{"12":1,"50":1}}],["dist",{"2":{"82":2,"93":2}}],["distributing",{"2":{"10":1}}],["display",{"2":{"26":1,"32":4}}],["discover",{"2":{"21":1}}],["digital",{"2":{"71":1}}],["digest",{"2":{"49":1,"51":1,"77":1,"78":4,"86":4,"100":6}}],["dig",{"2":{"11":1}}],["differentiates",{"2":{"48":1}}],["different",{"2":{"10":2,"41":1,"47":1,"72":1,"97":1}}],["down",{"2":{"94":1}}],["downloaded",{"2":{"99":1}}],["downloadpackagejson",{"2":{"99":3}}],["download",{"2":{"92":1,"93":1,"97":1}}],["downloading",{"2":{"15":1}}],["domains",{"2":{"94":1}}],["domain",{"0":{"94":1},"2":{"94":4,"95":2}}],["does",{"2":{"57":1,"89":2}}],["doesn",{"2":{"38":1,"45":1}}],["double",{"2":{"71":1}}],["doubleup",{"2":{"23":1}}],["doubt",{"2":{"13":1}}],["documentation",{"2":{"16":2}}],["docs",{"2":{"13":1,"92":2,"97":2}}],["do",{"2":{"6":1,"12":1,"13":1,"15":1,"23":1,"28":1,"29":1,"32":1,"36":2,"43":1,"51":1,"55":2,"73":1,"84":1,"88":1,"92":1,"101":1}}],["dozens",{"2":{"2":1}}],["done",{"2":{"27":1,"51":1,"94":1}}],["don",{"2":{"1":1,"15":1,"18":1,"24":1,"31":1,"42":1,"46":1,"58":1,"65":1,"82":1,"93":1,"99":1}}],["drainer",{"2":{"88":1}}],["dropped",{"2":{"71":1}}],["drop",{"2":{"1":1,"12":1,"27":1,"32":1,"33":2,"36":1,"42":1,"57":1,"60":1,"61":1,"64":1,"67":1,"89":2}}],["drill",{"2":{"1":1}}],["deal",{"2":{"91":1}}],["debugging",{"2":{"54":1}}],["default",{"2":{"43":1,"55":1,"57":1,"67":1,"68":1,"76":1,"82":1,"97":1}}],["definitely",{"2":{"90":1}}],["definition",{"2":{"54":1}}],["defining",{"2":{"31":1,"32":1,"67":1,"69":1}}],["defines",{"2":{"33":2,"50":1,"67":1}}],["defined",{"2":{"3":1,"25":1,"43":1,"67":1}}],["define",{"2":{"1":2,"33":2,"42":1,"43":1,"47":1,"57":1,"72":1,"75":2,"85":1,"89":2,"98":1}}],["defi",{"2":{"17":1,"81":1}}],["deleted",{"2":{"100":2}}],["deleteblobbyobjectid",{"2":{"100":2}}],["delete",{"2":{"100":3}}],["deleting",{"0":{"100":1}}],["deletable",{"2":{"98":2,"100":1}}],["delegate",{"2":{"38":1}}],["delve",{"2":{"70":1}}],["delayed",{"2":{"41":1}}],["deterministically",{"2":{"41":1}}],["detailed",{"2":{"11":1}}],["details",{"2":{"7":1,"27":1,"32":1,"47":1,"49":1,"85":4}}],["demo",{"2":{"33":1}}],["destroy",{"2":{"89":2}}],["destroyed",{"2":{"57":1}}],["desired",{"2":{"83":1}}],["designed",{"2":{"71":1}}],["design",{"2":{"25":1}}],["description",{"2":{"4":1,"26":2,"32":9,"79":1}}],["dex",{"0":{"28":1},"2":{"24":1,"27":1,"28":1,"29":1}}],["dexs",{"2":{"24":1,"28":1}}],["deepseek",{"2":{"16":1}}],["denominations",{"2":{"10":1}}],["derivation",{"2":{"7":1}}],["dependency",{"2":{"53":1,"82":1}}],["dependencies",{"2":{"46":1,"47":3,"51":1,"53":3}}],["depending",{"2":{"3":1,"4":1,"15":1,"83":1}}],["deploys",{"2":{"32":1}}],["deploying",{"0":{"24":1,"28":1,"93":1},"2":{"8":1,"28":2,"44":1,"72":1}}],["deploy",{"0":{"23":1,"91":1},"1":{"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"92":1,"93":1,"94":1,"95":1},"2":{"6":1,"23":1,"24":2,"27":1,"29":1,"91":2,"92":1,"93":2,"95":1,"97":1}}],["dev",{"2":{"47":2,"82":1}}],["devs",{"2":{"20":1}}],["developed",{"2":{"71":1}}],["developers",{"2":{"71":1}}],["developer",{"2":{"14":1,"19":1,"45":1,"70":1,"96":1}}],["developing",{"2":{"8":1}}],["development",{"0":{"16":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1},"2":{"5":1,"11":1,"15":1,"24":1,"31":1,"35":1,"44":1,"71":1,"80":1,"82":1}}],["devnet",{"2":{"5":1,"8":5,"79":1,"83":1,"85":2}}],["decode",{"2":{"99":2}}],["decentralization",{"2":{"91":1}}],["decentralized",{"2":{"34":1,"91":1,"94":1,"95":1,"96":1,"101":1}}],["declarations",{"2":{"52":1}}],["declared",{"2":{"54":1,"66":1}}],["declare",{"2":{"1":1,"25":1,"32":1,"37":1,"52":1,"57":3,"60":2,"61":2,"62":2,"63":1,"65":1,"66":1,"67":1,"72":1}}],["decimals",{"2":{"27":3}}],["decide",{"2":{"3":1}}],["bin",{"2":{"92":1}}],["binaries",{"2":{"92":1}}],["binary",{"2":{"5":1,"92":2,"97":1,"99":2}}],["big",{"2":{"91":1}}],["billion",{"2":{"85":1}}],["bit",{"2":{"56":1}}],["blobobjectid",{"2":{"100":3}}],["blobobject",{"2":{"98":3}}],["blobid",{"2":{"98":5,"99":3}}],["blobs",{"2":{"96":1}}],["blob",{"2":{"93":1,"98":3,"99":2,"100":4}}],["blockchains",{"2":{"30":1,"41":1,"72":1}}],["blockchain",{"0":{"83":1},"2":{"14":1,"45":1,"48":1,"49":1,"57":1,"71":2,"73":1,"81":1,"82":1,"83":1,"86":1,"87":1}}],["blocks",{"0":{"12":1,"75":1},"2":{"12":1,"75":1}}],["block",{"2":{"5":1,"75":1,"77":1}}],["blindly",{"2":{"43":1}}],["b",{"2":{"26":4,"27":4,"32":8,"43":4,"54":1,"62":2,"65":2,"66":1,"67":4,"68":1,"69":1}}],["bots",{"2":{"87":1}}],["both",{"2":{"16":1,"55":1,"68":1,"78":3,"89":1,"97":2}}],["boolean",{"2":{"54":1}}],["bool",{"2":{"54":3}}],["book",{"2":{"16":1,"48":1}}],["bound",{"2":{"25":1}}],["borrows",{"2":{"68":1}}],["borrowing",{"2":{"68":1}}],["borrow",{"2":{"1":2,"16":1,"65":1,"68":4,"71":1,"89":1}}],["bring",{"2":{"94":1}}],["break",{"2":{"56":4}}],["breakdown",{"2":{"13":1}}],["brew",{"2":{"4":1,"15":1}}],["brand",{"2":{"33":1}}],["branches",{"2":{"55":1}}],["branch",{"2":{"4":1}}],["brackets",{"2":{"12":1}}],["bag",{"2":{"65":13}}],["bags",{"0":{"65":1},"2":{"65":2,"66":1}}],["backends",{"2":{"73":1}}],["back",{"2":{"58":4,"89":1}}],["baked",{"2":{"40":1}}],["basics",{"0":{"35":1,"81":1},"1":{"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1},"2":{"35":1,"70":1,"74":1}}],["basic",{"2":{"33":1,"82":1,"101":1}}],["base",{"2":{"27":1}}],["based",{"2":{"4":1,"15":1,"20":1,"43":1,"72":1,"93":1}}],["balance",{"2":{"25":1,"31":2,"32":24,"33":11,"77":1,"85":1,"97":1}}],["balances",{"0":{"85":1},"2":{"25":2,"31":1,"33":1,"61":1,"97":2}}],["bar",{"2":{"20":1}}],["batch",{"2":{"0":1,"10":1}}],["buying",{"2":{"94":1}}],["buy",{"2":{"94":1}}],["buyer",{"2":{"33":1}}],["bugs",{"2":{"71":1}}],["business",{"2":{"63":1}}],["builtbytes",{"2":{"78":4}}],["built",{"2":{"42":1,"51":1,"68":1,"71":1,"75":1}}],["builder",{"0":{"92":1},"2":{"92":9,"93":2,"97":1}}],["builds",{"2":{"1":1}}],["build",{"0":{"88":1},"1":{"89":1,"90":1},"2":{"1":2,"3":2,"15":1,"41":1,"45":1,"51":2,"70":1,"72":2,"78":8,"82":1,"84":1,"87":2,"88":1,"89":2,"93":4}}],["building",{"0":{"1":1,"30":1,"32":1,"89":1},"1":{"31":1,"32":1,"33":1,"34":1},"2":{"3":2,"7":1,"14":1,"44":1,"45":1,"57":1,"71":1,"73":1,"78":1,"80":2,"87":1,"97":1,"101":1}}],["burned",{"2":{"26":1}}],["burn",{"2":{"25":1}}],["bundle",{"2":{"12":1}}],["bulk",{"2":{"10":1}}],["but",{"2":{"2":1,"8":1,"15":1,"23":1,"24":1,"27":1,"39":1,"42":1,"68":1,"78":1,"88":1}}],["budget",{"2":{"1":2,"9":3,"27":1,"49":1,"51":3,"77":1,"89":2}}],["benefits",{"2":{"91":1}}],["behaviours",{"2":{"57":1}}],["been",{"2":{"53":1}}],["beyond",{"0":{"35":1},"1":{"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1}}],["becomes",{"2":{"25":1,"38":1,"71":1}}],["because",{"2":{"24":1,"25":1,"67":1,"71":1,"77":1,"88":1,"89":1,"90":1,"92":1,"97":1}}],["be",{"2":{"4":2,"6":1,"7":1,"16":3,"24":1,"26":1,"32":3,"33":4,"37":1,"39":1,"40":2,"49":1,"50":1,"52":1,"57":3,"61":1,"63":1,"66":1,"71":1,"72":1,"77":1,"78":1,"84":1,"85":1,"89":1,"91":1,"92":1,"100":1}}],["between",{"2":{"48":1,"72":1}}],["beta",{"2":{"47":1}}],["better",{"2":{"43":1,"61":1}}],["bet",{"2":{"3":1}}],["best",{"2":{"1":1,"3":1,"13":1,"27":1,"96":1}}],["beforehand",{"2":{"66":1}}],["before",{"2":{"1":1,"6":1,"8":1,"25":1,"32":2,"33":1,"39":1,"46":1,"51":1,"56":1,"66":1,"72":1,"79":1,"99":1}}],["byte",{"2":{"48":1,"62":1}}],["bytes",{"2":{"27":1,"32":2,"48":1,"78":4}}],["by",{"2":{"1":2,"16":1,"17":1,"32":1,"33":1,"43":2,"46":1,"48":1,"57":1,"61":1,"67":2,"68":1,"71":2,"75":1,"76":1,"77":1,"86":1,"87":1,"95":1,"96":1,"97":1}}],["fs",{"2":{"99":1}}],["fud",{"2":{"86":8}}],["fulfilled",{"2":{"33":1}}],["fulfill",{"2":{"33":1}}],["full",{"2":{"13":1,"50":1,"77":1,"80":1,"83":1}}],["further",{"2":{"20":1,"59":1,"87":1}}],["future",{"2":{"15":1}}],["funny",{"2":{"63":1}}],["funded",{"2":{"98":1}}],["funding",{"2":{"84":1}}],["funds",{"2":{"10":1,"32":2,"84":1}}],["fund",{"2":{"8":1,"32":1}}],["fundamental",{"2":{"5":1}}],["fun",{"2":{"1":1,"27":2,"32":4,"33":5,"36":2,"37":3,"38":1,"40":1,"41":1,"43":2,"67":3,"71":2,"72":1,"89":1}}],["functionality",{"2":{"52":1,"89":1}}],["functions",{"0":{"67":1},"2":{"36":1,"46":1,"49":1,"52":1,"63":1,"67":4,"72":3,"80":1,"101":1}}],["function",{"2":{"0":1,"1":4,"12":3,"27":4,"32":8,"33":2,"37":3,"38":2,"39":1,"40":1,"42":1,"43":2,"54":1,"56":1,"67":3,"75":3,"78":2,"79":3,"83":1,"84":1,"85":5,"86":1,"89":3,"98":1,"99":2,"100":4}}],["facets",{"2":{"91":1}}],["facing",{"2":{"18":1}}],["false",{"2":{"54":2}}],["fastest",{"2":{"72":1}}],["faster",{"2":{"16":1}}],["fast",{"2":{"45":1}}],["failed",{"2":{"100":1}}],["fail",{"2":{"43":1,"60":1}}],["fails",{"2":{"43":3}}],["favourite",{"2":{"24":1,"33":1}}],["far",{"2":{"23":1}}],["familiar",{"2":{"7":1}}],["faucet",{"0":{"8":1},"2":{"5":2,"8":4,"97":1}}],["folder",{"2":{"27":1,"93":1}}],["follow",{"2":{"28":1,"46":1}}],["following",{"2":{"22":1}}],["followed",{"2":{"7":1,"16":1}}],["found",{"2":{"16":1,"86":1}}],["foreach",{"2":{"75":2}}],["forever",{"2":{"56":1}}],["format",{"2":{"47":1}}],["forward",{"2":{"9":1}}],["force",{"2":{"5":1}}],["for",{"2":{"1":4,"2":1,"3":1,"4":2,"7":3,"8":2,"9":2,"10":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"20":2,"21":1,"23":1,"27":2,"29":1,"31":1,"32":2,"33":5,"34":1,"38":1,"39":1,"40":1,"41":2,"42":1,"43":1,"44":1,"45":1,"47":2,"48":1,"49":1,"50":1,"57":1,"59":1,"67":1,"69":1,"70":1,"71":3,"72":2,"73":2,"74":1,"75":3,"76":1,"78":2,"81":1,"82":2,"84":1,"85":4,"86":4,"89":2,"92":2,"93":3,"94":1,"97":6,"98":1}}],["frontends",{"2":{"73":1,"91":1}}],["frontend",{"2":{"73":1,"93":2}}],["fromkind",{"2":{"78":2}}],["fromsecretkey",{"2":{"75":1,"78":3,"86":1,"98":1}}],["from",{"0":{"99":1,"100":1},"2":{"3":2,"7":1,"8":1,"12":1,"16":1,"19":1,"23":1,"26":1,"27":3,"29":1,"32":6,"33":1,"36":1,"38":2,"41":2,"53":1,"60":1,"61":1,"62":1,"66":1,"72":2,"75":4,"78":6,"79":1,"81":1,"83":4,"84":3,"85":1,"86":3,"89":1,"90":1,"97":1,"98":4,"99":4,"100":1}}],["framework",{"2":{"93":2}}],["frameworks",{"2":{"72":1}}],["framerusercontent",{"2":{"27":1}}],["friend",{"2":{"13":1}}],["freeze",{"2":{"27":2}}],["free",{"2":{"8":1,"84":1,"89":1}}],["frequently",{"2":{"4":1}}],["flexibility",{"2":{"25":1}}],["fly",{"2":{"15":1}}],["flag",{"2":{"4":3,"6":1}}],["flow",{"2":{"2":1}}],["fetches",{"2":{"99":1}}],["fetching",{"2":{"85":1}}],["fetch",{"2":{"36":1,"86":1}}],["few",{"2":{"12":1,"30":1}}],["featurewhat",{"2":{"33":1}}],["feature",{"2":{"11":1}}],["features",{"2":{"4":1,"32":1,"33":1,"44":1,"50":1,"72":1,"74":1}}],["feel",{"2":{"84":1,"89":1}}],["fee",{"2":{"1":1,"33":2}}],["fees",{"2":{"0":1,"2":1,"33":1,"78":1}}],["fills",{"2":{"36":1}}],["filebytes",{"2":{"98":2}}],["files",{"2":{"46":1,"72":1,"82":1,"93":3,"95":1}}],["file",{"2":{"31":1,"46":4,"47":1,"53":1,"82":1,"89":1,"93":3,"98":3,"99":2}}],["filter",{"2":{"20":1}}],["field",{"2":{"11":2,"32":1,"43":9,"60":1,"61":1,"64":3,"65":1,"67":1}}],["fields",{"2":{"11":1,"32":2,"50":1,"57":1,"65":1,"69":1}}],["fixed",{"2":{"9":1,"27":1,"48":1}}],["fixedamountrequest",{"2":{"8":1}}],["finance",{"2":{"28":1}}],["finally",{"2":{"78":1,"82":1,"86":2,"97":1}}],["finalized",{"2":{"33":1}}],["finalizedadd",{"2":{"33":1}}],["finalizes",{"2":{"33":1}}],["final",{"2":{"1":1,"78":2}}],["find",{"2":{"19":1,"93":2}}],["finish",{"2":{"12":1,"29":1}}],["fine",{"2":{"1":1,"26":1,"71":1}}],["first",{"2":{"1":1,"4":2,"14":1,"24":1,"27":1,"28":1,"33":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"51":1,"62":1,"64":1,"67":2,"70":1,"71":1,"74":1,"75":1,"78":1,"79":1,"82":1,"83":1,"86":2,"92":1,"97":1,"98":1}}],["written",{"2":{"51":1}}],["writefilesync",{"2":{"99":3}}],["writeblob",{"2":{"98":2}}],["write",{"2":{"15":1,"35":1,"46":2,"67":1,"72":1,"81":1}}],["writing",{"0":{"98":1},"2":{"14":1,"15":1,"31":1,"51":1,"81":1,"82":1}}],["wrapping",{"2":{"69":1}}],["wrapper",{"2":{"69":5}}],["wrapped",{"2":{"25":1,"69":2}}],["wrap",{"2":{"12":1,"43":1}}],["warn",{"2":{"99":1,"100":1}}],["wait",{"2":{"86":1}}],["waitfortransaction",{"2":{"86":2}}],["wal",{"2":{"92":2,"94":1,"97":10,"98":1}}],["walk",{"2":{"82":1,"96":1}}],["walrusclient",{"2":{"98":4,"99":3,"100":3}}],["walrus",{"0":{"91":1,"92":1,"93":1,"96":1,"97":1,"98":1,"99":1,"100":1},"1":{"92":1,"93":1,"94":1,"95":1,"97":1,"98":1,"99":1,"100":1,"101":1},"2":{"34":3,"91":3,"92":9,"93":8,"94":1,"95":2,"96":3,"97":16,"98":4,"99":3,"100":1,"101":1}}],["wallet",{"0":{"84":1,"85":1,"88":1},"1":{"89":1,"90":1},"2":{"8":1,"12":1,"24":1,"26":1,"28":1,"84":5,"85":2,"86":3,"88":3,"89":3,"90":1,"97":2}}],["wallets",{"2":{"7":1,"87":1}}],["was",{"2":{"22":1,"32":1,"71":1}}],["wanted",{"2":{"88":1}}],["wants",{"2":{"45":1}}],["want",{"2":{"7":1,"9":1,"10":2,"12":1,"28":1,"30":1,"32":2,"45":1,"46":1,"56":1,"60":1,"61":1,"65":1,"67":1,"68":1,"73":1,"75":1,"77":1,"78":1,"89":1,"93":1,"98":2}}],["way",{"2":{"0":1,"85":1}}],["won",{"2":{"15":1,"33":2}}],["world",{"2":{"17":1}}],["word",{"2":{"7":1}}],["works",{"2":{"4":1,"51":1,"53":1,"86":1,"89":1}}],["work",{"2":{"1":1,"7":1,"16":1,"31":4,"69":1}}],["working",{"2":{"1":1,"10":1,"51":1,"53":1,"68":1,"74":1,"93":1}}],["would",{"2":{"4":1,"47":1,"51":2}}],["witnesses",{"0":{"39":1},"1":{"40":1},"2":{"37":2,"39":1}}],["witness",{"0":{"40":1},"2":{"27":3,"37":3,"38":1,"39":1,"40":2}}],["withdrawn",{"2":{"32":2}}],["withdraw",{"2":{"32":2}}],["without",{"2":{"2":1,"5":1,"33":2,"53":1,"68":1,"82":1}}],["with",{"0":{"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"11":1,"15":1,"33":1,"74":1,"82":1,"97":1},"1":{"5":1},"2":{"0":1,"1":4,"2":1,"3":2,"4":2,"5":4,"6":3,"7":8,"8":1,"9":2,"10":2,"12":2,"13":1,"14":4,"15":3,"18":1,"22":1,"23":2,"24":1,"25":3,"27":4,"28":3,"29":1,"31":6,"32":7,"37":2,"38":3,"43":5,"46":2,"47":1,"48":1,"50":1,"51":3,"53":3,"54":1,"55":1,"57":5,"59":1,"62":4,"63":1,"64":1,"65":2,"66":1,"68":2,"69":1,"71":1,"72":5,"73":1,"74":2,"75":2,"78":6,"81":3,"82":3,"83":2,"84":2,"86":2,"87":3,"92":3,"93":3,"95":1,"96":2,"97":8,"98":4,"100":1}}],["will",{"2":{"11":1,"23":1,"27":1,"28":1,"30":1,"32":2,"40":1,"45":1,"49":1,"52":1,"60":1,"69":1,"77":1,"82":1,"91":1,"92":1,"93":2,"96":1,"97":1}}],["windows",{"2":{"4":1,"15":1,"92":1}}],["who",{"2":{"36":2,"45":1,"50":1}}],["whoever",{"2":{"33":1}}],["which",{"2":{"28":1,"33":1,"37":1,"43":1,"53":1,"77":1}}],["while",{"2":{"1":1,"3":1,"56":3,"89":1}}],["where",{"2":{"27":1,"30":1,"31":1,"39":1,"43":1,"61":1,"70":1,"78":1,"82":1,"89":1}}],["whenever",{"2":{"4":1,"32":1,"33":1}}],["when",{"2":{"3":1,"7":2,"8":1,"10":2,"13":1,"25":1,"26":2,"36":3,"38":1,"40":1,"43":2,"46":1,"53":2,"54":1,"56":2,"60":1,"64":1,"65":1,"71":1,"77":1,"83":1,"100":1}}],["why",{"2":{"27":1,"33":1,"88":1}}],["whatever",{"2":{"57":1,"69":1,"93":1}}],["what",{"2":{"7":1,"20":2,"33":2,"36":3,"39":1,"43":1,"44":1,"45":1,"49":1,"50":1,"53":1,"78":1,"91":1,"101":1}}],["went",{"2":{"86":1}}],["were",{"2":{"16":1}}],["web2",{"2":{"91":1}}],["web3",{"2":{"15":1}}],["website",{"2":{"8":1,"91":1,"92":2,"94":1,"97":1}}],["well",{"2":{"12":1,"67":1}}],["we",{"2":{"1":2,"15":2,"24":2,"27":2,"28":1,"32":3,"33":4,"46":1,"53":1,"66":1,"70":1,"75":1,"78":3}}],["citizens",{"2":{"71":1}}],["circulation",{"2":{"32":1}}],["c",{"2":{"43":1,"54":1}}],["centralized",{"2":{"91":1}}],["centric",{"2":{"2":1,"72":2,"73":1,"80":1}}],["certain",{"2":{"40":1}}],["crash",{"2":{"99":1}}],["crypto",{"2":{"91":1}}],["cryptographic",{"2":{"71":1}}],["crosschain",{"2":{"53":1}}],["crucial",{"2":{"42":1}}],["critical",{"2":{"33":1}}],["creating",{"0":{"27":1,"84":1},"2":{"84":1}}],["creates",{"2":{"33":3,"38":1,"84":1}}],["created",{"2":{"5":1,"33":1,"36":2,"40":1,"71":1,"93":1}}],["create",{"0":{"23":1},"1":{"24":1,"25":1,"26":1,"27":1,"28":1,"29":1},"2":{"1":1,"23":2,"26":4,"27":6,"29":1,"31":1,"32":2,"33":2,"37":1,"46":1,"54":1,"60":1,"69":1,"71":1,"72":1,"75":3,"82":3,"85":1,"86":1}}],["cues",{"2":{"92":1}}],["currency",{"2":{"26":1,"27":3}}],["currentepoch",{"2":{"83":2}}],["current",{"2":{"8":1,"36":1,"41":3,"51":1,"53":1}}],["currently",{"2":{"5":1,"6":1}}],["cursor",{"2":{"15":1}}],["curl",{"2":{"8":2,"92":3,"93":1,"97":2}}],["customize",{"2":{"47":1,"76":1,"82":1}}],["custom",{"2":{"1":1,"33":2,"50":1,"57":1,"77":2,"89":2}}],["chmod",{"2":{"92":1}}],["charge",{"2":{"33":1}}],["change",{"2":{"33":1,"42":1,"54":2,"78":1}}],["changes",{"2":{"25":1,"49":2,"50":1,"63":1}}],["chains",{"2":{"12":1,"25":1,"53":1}}],["chain",{"2":{"3":1,"5":2,"12":1,"23":1,"25":2,"27":1,"33":1,"42":2,"44":1,"46":1,"49":1,"51":1,"57":1,"72":1,"79":1,"81":2,"83":1}}],["checked",{"2":{"86":1}}],["checks",{"2":{"33":1,"43":1,"55":1}}],["check",{"2":{"4":1,"8":1,"9":1,"18":1,"20":1,"22":1,"24":1,"31":1,"34":2,"74":1,"97":1}}],["cheat",{"0":{"3":1},"1":{"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1},"2":{"13":1,"22":1}}],["choose",{"2":{"86":1}}],["choco",{"2":{"4":1,"15":1}}],["chocolatey",{"2":{"4":1,"15":1}}],["choice",{"2":{"1":1,"25":1,"30":1,"46":1}}],["clock",{"2":{"41":10}}],["class",{"2":{"71":1}}],["classic",{"2":{"55":1}}],["claude",{"2":{"16":1}}],["claim",{"2":{"8":1,"32":2,"33":1}}],["cli",{"0":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"11":1},"1":{"4":1,"5":2,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1},"2":{"1":1,"3":2,"4":6,"5":1,"6":1,"7":1,"12":1,"13":3,"15":6,"22":1,"24":1,"31":1,"51":1,"72":1,"90":1,"92":2,"97":3}}],["clients",{"2":{"3":2,"90":1,"98":1}}],["client",{"2":{"1":2,"3":2,"5":4,"6":3,"8":5,"9":3,"10":5,"11":2,"12":2,"13":2,"15":1,"18":1,"27":1,"34":1,"51":2,"75":4,"78":10,"83":8,"84":2,"85":6,"86":6,"89":2,"92":2,"97":3,"98":1,"99":1,"100":1,"101":1}}],["clean",{"2":{"0":1,"89":1}}],["ctx",{"2":{"1":2,"27":7,"32":11,"33":5,"36":4,"37":3,"38":3,"40":3,"41":2,"65":1,"66":2,"72":3,"89":2}}],["catch",{"2":{"75":1,"78":2,"86":1,"89":1,"99":1,"100":1}}],["camelcase",{"2":{"38":1}}],["capability",{"2":{"32":3,"33":2,"38":2,"40":1,"72":1}}],["capabilities",{"0":{"38":1},"2":{"15":1,"38":2,"39":1}}],["cap",{"2":{"26":3,"27":4,"33":6,"38":4,"39":1}}],["carrier",{"2":{"65":1}}],["carry",{"2":{"65":1}}],["carrying",{"2":{"11":1}}],["cargo",{"2":{"4":3}}],["calling",{"0":{"79":1},"2":{"33":1,"40":1,"49":1,"54":1,"63":1}}],["called",{"2":{"33":1,"36":1,"72":1}}],["caller",{"2":{"32":1,"33":1}}],["calls",{"2":{"2":1,"3":1,"5":1,"43":1,"54":1}}],["call",{"2":{"1":2,"11":1,"12":2,"27":1,"46":1,"67":1,"79":2,"89":1,"100":1}}],["cases",{"2":{"17":1,"51":1,"61":1,"76":1,"89":1}}],["case",{"2":{"1":1,"24":1,"27":1,"28":1,"32":1,"43":2,"48":1,"52":1,"53":2,"55":1,"64":1,"65":1,"66":1,"67":1,"78":1,"93":1,"97":1,"98":1,"100":1}}],["cannot",{"2":{"50":1,"54":1,"57":1}}],["can",{"2":{"0":1,"1":4,"2":1,"3":2,"4":3,"5":4,"6":3,"7":4,"8":2,"9":1,"10":2,"11":1,"12":1,"13":1,"15":1,"16":1,"20":1,"22":1,"23":1,"24":2,"25":1,"26":3,"27":3,"28":2,"29":1,"30":1,"33":6,"35":1,"36":5,"38":1,"40":2,"41":4,"42":2,"43":1,"44":1,"46":1,"49":1,"50":2,"51":3,"52":1,"53":1,"54":2,"55":2,"56":1,"57":6,"59":1,"60":2,"61":2,"62":3,"64":1,"65":2,"66":2,"67":3,"68":1,"69":1,"71":1,"72":1,"76":1,"77":4,"79":2,"80":1,"81":1,"82":3,"83":2,"85":3,"86":1,"87":2,"89":1,"91":1,"92":1,"93":2,"94":2,"95":2,"97":3,"98":1,"99":1,"101":1}}],["cd",{"2":{"1":1,"27":1,"46":1,"82":1}}],["cofigurations",{"2":{"92":1}}],["corresponding",{"2":{"75":1}}],["core",{"2":{"72":1,"89":1}}],["could",{"2":{"89":1,"91":1}}],["counter",{"2":{"57":2}}],["course",{"2":{"23":1}}],["copied",{"2":{"57":1,"68":1,"71":1}}],["copy",{"2":{"1":1,"32":1,"42":1,"57":1,"68":1}}],["cost",{"2":{"49":1}}],["collect",{"2":{"33":1}}],["collections",{"0":{"59":1},"2":{"33":1}}],["collection",{"2":{"17":1,"19":1,"30":2,"32":6,"59":1,"61":1,"65":1,"71":1}}],["cool",{"2":{"32":1,"71":1}}],["cooking",{"2":{"20":1}}],["codebases",{"2":{"20":1}}],["codebase",{"0":{"20":1}}],["code",{"2":{"19":1,"23":1,"27":1,"31":1,"37":1,"40":1,"43":3,"46":4,"47":1,"54":1,"55":1,"72":1,"83":1}}],["codes",{"2":{"1":1}}],["combine",{"2":{"75":1}}],["comfortable",{"2":{"74":1}}],["come",{"2":{"39":1,"43":2,"61":1,"65":1,"88":1}}],["commonjs",{"2":{"82":1}}],["common",{"2":{"71":1}}],["community",{"2":{"19":1}}],["commands",{"2":{"3":1,"7":1,"22":1,"49":2,"90":1,"92":1,"97":1}}],["command",{"2":{"1":2,"4":6,"5":6,"6":2,"7":4,"8":3,"9":2,"10":3,"13":1,"15":4,"27":1,"31":1,"46":2,"51":2,"74":1,"82":2,"83":2,"89":2,"92":6,"93":3,"97":8,"98":1}}],["com",{"2":{"4":1,"21":1,"26":1,"27":1,"53":1,"79":1,"92":1,"93":1}}],["compileroptions",{"2":{"82":1}}],["compiler",{"2":{"67":1,"69":1}}],["compile",{"2":{"63":1,"72":1}}],["complete",{"2":{"98":1}}],["completed",{"2":{"33":1}}],["complex",{"2":{"59":1,"72":1}}],["comprehensive",{"2":{"15":1}}],["computer",{"2":{"4":2,"15":1,"46":1}}],["compare",{"2":{"1":1}}],["coinobjectid",{"2":{"85":1,"86":1}}],["cointype",{"2":{"85":1,"86":1}}],["coin=",{"2":{"26":1}}],["coins",{"0":{"23":1,"86":1},"1":{"24":1,"25":1,"26":1,"27":1,"28":1,"29":1},"2":{"1":2,"10":5,"11":1,"27":4,"31":1,"33":1,"49":1,"75":2,"76":1,"77":2,"85":8,"86":6,"89":14}}],["coin",{"0":{"10":1},"2":{"1":10,"10":19,"25":4,"26":1,"27":8,"29":1,"31":2,"32":7,"33":8,"44":1,"49":1,"53":3,"72":1,"75":4,"76":2,"77":2,"78":5,"85":6,"86":5,"89":18}}],["converts",{"2":{"99":1}}],["convention",{"2":{"38":1}}],["congratulations",{"2":{"93":1}}],["concept",{"2":{"71":1}}],["conclusion",{"0":{"2":1,"13":1,"22":1,"29":1,"34":1,"44":1,"70":1,"80":1,"87":1,"90":1,"95":1,"101":1}}],["condition",{"2":{"55":1,"56":2}}],["conditionally",{"2":{"55":1}}],["conditionals",{"0":{"55":1},"2":{"38":1}}],["conditions",{"2":{"33":1}}],["confirm",{"2":{"33":4,"86":1}}],["config",{"2":{"33":4,"39":1,"92":3,"93":7,"97":3}}],["configurations",{"2":{"82":1,"97":1,"98":1}}],["configuration",{"2":{"33":1,"93":1}}],["contain",{"2":{"64":1}}],["contains",{"2":{"47":1}}],["continue",{"2":{"56":2}}],["continues",{"2":{"55":1}}],["context",{"0":{"36":1},"2":{"27":3,"32":3,"33":1,"36":5,"41":3,"72":2,"89":1}}],["content",{"2":{"8":1,"19":1,"46":1,"65":1,"98":2,"99":1}}],["controls",{"2":{"32":1}}],["control",{"2":{"26":2,"46":1,"50":1,"71":1,"72":1,"77":1}}],["contract",{"2":{"3":2,"26":1,"32":1,"42":1,"48":1,"53":1,"70":1,"71":2,"72":2}}],["contracts",{"0":{"79":1},"2":{"0":1,"3":2,"6":1,"10":1,"11":1,"14":1,"15":3,"17":1,"18":1,"35":1,"36":1,"45":1,"53":1,"72":1,"81":1,"87":1}}],["connected",{"2":{"85":1}}],["connection",{"2":{"83":2}}],["connecting",{"0":{"83":1},"2":{"95":1}}],["connect",{"2":{"5":1,"28":1,"83":2,"86":1}}],["consume",{"2":{"77":1}}],["console",{"2":{"75":3,"78":5,"83":1,"84":2,"85":6,"86":4,"98":3,"99":2,"100":4}}],["consolidate",{"2":{"0":1,"10":1}}],["consider",{"2":{"38":1}}],["considered",{"2":{"33":1}}],["considering",{"2":{"15":1}}],["constant",{"2":{"43":1,"63":1}}],["constants",{"0":{"63":1},"2":{"43":2,"52":1,"63":1}}],["const",{"2":{"1":1,"33":1,"43":3,"63":2,"75":6,"78":16,"79":1,"83":5,"84":5,"85":6,"86":8,"89":1,"98":7,"99":2,"100":2}}],["guaji9qljoeoh8zzg11dtmbtwn4ymxrldyxxcgmt5fo",{"2":{"99":1}}],["guide",{"0":{"96":1},"1":{"97":1,"98":1,"99":1,"100":1,"101":1},"2":{"30":1}}],["game",{"2":{"72":1}}],["garbage",{"2":{"71":1}}],["gasless",{"0":{"78":1}}],["gasbudgetamount",{"2":{"77":1}}],["gasprice",{"2":{"77":1}}],["gas",{"0":{"8":1,"76":1,"77":1,"78":1},"1":{"77":1,"78":1},"2":{"0":2,"1":3,"2":2,"8":7,"9":4,"10":1,"27":1,"49":2,"51":2,"75":3,"76":2,"77":8,"78":8,"85":1,"89":3}}],["g",{"2":{"37":1,"47":1,"50":1,"57":1,"89":1,"99":1}}],["global",{"2":{"25":1,"39":1,"71":1}}],["grail",{"2":{"81":1}}],["grained",{"2":{"26":1,"71":1}}],["greet",{"2":{"67":2}}],["great",{"2":{"0":1,"27":1,"30":1,"31":1,"32":1,"39":1,"96":1}}],["grouped",{"2":{"46":1}}],["growing",{"2":{"11":1}}],["giving",{"2":{"71":1}}],["given",{"2":{"33":1,"85":1}}],["gives",{"2":{"25":1,"26":1}}],["give",{"2":{"10":1,"32":1,"38":1,"84":1}}],["gitignore",{"2":{"46":1}}],["githubusercontent",{"2":{"93":1}}],["github",{"2":{"4":1,"20":2,"53":1}}],["git",{"2":{"4":2,"46":1,"53":2}}],["getallcoins",{"2":{"85":4}}],["getownedcoins",{"2":{"85":2}}],["getcoins",{"2":{"85":2,"86":1}}],["getprivatekey",{"2":{"84":1}}],["getpublickey",{"2":{"78":4,"84":2,"86":1}}],["getnetworkstatus",{"2":{"83":2}}],["getlatestsuisystemstate",{"2":{"83":2}}],["getfullnodeurl",{"2":{"75":2,"78":4,"83":7,"84":2,"85":3,"86":2,"98":2}}],["getsecretkey",{"2":{"84":1}}],["gets",{"2":{"10":1}}],["get",{"2":{"7":1,"10":1,"11":1,"15":2,"24":1,"27":2,"29":1,"31":2,"33":1,"43":3,"45":1,"46":1,"49":1,"51":1,"61":1,"70":1,"71":1,"72":1,"74":2,"85":2,"92":1,"93":1,"97":5,"98":1}}],["getting",{"0":{"4":1,"15":1,"24":1,"31":1,"74":1,"82":1,"97":1},"1":{"5":1},"2":{"15":1}}],["generic",{"2":{"69":1,"71":1,"92":1}}],["generics",{"0":{"69":1},"2":{"69":1}}],["generating",{"2":{"7":1}}],["generated",{"2":{"84":1}}],["generate",{"2":{"5":1,"7":4,"26":1,"84":1}}],["generally",{"2":{"96":1}}],["general",{"2":{"5":1}}],["genesis",{"2":{"5":1}}],["googleapis",{"2":{"92":1}}],["goodylili",{"2":{"27":9,"32":7}}],["good",{"2":{"1":1,"74":1}}],["going",{"2":{"43":1,"93":1}}],["got",{"2":{"38":1}}],["governance",{"2":{"17":1}}],["go",{"2":{"1":1,"12":1,"23":1,"46":1,"47":1,"59":1,"74":1,"80":1,"89":1,"90":1}}],["gt",{"2":{"1":11,"5":2,"7":2,"8":1,"10":9,"11":2,"12":7,"25":3,"26":3,"27":1,"31":1,"32":15,"33":12,"36":1,"51":2,"54":6,"55":2,"58":1,"60":2,"61":1,"64":2,"66":5,"69":3,"71":1,"75":2,"89":19,"98":3,"99":2}}],["occurs",{"2":{"99":1}}],["occurred",{"2":{"99":1}}],["o",{"2":{"92":2,"93":1,"97":1}}],["old",{"2":{"61":1}}],["odd",{"2":{"56":1}}],["observable",{"2":{"42":1}}],["objectid",{"2":{"77":1}}],["objects",{"0":{"50":1,"86":1},"1":{"51":1},"2":{"11":2,"12":2,"25":2,"26":1,"29":1,"38":1,"48":2,"49":1,"50":6,"72":1}}],["object",{"0":{"11":1},"2":{"1":1,"2":1,"10":1,"11":5,"12":2,"25":2,"26":1,"27":1,"32":2,"33":6,"38":1,"39":1,"40":1,"50":7,"57":2,"72":4,"77":1,"85":1,"89":1,"93":1,"94":1,"97":1,"98":1,"100":2}}],["otw",{"2":{"32":2,"37":4,"40":5}}],["otherwise",{"2":{"76":1}}],["others",{"2":{"23":1}}],["other",{"2":{"7":2,"25":1,"28":1,"56":1,"98":1}}],["our",{"2":{"31":2,"32":1,"46":1}}],["outdir",{"2":{"82":1}}],["outlined",{"2":{"22":1}}],["out",{"2":{"8":1,"10":2,"11":1,"13":1,"18":1,"20":1,"22":1,"24":1,"31":1,"34":2,"56":1,"74":1,"90":1}}],["outputpath",{"2":{"99":4}}],["output",{"2":{"7":1,"15":2,"27":1,"51":1,"83":1,"84":1,"85":2,"93":1,"100":1}}],["owns",{"2":{"50":1}}],["ownedcoins",{"2":{"85":4}}],["owned",{"2":{"25":2,"33":1,"50":2,"76":1,"85":1,"86":1}}],["owners",{"2":{"50":1}}],["ownership",{"0":{"68":1},"2":{"33":1,"54":1,"68":1,"71":1}}],["owner",{"2":{"11":1,"36":2,"50":3,"71":1,"78":2,"85":3,"86":1}}],["own",{"2":{"25":1,"42":1,"94":1}}],["overflow",{"2":{"54":1}}],["overhead",{"2":{"14":1,"15":1}}],["over",{"2":{"6":1,"26":1,"32":1,"33":1,"42":1,"71":1,"94":1,"101":1}}],["overview",{"0":{"71":1},"1":{"72":1},"2":{"3":1}}],["original",{"2":{"71":1,"72":1,"78":1,"89":2}}],["originally",{"2":{"71":1}}],["oriented",{"2":{"71":1}}],["order",{"2":{"16":1,"49":1}}],["or",{"0":{"86":1},"2":{"1":1,"2":2,"4":2,"7":1,"10":5,"11":1,"13":1,"15":2,"25":3,"26":2,"28":1,"32":1,"33":3,"37":1,"38":2,"39":2,"40":1,"49":3,"50":2,"54":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":3,"67":1,"68":1,"69":2,"71":3,"72":2,"74":1,"77":1,"83":1,"88":2,"89":2,"92":1,"94":1,"97":1,"99":1}}],["optional",{"2":{"47":1,"64":2}}],["optionally",{"2":{"1":1,"37":1}}],["option",{"0":{"64":1},"2":{"15":1,"27":1,"64":2,"97":2,"100":1}}],["options",{"2":{"7":1,"9":1,"23":1,"64":1,"78":1,"82":1,"93":1,"97":1}}],["operator",{"2":{"54":1}}],["operation",{"2":{"54":1,"84":1}}],["operations",{"0":{"73":1},"1":{"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1},"2":{"12":1,"46":1,"59":1,"72":1,"73":1,"84":1}}],["operating",{"2":{"4":2,"15":2,"67":1}}],["opens",{"2":{"46":1}}],["opening",{"2":{"33":1}}],["openai",{"2":{"16":1}}],["open",{"2":{"1":1,"15":1,"17":1,"46":2,"82":1}}],["often",{"2":{"10":1,"11":1,"36":1}}],["official",{"2":{"8":1,"16":1,"87":1,"95":1}}],["off",{"2":{"5":1,"12":1,"32":1,"42":1}}],["of",{"0":{"35":1},"1":{"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1},"2":{"0":2,"1":3,"2":2,"3":1,"4":3,"7":1,"10":1,"12":1,"15":4,"16":2,"17":1,"19":2,"23":1,"25":1,"26":2,"27":1,"30":2,"31":1,"32":3,"33":3,"35":2,"38":1,"43":2,"46":1,"48":3,"49":2,"50":2,"52":1,"53":1,"54":1,"56":1,"57":2,"58":3,"59":1,"61":2,"65":1,"70":2,"71":1,"72":2,"74":1,"76":1,"78":2,"81":3,"83":2,"84":2,"85":3,"88":1,"89":6,"91":2,"93":1,"94":1,"97":1,"98":2,"101":2}}],["onto",{"2":{"93":1}}],["onchain",{"0":{"51":1},"2":{"9":1,"47":1,"49":1}}],["once",{"2":{"0":1,"1":2,"10":1,"25":1,"31":1,"32":2,"33":1,"35":1,"37":2,"38":1,"40":1,"46":1,"50":1,"51":2,"89":1,"92":1,"93":1,"94":1}}],["onlytransactionkind",{"2":{"78":2}}],["only",{"2":{"7":1,"23":1,"26":1,"27":1,"33":3,"40":6,"50":1,"68":1,"82":1,"97":1}}],["one",{"0":{"40":1},"2":{"0":2,"1":4,"4":1,"10":2,"12":3,"15":2,"25":1,"26":1,"30":1,"32":1,"37":4,"38":2,"39":1,"40":3,"43":2,"50":1,"53":1,"54":1,"61":1,"68":1,"71":1,"72":1,"74":1,"75":2,"76":1,"88":1,"89":1,"94":1}}],["on",{"0":{"0":1,"23":1,"27":1,"28":1,"30":1,"32":1,"41":1,"72":1,"76":1},"1":{"1":1,"2":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"31":1,"32":1,"33":1,"34":1,"77":1,"78":1},"2":{"2":1,"3":3,"4":5,"8":3,"9":1,"11":1,"12":1,"14":1,"15":5,"20":2,"23":2,"24":1,"25":4,"27":4,"28":2,"29":1,"30":3,"33":3,"34":2,"35":1,"42":1,"43":1,"44":1,"45":1,"46":2,"48":2,"49":2,"50":2,"51":1,"54":1,"56":2,"57":2,"65":1,"66":1,"67":1,"71":1,"72":3,"74":2,"77":1,"78":1,"79":1,"80":2,"81":2,"83":1,"84":1,"85":4,"86":2,"87":2,"88":1,"89":1,"91":1,"92":3,"93":2,"95":1,"97":5,"99":1}}],["icon",{"2":{"26":1,"27":3}}],["immutable",{"2":{"41":1,"50":1,"54":1,"68":1}}],["immediately",{"2":{"26":1,"55":1,"94":1}}],["implement",{"2":{"78":1}}],["improve",{"2":{"73":1}}],["impatience",{"2":{"46":3}}],["impatient",{"2":{"27":1,"47":1,"52":1}}],["important",{"2":{"93":2}}],["importing",{"0":{"53":1},"2":{"33":1,"53":1}}],["imported",{"2":{"7":1,"53":1}}],["import",{"2":{"7":3,"27":1,"41":1,"42":1,"53":1,"58":1,"60":1,"61":1,"62":1,"65":1,"66":1,"75":3,"78":6,"79":1,"83":4,"84":2,"85":1,"86":3,"89":1,"98":3,"99":2}}],["imports",{"2":{"1":1,"31":1,"33":1,"52":1,"75":1,"79":1,"98":1}}],["images",{"2":{"27":1}}],["image",{"2":{"26":1,"27":1,"32":2,"33":1,"79":1}}],["io",{"2":{"8":1}}],["ids",{"2":{"12":1,"36":2,"60":1,"89":1,"93":1}}],["id",{"2":{"1":2,"10":8,"11":2,"12":1,"25":1,"27":1,"32":2,"33":2,"38":2,"40":1,"41":1,"42":2,"50":1,"51":1,"57":1,"65":1,"66":1,"72":3,"85":1,"89":6,"93":1,"94":1,"97":1,"98":5,"99":1,"100":1}}],["identity",{"2":{"54":1}}],["identifier",{"2":{"50":1}}],["identifiers",{"2":{"48":1}}],["identifying",{"2":{"48":1}}],["identify",{"2":{"48":1}}],["idea",{"2":{"43":1}}],["ideally",{"2":{"8":1,"34":1}}],["ides",{"2":{"15":1}}],["ide",{"2":{"1":1,"15":1,"24":1,"31":1}}],["i",{"2":{"1":6,"3":1,"14":2,"15":2,"16":3,"22":1,"45":1,"74":2,"75":2,"81":1,"82":2,"84":2,"85":1,"86":1,"88":1,"89":5,"92":2,"93":2,"97":2,"98":2}}],["if",{"2":{"1":1,"4":2,"7":1,"10":2,"11":1,"12":2,"13":1,"15":2,"24":1,"26":1,"27":1,"31":1,"32":1,"33":1,"38":2,"39":1,"40":1,"43":1,"46":1,"51":3,"54":1,"55":10,"56":3,"60":1,"61":1,"67":1,"74":1,"77":1,"78":1,"80":1,"82":1,"84":1,"85":3,"86":2,"90":1,"91":1,"92":2,"93":1,"97":1,"98":2,"99":2,"100":2}}],["iterate",{"2":{"85":1}}],["iteration",{"2":{"56":1}}],["item",{"2":{"33":1,"60":1,"72":1}}],["items",{"2":{"33":2,"53":1,"58":1,"59":1,"60":1}}],["itself",{"2":{"57":1,"77":1,"89":1}}],["its",{"2":{"15":1,"25":1,"33":2,"75":1}}],["it",{"2":{"0":1,"1":4,"4":2,"7":6,"9":1,"10":4,"12":1,"13":1,"15":1,"16":2,"21":1,"24":2,"25":4,"26":3,"27":3,"28":1,"29":1,"32":2,"33":6,"36":1,"40":1,"41":1,"43":4,"46":2,"47":1,"49":2,"50":1,"51":2,"54":1,"55":2,"56":1,"58":2,"64":1,"67":3,"68":2,"71":1,"72":1,"77":1,"78":1,"82":1,"83":1,"84":1,"86":2,"88":1,"90":1,"92":1,"93":2,"95":1,"97":1,"98":2,"99":3,"100":1}}],["index",{"2":{"75":2,"82":2,"83":2}}],["individual",{"2":{"26":1}}],["invalid",{"2":{"68":1,"71":1}}],["increases",{"2":{"67":1}}],["included",{"2":{"92":1}}],["includes",{"2":{"49":1}}],["include",{"2":{"46":2}}],["including",{"2":{"17":1,"32":1,"33":1,"51":1,"93":1,"98":1}}],["inside",{"2":{"77":1,"79":1}}],["insert",{"2":{"60":1}}],["insufficient",{"2":{"33":2}}],["instanceof",{"2":{"99":1,"100":1}}],["instances",{"2":{"26":1}}],["instance",{"2":{"25":1,"27":1,"32":1,"75":1,"83":1,"85":1}}],["installing",{"0":{"92":1},"2":{"15":1,"92":1,"97":1}}],["installation",{"2":{"4":1,"15":2,"92":1}}],["installed",{"2":{"4":2,"15":1,"24":1,"31":1,"97":1}}],["install",{"2":{"4":8,"15":5,"72":1,"74":1,"82":4,"92":5,"97":6,"101":1}}],["instead",{"2":{"0":1,"10":1,"43":1,"71":1,"78":1}}],["initializing",{"2":{"39":1}}],["initialized",{"2":{"40":1,"50":1,"64":1}}],["initializer",{"2":{"37":2,"38":1}}],["initializers",{"0":{"37":1}}],["initialize",{"2":{"32":2,"69":1,"72":1,"75":1,"82":2}}],["initial",{"2":{"27":2}}],["initially",{"2":{"14":1}}],["init",{"2":{"27":2,"32":3,"37":6,"38":2,"40":1,"82":2}}],["info",{"2":{"11":2,"41":1}}],["inputs",{"2":{"49":1,"76":1}}],["input",{"2":{"10":1,"36":1,"77":1}}],["int",{"2":{"75":1}}],["introductory",{"2":{"74":2}}],["introduction",{"0":{"14":1},"1":{"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1}}],["introducting",{"2":{"13":1}}],["introduces",{"2":{"71":1}}],["intro",{"2":{"22":1}}],["integers",{"2":{"54":2}}],["integrations",{"2":{"18":1}}],["integration",{"2":{"16":1}}],["internal",{"2":{"33":1}}],["interesting",{"2":{"86":1}}],["interest",{"2":{"17":1}}],["interacting",{"2":{"96":2}}],["interact",{"2":{"15":1,"46":1,"50":1,"62":1,"73":1,"81":2,"82":1,"83":1,"87":2}}],["interacts",{"2":{"3":1}}],["intellij",{"2":{"15":1}}],["into",{"2":{"1":1,"11":1,"12":1,"26":1,"32":1,"33":1,"36":1,"39":1,"40":1,"43":1,"46":2,"68":1,"70":1,"75":2,"78":1,"92":1,"93":1,"97":1}}],["in",{"0":{"45":1},"1":{"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1},"2":{"0":2,"1":4,"3":2,"5":1,"6":1,"7":1,"10":1,"12":3,"13":1,"14":1,"15":2,"16":3,"24":2,"25":2,"26":2,"27":2,"28":1,"32":4,"33":2,"34":1,"35":2,"36":1,"37":2,"39":1,"41":2,"42":1,"43":3,"46":7,"47":3,"49":2,"51":1,"53":2,"54":2,"56":1,"57":2,"60":2,"61":3,"62":2,"64":1,"65":3,"66":3,"67":4,"68":1,"71":3,"72":2,"74":1,"75":3,"76":1,"78":2,"81":1,"82":1,"85":4,"86":1,"89":3,"92":2,"93":2,"96":1,"97":2,"98":3,"100":1}}],["issues",{"2":{"92":1}}],["issue",{"2":{"92":1,"97":1,"99":1}}],["isolate",{"2":{"52":1}}],["isn",{"2":{"9":1,"43":1}}],["is",{"2":{"0":1,"1":1,"2":1,"3":1,"4":2,"7":1,"10":2,"11":3,"12":1,"14":1,"15":4,"17":1,"19":1,"21":2,"25":4,"26":1,"27":2,"28":1,"30":1,"32":5,"33":10,"35":1,"36":2,"38":2,"39":1,"40":2,"41":1,"43":2,"45":1,"46":1,"47":1,"50":2,"53":1,"54":2,"55":3,"56":2,"60":1,"64":3,"67":1,"68":3,"70":1,"71":3,"72":2,"73":1,"74":1,"78":2,"81":3,"82":1,"84":1,"85":2,"86":1,"90":1,"93":2,"96":2,"97":1,"98":1}}],["tsc",{"2":{"82":2}}],["tsconfig",{"2":{"82":2}}],["ts",{"2":{"82":4,"83":3}}],["typical",{"2":{"78":1}}],["typically",{"2":{"38":1}}],["typescript",{"0":{"73":1,"74":1,"81":1,"82":1,"96":1,"97":1},"1":{"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"97":1,"98":1,"99":1,"100":1,"101":1},"2":{"74":3,"76":1,"81":4,"82":7,"83":1,"87":1,"95":1,"97":1,"101":1}}],["types",{"0":{"54":1},"2":{"50":1,"54":3,"57":1,"65":1,"66":1,"82":1}}],["type",{"2":{"1":2,"8":1,"12":2,"25":2,"26":2,"33":3,"50":1,"54":3,"55":1,"57":1,"64":2,"65":1,"68":1,"69":2,"85":1,"86":3,"89":4}}],["ttransferpolicycap",{"2":{"33":1}}],["tutorial",{"2":{"32":1,"34":1,"81":1,"82":1}}],["tuple",{"2":{"26":1}}],["tx",{"2":{"27":2,"32":3,"33":1,"36":3,"41":2,"72":2,"75":5,"77":5,"78":15,"79":5,"86":5}}],["txcontext",{"2":{"1":1,"27":2,"32":3,"33":2,"36":4,"37":3,"38":1,"40":1,"72":2,"89":1}}],["tied",{"2":{"26":1,"33":1}}],["times",{"2":{"77":1}}],["timestamp",{"2":{"36":2,"41":4}}],["time",{"0":{"40":1,"41":1},"2":{"24":1,"37":4,"38":2,"39":1,"40":2,"41":6,"45":1,"63":1,"71":1,"93":1}}],["triggering",{"2":{"42":1}}],["tries",{"2":{"33":1}}],["try",{"2":{"40":1,"61":1,"99":1,"100":1}}],["trying",{"2":{"13":1,"14":1,"92":1,"97":1}}],["true",{"2":{"38":1,"54":2,"55":1,"56":1,"78":4,"82":3,"98":1,"100":1}}],["treated",{"2":{"72":1}}],["treat",{"2":{"71":1}}],["treasurycap",{"2":{"26":1,"27":3}}],["treasury",{"0":{"26":1},"2":{"26":3,"27":9}}],["trendy",{"2":{"23":1}}],["tracks",{"2":{"50":1}}],["tracking",{"2":{"42":1}}],["track",{"2":{"41":1}}],["tracing",{"2":{"4":1}}],["traits",{"2":{"32":2}}],["trading",{"2":{"29":1}}],["traditional",{"2":{"25":1,"71":1}}],["traded",{"2":{"85":1}}],["tradeport",{"2":{"33":1}}],["trade",{"2":{"24":1,"28":1}}],["tradable",{"2":{"23":1,"27":1,"30":1}}],["transient",{"2":{"99":1}}],["transition",{"2":{"99":1}}],["transpile",{"2":{"83":1,"93":1}}],["transpiling",{"2":{"82":1}}],["transferobjects",{"2":{"75":1,"77":1,"78":2,"86":2}}],["transferconfirm",{"2":{"33":1}}],["transfersadd",{"2":{"33":1}}],["transfers",{"2":{"33":1,"75":7}}],["transferred",{"2":{"33":2,"71":1}}],["transferrequest",{"2":{"33":4}}],["transferring",{"2":{"27":1,"33":1,"77":1,"89":1}}],["transferpolicycap",{"2":{"33":3}}],["transferpolicy",{"2":{"33":4}}],["transfer",{"2":{"1":5,"10":2,"12":2,"26":1,"27":7,"32":9,"33":22,"38":2,"40":2,"72":3,"75":6,"77":1,"86":3,"89":6}}],["transactionblock",{"2":{"78":1}}],["transaction",{"0":{"12":1,"36":1},"2":{"0":1,"1":1,"2":1,"12":2,"27":3,"32":1,"36":6,"41":1,"43":1,"49":3,"50":2,"51":2,"75":15,"76":2,"77":2,"78":19,"79":4,"86":7,"89":2,"100":1}}],["transactions",{"0":{"49":1,"75":1,"78":1},"2":{"0":1,"7":1,"8":1,"10":1,"36":1,"46":1,"49":2,"72":1,"74":1,"75":2,"76":1,"78":2,"79":1,"81":1,"86":2}}],["target",{"2":{"53":1,"78":1,"79":1,"82":1}}],["targeting",{"2":{"12":1}}],["tables",{"0":{"66":1},"2":{"66":4}}],["table",{"2":{"33":1,"66":13}}],["taught",{"2":{"27":1}}],["take",{"2":{"27":1,"37":1,"67":1,"87":1}}],["takes",{"2":{"1":1,"67":1,"89":1,"98":1}}],["taking",{"2":{"15":1}}],["two",{"2":{"10":1,"71":1,"78":1}}],["textdecoder",{"2":{"99":2}}],["textencoder",{"2":{"98":1}}],["text",{"2":{"69":1}}],["teach",{"2":{"23":1,"45":1,"81":1,"91":1}}],["tears",{"0":{"17":1},"2":{"17":1}}],["tests",{"2":{"46":1,"51":1}}],["testing",{"2":{"33":1}}],["test",{"2":{"5":1,"46":1,"47":1,"51":2,"72":1,"83":1,"97":1}}],["testnet",{"2":{"4":1,"5":1,"8":4,"51":1,"75":1,"78":2,"83":1,"97":5}}],["terminal",{"2":{"4":2,"15":2,"82":1,"92":1,"97":1}}],["t",{"2":{"1":3,"9":1,"15":2,"18":1,"24":1,"25":1,"26":1,"27":1,"31":1,"32":10,"33":6,"38":1,"39":1,"42":1,"43":1,"45":1,"46":1,"54":1,"58":1,"65":1,"68":1,"69":2,"71":1,"82":1,"88":1,"89":4,"93":1,"99":1}}],["though",{"2":{"96":1}}],["those",{"2":{"11":1,"33":1,"43":1,"53":1}}],["throw",{"2":{"99":1}}],["throws",{"2":{"55":1}}],["throughout",{"2":{"52":1}}],["through",{"2":{"30":1,"82":1,"85":1,"86":1,"89":1}}],["three",{"2":{"5":1}}],["think",{"2":{"25":1,"88":1}}],["thing",{"2":{"23":1}}],["this",{"2":{"1":6,"2":1,"3":1,"4":3,"5":3,"7":2,"8":1,"10":3,"11":2,"12":1,"13":2,"14":1,"15":4,"22":1,"23":1,"24":2,"26":1,"27":5,"28":2,"30":1,"31":3,"32":4,"33":11,"34":1,"35":2,"36":1,"41":1,"42":1,"43":1,"45":1,"46":3,"51":2,"53":2,"54":1,"55":1,"57":1,"60":3,"61":3,"62":1,"64":1,"65":3,"66":3,"67":4,"70":1,"71":2,"73":1,"74":3,"75":2,"77":1,"78":3,"81":1,"82":3,"83":2,"84":1,"85":1,"86":1,"87":1,"88":1,"89":6,"91":1,"92":7,"93":5,"94":1,"96":1,"97":7,"98":3,"100":3}}],["than",{"2":{"12":1,"13":1,"15":1,"33":1}}],["that",{"2":{"0":1,"1":1,"3":1,"6":1,"7":1,"10":1,"12":2,"16":2,"18":1,"23":1,"24":1,"25":2,"26":1,"27":5,"28":1,"30":1,"32":3,"33":6,"34":1,"36":2,"38":2,"39":3,"40":3,"43":2,"46":2,"49":2,"50":1,"51":1,"53":1,"54":2,"56":1,"57":1,"63":1,"64":1,"65":1,"66":1,"67":2,"69":1,"71":2,"72":1,"73":1,"74":1,"78":2,"82":3,"84":1,"86":2,"88":1,"91":2,"92":1,"93":1,"94":1,"100":1}}],["their",{"2":{"54":1,"57":1,"61":1,"85":1,"91":1}}],["they",{"2":{"11":1,"15":1,"16":1,"25":3,"33":2,"38":1,"42":2,"49":1,"50":2,"57":1,"58":1,"61":1,"62":1,"65":2,"66":2,"68":2,"71":1}}],["them",{"2":{"10":2,"22":1,"23":3,"25":1,"28":1,"30":1,"36":1,"42":1,"43":2,"46":1,"48":1,"50":1,"51":3,"52":1,"54":1,"55":1,"57":1,"58":1,"65":1,"67":1,"75":2}}],["then",{"2":{"4":1,"7":1,"8":1,"10":1,"12":1,"32":1,"33":1,"41":1,"42":1,"51":1,"53":1,"65":1,"72":1,"75":1,"83":1,"86":1,"92":1,"97":1,"99":1}}],["there",{"2":{"2":1,"13":1,"15":1,"16":1,"18":1,"34":1,"38":1,"40":1,"46":1,"51":1,"85":1,"87":1}}],["these",{"2":{"1":1,"15":2,"27":1,"28":1,"31":1,"33":1,"36":1,"50":2,"62":1,"72":1,"75":1,"82":1,"98":1}}],["the",{"0":{"21":1,"35":1,"83":1,"89":1},"1":{"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1},"2":{"0":1,"1":25,"3":4,"4":7,"5":11,"6":7,"7":11,"8":5,"9":3,"10":11,"11":2,"12":5,"13":4,"14":2,"15":13,"16":7,"18":1,"19":1,"20":1,"21":2,"22":3,"23":2,"24":3,"25":1,"26":7,"27":20,"28":1,"29":1,"30":2,"31":2,"32":34,"33":31,"35":3,"36":8,"37":1,"38":11,"40":5,"41":4,"42":2,"43":3,"44":1,"45":1,"46":11,"47":9,"48":6,"49":9,"50":8,"51":8,"52":2,"53":10,"54":6,"55":4,"56":6,"57":7,"58":7,"60":2,"61":4,"62":6,"63":1,"64":4,"65":5,"66":5,"67":8,"68":4,"69":3,"70":1,"71":3,"72":5,"73":2,"74":3,"75":12,"76":2,"77":5,"78":18,"79":2,"81":10,"82":5,"83":11,"84":11,"85":18,"86":20,"87":2,"89":29,"91":3,"92":10,"93":11,"94":7,"95":2,"96":5,"97":13,"98":13,"99":6,"100":8,"101":3}}],["totally",{"2":{"88":1}}],["totalling",{"2":{"25":1}}],["tostring",{"2":{"84":1}}],["tosuiaddress",{"2":{"78":4,"84":1,"86":1}}],["touch",{"2":{"82":1}}],["top",{"2":{"31":1,"89":1,"98":1}}],["toml",{"0":{"47":1},"2":{"27":1,"46":1,"47":2,"53":1}}],["tooling",{"2":{"96":1}}],["tools",{"2":{"22":1}}],["tool",{"2":{"13":2,"15":1,"51":1,"88":1,"92":1,"97":1}}],["too",{"2":{"11":1,"55":1,"68":1}}],["tokenexample",{"2":{"71":1}}],["token",{"0":{"25":1,"26":1,"27":1},"1":{"26":1},"2":{"1":1,"24":1,"25":3,"26":6,"27":4,"33":1,"41":1,"71":4,"72":5,"85":1,"89":3}}],["tokens",{"0":{"24":1,"28":1},"2":{"1":1,"2":1,"8":2,"10":1,"11":1,"23":5,"25":1,"26":4,"27":5,"28":4,"50":1,"71":1,"77":1,"85":1,"86":1,"89":1,"97":4}}],["to",{"0":{"14":1,"83":1,"98":1},"1":{"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1},"2":{"0":2,"1":10,"2":2,"3":2,"4":6,"5":7,"6":1,"7":3,"8":7,"9":2,"10":11,"11":1,"12":3,"13":1,"14":3,"15":7,"16":4,"17":1,"19":1,"20":1,"21":1,"22":3,"23":4,"24":3,"26":4,"27":9,"28":2,"29":2,"30":2,"31":2,"32":15,"33":16,"34":4,"35":3,"36":3,"37":2,"38":1,"39":2,"41":3,"42":2,"43":4,"44":1,"45":4,"46":7,"47":3,"48":1,"49":4,"50":3,"51":3,"52":1,"53":5,"54":4,"55":2,"56":3,"57":1,"58":2,"60":3,"61":5,"62":5,"64":1,"65":5,"66":3,"68":1,"70":2,"71":3,"72":4,"73":2,"74":3,"75":11,"77":3,"78":4,"79":2,"81":3,"82":1,"83":9,"84":3,"85":4,"86":7,"87":3,"88":3,"89":14,"90":3,"91":2,"92":12,"93":6,"94":4,"95":1,"96":1,"97":12,"98":5,"99":5,"100":5,"101":1}}],["latest",{"2":{"83":1,"92":3,"93":1,"97":2}}],["later",{"2":{"27":1,"33":1,"38":1,"40":1,"65":1}}],["layer",{"2":{"71":1}}],["last",{"2":{"50":1,"58":2,"64":1}}],["launching",{"0":{"24":1,"33":1},"2":{"24":1,"25":1,"30":1}}],["launch",{"2":{"23":2,"30":1,"34":1,"44":1}}],["labs",{"0":{"18":1},"2":{"16":1,"18":1,"71":1}}],["languages",{"2":{"71":1}}],["language",{"2":{"0":1,"3":1,"15":2,"20":1,"47":1,"71":1,"72":1}}],["lying",{"2":{"10":1}}],["longer",{"2":{"68":1}}],["long",{"2":{"56":1}}],["lowercase",{"2":{"52":1}}],["loaded",{"2":{"46":1}}],["looks",{"2":{"27":1}}],["loops",{"0":{"56":1},"2":{"56":1}}],["loop",{"2":{"1":2,"56":5}}],["lost",{"2":{"26":1}}],["logging",{"2":{"98":1}}],["logo",{"2":{"26":1}}],["logic",{"2":{"26":1,"40":1,"42":1,"67":1,"99":1}}],["log",{"2":{"7":1,"42":1,"75":2,"78":3,"83":1,"84":2,"85":6,"86":3,"98":2,"99":1,"100":2}}],["log=",{"2":{"5":1}}],["lock",{"2":{"26":1}}],["locked",{"2":{"4":1}}],["location",{"2":{"8":1,"85":1}}],["localnet",{"2":{"51":1,"83":1}}],["local",{"2":{"5":8,"92":1}}],["locally",{"2":{"5":1,"51":1,"72":1}}],["lot",{"2":{"0":1,"13":1}}],["lt",{"2":{"1":12,"5":2,"7":2,"8":1,"10":9,"11":2,"12":7,"25":3,"26":3,"27":1,"31":1,"32":15,"33":12,"36":1,"51":2,"54":6,"55":1,"56":1,"58":1,"60":2,"61":1,"64":2,"66":5,"69":3,"71":1,"89":20,"98":2,"99":1}}],["live",{"2":{"57":1,"72":1,"93":2}}],["limited",{"2":{"41":1}}],["limbo",{"2":{"33":1}}],["library",{"2":{"41":1,"53":1,"58":1,"60":1,"61":1,"62":1,"72":1}}],["link",{"2":{"79":1}}],["lint",{"2":{"32":1,"33":1}}],["linux",{"2":{"4":1,"15":1}}],["life",{"2":{"32":1}}],["lifecycle",{"2":{"26":1}}],["liquidity",{"2":{"27":1,"28":1,"50":1}}],["listed",{"2":{"97":1}}],["listen",{"2":{"42":1}}],["listings",{"2":{"33":1}}],["list",{"2":{"1":1,"6":1,"7":3,"10":1,"49":1,"58":1,"85":2}}],["likely",{"2":{"9":1,"15":1,"28":1,"73":1,"92":1,"97":1}}],["like",{"2":{"1":3,"5":1,"7":2,"10":3,"11":1,"12":2,"23":1,"25":1,"27":2,"28":1,"33":4,"39":1,"41":1,"42":1,"47":2,"49":1,"50":1,"54":1,"57":1,"60":3,"61":3,"62":2,"63":1,"65":3,"66":2,"67":3,"69":1,"71":2,"72":1,"75":1,"76":1,"78":1,"79":1,"89":3,"92":1,"94":1,"98":2,"100":2}}],["leftover",{"2":{"89":1}}],["least",{"2":{"93":1}}],["leave",{"2":{"56":1}}],["learnt",{"2":{"70":1}}],["learn",{"0":{"45":1},"1":{"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1},"2":{"22":1,"29":1,"34":1,"35":1,"45":1,"73":1,"81":1,"86":1,"95":1,"96":1}}],["learned",{"2":{"2":1,"29":1,"44":2,"80":1,"87":1,"95":1,"101":1}}],["learning",{"2":{"0":1,"16":1,"19":1,"87":1}}],["level",{"2":{"41":1,"71":1}}],["less",{"2":{"15":1}}],["letting",{"2":{"43":1}}],["lets",{"2":{"33":2}}],["let",{"0":{"91":1},"1":{"92":1,"93":1,"94":1,"95":1},"2":{"1":6,"12":1,"25":1,"26":2,"27":6,"31":1,"32":9,"33":2,"36":1,"41":3,"43":3,"54":9,"55":1,"56":2,"58":2,"60":1,"61":1,"62":2,"65":1,"66":2,"67":1,"68":4,"69":2,"72":1,"74":1,"75":1,"86":1,"89":8}}],["length",{"2":{"1":4,"7":1,"86":1,"89":7}}],["lengths",{"2":{"1":2,"89":1}}],["ll",{"2":{"1":2,"3":3,"4":3,"5":1,"6":1,"8":3,"10":4,"12":1,"15":5,"16":1,"19":1,"24":1,"27":2,"32":4,"33":2,"34":1,"35":1,"41":1,"42":1,"43":1,"46":2,"47":1,"51":1,"52":1,"53":2,"54":1,"55":1,"57":2,"58":2,"60":1,"61":1,"62":1,"64":1,"65":2,"66":1,"67":1,"69":1,"70":1,"73":1,"75":2,"79":1,"80":1,"81":2,"82":3,"86":1,"89":2,"92":3,"93":3,"96":2,"97":3,"98":2,"99":1,"100":1}}],["p",{"2":{"93":1}}],["pick",{"2":{"54":1}}],["piece",{"2":{"1":1,"74":1}}],["python",{"2":{"62":1}}],["pyth",{"2":{"53":4}}],["peasy",{"2":{"45":1}}],["pending",{"2":{"33":1}}],["perisist",{"2":{"98":1}}],["performance",{"2":{"71":1}}],["perform",{"2":{"39":1}}],["perfect",{"2":{"10":1,"40":1}}],["person",{"2":{"54":1}}],["perspective",{"2":{"16":1}}],["persisting",{"2":{"5":1}}],["phase",{"2":{"40":2}}],["phantom",{"2":{"32":1}}],["phrase",{"2":{"7":1}}],["png",{"2":{"26":1}}],["play",{"2":{"68":1}}],["placeholders",{"2":{"89":1}}],["place",{"2":{"21":1}}],["plug",{"2":{"33":1}}],["plus",{"2":{"33":1}}],["please",{"2":{"6":1,"74":1}}],["ptb",{"2":{"12":2,"75":1}}],["ptbs",{"0":{"12":1},"2":{"12":2}}],["pretty",{"2":{"91":1}}],["prerequisite",{"2":{"82":1}}],["prerequisites",{"0":{"31":1}}],["prefix",{"2":{"48":1}}],["practical",{"2":{"18":1}}],["print",{"2":{"85":1}}],["price",{"2":{"49":1,"53":1,"77":1}}],["primitive",{"2":{"54":1}}],["primitives",{"2":{"3":1,"15":1,"68":1}}],["prime",{"2":{"33":1}}],["primary",{"2":{"10":2}}],["privatekey",{"2":{"84":2}}],["private",{"2":{"7":1,"37":1,"57":1,"67":1,"84":3,"86":1}}],["problem",{"2":{"91":1}}],["probably",{"2":{"7":1,"10":1,"16":1,"80":1}}],["program",{"2":{"55":1,"84":1,"85":1}}],["programs",{"2":{"45":1,"46":1,"81":1,"82":1}}],["programmable",{"0":{"12":1,"75":1},"2":{"10":1,"12":1,"72":1,"74":1,"75":7}}],["programming",{"2":{"0":1,"35":1,"71":2,"72":1}}],["prove",{"2":{"39":1,"54":1}}],["provided",{"2":{"78":3,"100":1}}],["provides",{"2":{"5":1,"33":1,"40":1,"89":1}}],["provide",{"2":{"3":1,"27":1}}],["production",{"2":{"35":1,"73":1}}],["process",{"2":{"30":1}}],["proof",{"2":{"27":1,"39":1}}],["protocol",{"2":{"17":1,"96":2}}],["promise",{"2":{"14":1,"98":1,"99":1}}],["projects",{"2":{"21":1,"75":1}}],["project",{"2":{"1":3,"27":1,"31":2,"44":1,"46":1,"70":1,"72":1,"74":1,"82":4,"89":1,"94":1,"98":1}}],["powerful",{"2":{"72":1}}],["power",{"2":{"71":1}}],["populate",{"2":{"66":1}}],["popular",{"2":{"3":1,"28":1,"84":1}}],["pop",{"2":{"58":2,"89":1}}],["pools",{"2":{"50":1}}],["pool",{"2":{"37":1}}],["policyadd",{"2":{"33":1}}],["policy",{"2":{"33":30}}],["policies",{"2":{"33":2}}],["points",{"2":{"72":1}}],["point",{"2":{"16":1,"25":1}}],["post",{"2":{"8":1}}],["possible",{"2":{"2":1,"14":1}}],["portion",{"2":{"1":2,"89":2}}],["purpose",{"2":{"97":1}}],["purchasing",{"0":{"94":1}}],["pure",{"2":{"79":3}}],["push",{"2":{"58":2}}],["publisher",{"2":{"32":6,"33":3,"38":1}}],["published",{"2":{"1":1,"37":1,"38":1,"46":1,"89":1}}],["publishing",{"0":{"9":1,"51":1},"2":{"9":1,"51":1}}],["publish",{"2":{"1":2,"9":4,"27":2,"35":1,"40":2,"45":1,"51":5,"89":2,"93":1}}],["publickey",{"2":{"84":2}}],["public",{"2":{"1":4,"27":7,"32":10,"33":10,"36":2,"38":1,"41":1,"42":1,"43":2,"57":3,"60":1,"61":1,"64":1,"65":1,"66":1,"67":2,"71":2,"72":3,"84":3,"89":3}}],["puzzle",{"2":{"1":1}}],["page",{"2":{"85":2,"92":1}}],["pagination",{"2":{"85":1}}],["paste",{"2":{"82":1}}],["passing",{"2":{"75":1}}],["passes",{"2":{"54":1}}],["passed",{"2":{"32":1,"33":1,"36":1,"39":1,"41":1,"72":1}}],["pass",{"2":{"10":1,"51":1,"93":1}}],["paitient",{"2":{"52":1}}],["paid",{"2":{"32":4,"78":1}}],["pairs",{"2":{"61":1}}],["pair",{"2":{"28":1,"65":1,"84":1,"98":1}}],["patterns",{"2":{"43":1}}],["pattern",{"2":{"26":1,"40":1}}],["path",{"2":{"7":1,"9":1,"92":1,"93":1,"97":1,"98":2,"99":1}}],["pads",{"2":{"23":1}}],["parameter",{"2":{"67":1}}],["parameters",{"2":{"67":2}}],["parallel",{"2":{"2":1}}],["part",{"2":{"1":1,"33":1,"58":1,"86":1}}],["payer",{"2":{"78":1}}],["paying",{"2":{"78":1}}],["pays",{"2":{"78":2}}],["payment",{"2":{"32":2,"33":1,"77":1}}],["payments",{"0":{"77":1},"2":{"10":1,"33":1}}],["pay",{"2":{"0":1,"9":1,"10":3,"33":2,"49":2,"78":1}}],["packages",{"0":{"9":1,"46":1,"51":1},"1":{"47":1},"2":{"9":1,"21":1,"27":1,"44":1,"46":3,"47":1,"48":2,"51":1,"52":1}}],["package",{"0":{"0":1,"1":1,"21":1,"47":1,"88":1,"89":1},"1":{"1":1,"2":1,"89":1,"90":1},"2":{"1":2,"4":2,"9":2,"12":2,"15":3,"21":1,"25":1,"27":4,"32":1,"33":2,"38":1,"46":2,"47":4,"48":1,"51":6,"52":1,"66":1,"89":6,"98":2,"99":1}}],["ahead",{"2":{"80":1}}],["await",{"2":{"75":1,"78":6,"83":1,"85":2,"86":3,"98":2,"99":2,"100":2}}],["awesome",{"0":{"19":1},"2":{"19":1}}],["avoids",{"2":{"71":1}}],["available",{"2":{"8":1,"69":1,"85":1,"86":1,"97":1}}],["auctions",{"2":{"41":1}}],["automatically",{"2":{"37":1,"53":1,"76":1,"78":1,"93":1}}],["augment",{"2":{"16":1}}],["aggregator",{"2":{"85":1}}],["again",{"2":{"40":1,"78":1}}],["age",{"2":{"16":1,"57":1}}],["agnostic",{"2":{"15":1}}],["adjust",{"2":{"86":1}}],["adopted",{"2":{"71":1}}],["advanced",{"0":{"73":1},"1":{"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1},"2":{"70":1,"80":1}}],["advise",{"2":{"15":1}}],["ada",{"2":{"65":1,"68":1}}],["admincap",{"2":{"38":2,"40":1}}],["admin",{"2":{"32":1,"38":2,"39":1,"43":2}}],["addr",{"2":{"71":2}}],["addresses",{"0":{"48":1},"2":{"1":1,"6":4,"47":4,"48":6,"50":1,"60":1,"61":1,"66":1}}],["address",{"0":{"6":1},"2":{"1":2,"6":5,"7":1,"8":1,"10":3,"12":3,"27":3,"32":1,"36":3,"42":1,"46":1,"48":1,"50":1,"54":3,"60":1,"61":1,"66":3,"71":1,"75":1,"78":1,"84":1,"85":2,"86":1,"89":5}}],["added",{"2":{"65":1}}],["adding",{"2":{"38":2,"57":1,"66":1}}],["adds",{"2":{"33":2,"49":1,"58":1}}],["add",{"2":{"27":1,"31":1,"32":2,"33":6,"43":1,"50":2,"53":1,"54":1,"57":1,"65":1,"66":3,"67":1,"75":1,"79":1,"82":1,"92":1,"97":1,"98":1}}],["attempt",{"2":{"60":1}}],["attributes",{"2":{"57":2}}],["attach",{"2":{"33":1}}],["at",{"2":{"10":1,"18":1,"48":1,"55":1,"69":1,"71":1,"88":1,"89":1,"93":1}}],["ability",{"2":{"68":1,"89":1}}],["abilities",{"2":{"32":1,"37":1,"57":1,"69":1}}],["above",{"2":{"46":1,"54":1,"57":1}}],["aborts",{"2":{"55":1}}],["abort",{"2":{"43":5}}],["about",{"2":{"0":1,"11":1,"25":1}}],["able",{"2":{"32":2,"78":1,"92":1,"100":1}}],["absorbed",{"2":{"10":1}}],["app",{"2":{"42":1,"92":2,"94":1,"97":2}}],["applications",{"2":{"18":1}}],["application",{"2":{"8":1}}],["apps",{"2":{"7":1,"8":1,"80":1,"81":1}}],["accidentally",{"2":{"71":1}}],["accuracy",{"2":{"41":1}}],["accessing",{"2":{"53":1}}],["access",{"2":{"33":1,"36":3,"38":2,"39":2,"41":2,"53":2,"61":1,"72":1,"84":1,"85":1}}],["accounts",{"0":{"48":1},"2":{"48":1,"50":1}}],["account",{"2":{"25":1,"32":2,"48":1,"49":1,"71":2,"78":2}}],["across",{"2":{"24":1,"88":1}}],["acquired",{"2":{"87":1}}],["acquires",{"2":{"71":1}}],["acquire",{"2":{"8":2}}],["actions",{"2":{"37":1,"49":2}}],["activity",{"2":{"42":1}}],["active",{"2":{"5":2,"6":3,"54":1}}],["activate",{"2":{"5":1}}],["actual",{"2":{"1":1,"25":1}}],["ask",{"2":{"92":1}}],["asks",{"2":{"33":1}}],["async",{"2":{"75":1,"78":2,"83":1,"85":2,"86":1,"98":2,"99":2,"100":1}}],["aspects",{"2":{"35":1}}],["assigned",{"2":{"78":1}}],["assigning",{"2":{"55":1}}],["assign",{"2":{"37":1,"47":1,"54":1,"55":1,"78":1}}],["assigns",{"2":{"33":1}}],["asset",{"2":{"72":1}}],["assets",{"2":{"25":1,"32":1,"33":2,"68":1,"71":3,"88":1,"90":1}}],["assertion",{"2":{"43":1}}],["assertions",{"2":{"43":1}}],["assert",{"2":{"1":1,"33":1,"43":2,"55":2,"89":2}}],["assumes",{"2":{"24":1,"31":1}}],["as",{"2":{"6":2,"12":2,"14":3,"15":2,"19":1,"22":1,"28":1,"33":2,"36":1,"38":1,"41":1,"42":1,"48":1,"49":1,"55":1,"56":2,"57":3,"65":1,"67":5,"72":1,"73":1,"76":1,"77":2,"78":1,"82":1,"87":1,"89":1,"92":1,"93":1}}],["aside",{"2":{"3":1}}],["arm64",{"2":{"92":1}}],["arrays",{"2":{"62":1}}],["artist",{"2":{"57":1}}],["article",{"2":{"3":1,"13":1,"14":1,"22":2,"23":1,"24":2,"30":1,"31":2,"35":3,"45":1,"46":1,"70":1,"73":1,"74":1,"91":1,"96":1}}],["art",{"2":{"33":11}}],["around",{"2":{"10":1,"59":1,"90":1}}],["argument",{"2":{"67":1}}],["arguments",{"2":{"1":1,"12":1,"36":1,"79":1}}],["args",{"2":{"1":2,"12":1,"89":2}}],["aren",{"2":{"68":1}}],["are",{"2":{"0":1,"1":1,"8":1,"16":2,"18":1,"20":1,"23":2,"26":1,"30":2,"32":1,"33":3,"38":1,"39":1,"42":2,"45":1,"46":2,"48":4,"49":1,"50":2,"51":1,"52":1,"54":2,"57":3,"58":1,"62":1,"65":2,"66":1,"67":1,"68":1,"69":1,"71":3}}],["amp",{"0":{"31":1,"68":1,"71":1,"74":1,"81":1,"97":1},"1":{"72":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1},"2":{"1":6,"27":4,"32":9,"33":9,"36":3,"37":3,"38":1,"40":1,"41":1,"58":2,"67":3,"68":2,"71":1,"72":1,"89":8}}],["amounts",{"2":{"1":7,"10":5,"75":3,"89":10}}],["amount",{"2":{"1":7,"9":1,"27":2,"32":7,"33":2,"71":2,"75":3,"86":1,"89":7,"97":2}}],["alone",{"2":{"85":1}}],["along",{"2":{"27":1,"78":1}}],["alice",{"2":{"66":1}}],["alive",{"2":{"30":1}}],["aliases",{"2":{"47":1}}],["alias",{"2":{"5":2}}],["alternative",{"2":{"21":1}}],["although",{"2":{"15":1,"81":1}}],["almost",{"2":{"4":1}}],["always",{"2":{"4":2}}],["also",{"2":{"3":1,"5":1,"7":1,"8":1,"18":2,"24":1,"25":1,"32":2,"41":1,"57":2,"62":1,"92":2,"96":1,"97":1,"98":1}}],["already",{"2":{"1":1,"24":1,"27":1,"31":1,"53":1,"82":1}}],["allowed",{"2":{"38":1}}],["allows",{"2":{"32":1,"88":1}}],["allow",{"2":{"23":1,"32":1,"33":1,"47":1,"75":1}}],["allocated",{"2":{"1":1}}],["allocations",{"2":{"61":2}}],["allocation",{"2":{"1":3}}],["all",{"2":{"0":1,"1":2,"6":1,"7":1,"11":3,"23":1,"26":1,"31":1,"32":2,"33":3,"46":1,"48":1,"52":1,"75":1,"82":1,"85":1,"89":1,"91":1}}],["another",{"2":{"4":1,"12":1,"26":1,"38":1,"50":1,"53":1,"56":1,"78":2,"84":1,"86":1,"88":1}}],["anybody",{"2":{"32":1,"36":1}}],["anything",{"2":{"11":1,"49":1,"61":1}}],["any",{"2":{"3":1,"5":1,"7":1,"11":1,"15":1,"24":1,"28":1,"46":1,"51":1,"57":1,"65":2,"69":1,"79":1,"84":1,"86":1,"91":1,"92":2}}],["an",{"0":{"1":1,"32":1},"2":{"1":2,"2":1,"3":1,"9":1,"15":2,"18":1,"22":1,"24":1,"25":3,"27":2,"30":3,"31":1,"32":5,"33":3,"37":2,"38":2,"41":1,"43":1,"46":1,"50":2,"55":1,"57":3,"58":1,"60":4,"61":1,"66":2,"70":1,"72":1,"83":1,"92":1,"97":2}}],["and",{"0":{"6":1,"8":1,"23":1,"24":1,"26":1,"30":1,"48":1,"54":1,"67":1,"82":1,"94":1},"1":{"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"31":1,"32":1,"33":1,"34":1},"2":{"0":1,"1":5,"2":1,"3":1,"4":3,"5":3,"7":2,"8":3,"9":1,"10":7,"11":2,"12":4,"13":1,"14":2,"15":5,"16":4,"19":1,"20":2,"21":1,"22":1,"23":5,"24":2,"25":1,"26":3,"27":5,"28":1,"29":3,"30":1,"31":2,"32":5,"33":13,"35":1,"36":2,"37":2,"38":2,"40":2,"41":1,"42":2,"43":2,"44":2,"45":3,"46":5,"47":3,"48":4,"49":3,"50":2,"51":3,"52":2,"53":2,"54":2,"55":2,"56":3,"57":1,"58":2,"61":1,"62":1,"66":1,"67":3,"68":3,"69":1,"71":8,"72":6,"73":2,"74":1,"75":7,"77":1,"78":3,"79":1,"80":1,"81":3,"82":2,"83":2,"84":6,"85":3,"86":3,"87":1,"89":6,"91":3,"92":1,"93":3,"94":2,"95":1,"96":2,"97":4,"98":8,"99":3,"101":1}}],["ai",{"2":{"15":1,"16":2,"92":1}}],["aim",{"2":{"0":1,"32":1}}],["airdrops",{"2":{"17":1,"32":1}}],["airdropevent",{"2":{"1":2}}],["airdrop",{"0":{"0":1,"1":1},"1":{"1":1,"2":1},"2":{"0":1,"1":4,"2":1,"60":1}}],["aftermath",{"2":{"24":1,"27":1,"28":2}}],["after",{"2":{"0":1,"15":1,"27":1,"78":1,"79":1,"85":1,"94":1,"97":1,"100":2}}],["a",{"0":{"27":1,"28":1,"84":1,"88":1,"91":1},"1":{"89":1,"90":1,"92":1,"93":1,"94":1,"95":1},"2":{"0":3,"1":3,"2":1,"3":2,"4":1,"5":4,"7":2,"9":2,"10":5,"11":2,"12":3,"13":4,"14":1,"15":2,"17":1,"19":2,"21":1,"22":1,"24":1,"25":8,"26":7,"27":5,"28":1,"29":2,"31":1,"32":7,"33":19,"34":2,"35":1,"36":1,"37":4,"38":5,"39":5,"43":4,"44":1,"45":1,"48":1,"49":1,"50":1,"54":3,"55":1,"56":3,"57":2,"58":1,"59":1,"60":2,"61":3,"62":1,"63":2,"64":1,"65":5,"66":1,"67":7,"68":1,"69":3,"70":1,"71":3,"72":8,"75":5,"76":1,"77":3,"78":5,"79":1,"82":6,"83":1,"84":3,"85":4,"88":3,"89":5,"90":1,"91":2,"92":2,"93":1,"94":1,"95":2,"97":4,"98":1,"99":4}}],["swap",{"2":{"97":1}}],["switching",{"2":{"6":1}}],["switches",{"2":{"5":1}}],["switch",{"2":{"5":3,"6":1,"7":1}}],["slush",{"2":{"97":1}}],["slice",{"2":{"10":1}}],["ssf",{"2":{"92":1,"97":1}}],["src",{"2":{"82":4}}],["smoothly",{"2":{"82":1}}],["smart",{"0":{"79":1},"2":{"0":1,"3":3,"6":1,"14":1,"15":3,"17":1,"18":1,"35":1,"45":1,"70":1,"71":2,"72":3,"81":1}}],["sdks",{"2":{"97":1,"98":1}}],["sdk",{"0":{"73":1,"81":1,"96":1},"1":{"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"97":1,"98":1,"99":1,"100":1,"101":1},"2":{"74":2,"76":1,"82":1,"83":1,"87":1,"95":1}}],["skip",{"2":{"56":2}}],["snake",{"2":{"52":1}}],["sync",{"2":{"99":1}}],["syntactic",{"2":{"67":1}}],["syntax",{"2":{"67":1}}],["symbol",{"2":{"26":2}}],["system=",{"2":{"92":1}}],["system",{"2":{"4":2,"15":2,"38":1,"54":2,"92":1,"94":1}}],["saves",{"2":{"99":1}}],["saved",{"2":{"99":1}}],["save",{"2":{"82":1,"89":1,"97":1,"99":1}}],["saving",{"2":{"0":1}}],["safety",{"2":{"71":2}}],["safely",{"2":{"71":1,"77":1}}],["satisfied",{"2":{"33":1}}],["same",{"2":{"26":1,"29":1,"55":1,"67":1,"77":1,"85":1}}],["say",{"2":{"12":1}}],["scene",{"2":{"96":1}}],["scan",{"2":{"84":1}}],["scalability",{"2":{"71":1}}],["scratch",{"2":{"23":1}}],["scripts",{"2":{"82":1}}],["script",{"2":{"12":1}}],["scheme",{"2":{"7":2}}],["sh",{"2":{"92":2,"97":2}}],["showevents",{"2":{"78":1}}],["showeffects",{"2":{"78":1}}],["should",{"2":{"1":3,"4":1,"7":4,"10":1,"15":2,"18":1,"27":1,"30":1,"32":2,"34":1,"46":1,"83":1,"89":1,"92":1,"93":2,"94":1,"97":1,"98":1,"100":2}}],["shrinkable",{"2":{"58":1}}],["ship",{"2":{"73":1}}],["shipping",{"2":{"45":1,"90":1}}],["ships",{"2":{"4":1}}],["shared",{"2":{"33":2,"50":2}}],["share",{"2":{"21":1,"26":1,"33":2,"93":1}}],["sheet",{"0":{"3":1},"1":{"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1},"2":{"13":1,"22":1}}],["sole",{"2":{"97":1}}],["solution",{"2":{"96":1}}],["solves",{"2":{"91":1}}],["solidity",{"2":{"14":1}}],["sophisticated",{"2":{"80":1,"87":1}}],["sort",{"2":{"61":1}}],["sources",{"2":{"27":1,"46":1}}],["source",{"2":{"15":1,"17":1}}],["soon",{"2":{"14":1}}],["so",{"2":{"2":1,"6":1,"10":1,"15":1,"16":2,"22":1,"23":1,"24":1,"27":2,"28":1,"32":2,"33":2,"44":1,"57":1,"58":1,"68":1,"73":2,"78":1,"87":1,"88":1,"92":1,"93":1,"97":1}}],["something",{"2":{"36":1,"39":2,"40":1,"43":1,"55":2}}],["someone",{"2":{"33":1,"38":1,"54":1}}],["some",{"2":{"1":1,"8":1,"14":1,"15":1,"27":2,"46":1,"48":1,"74":1,"85":1,"86":2,"93":1,"97":4}}],["sponsorsignature",{"2":{"78":2}}],["sponsorkeypair",{"2":{"78":3}}],["sponsor",{"2":{"78":6}}],["sponsoredtx",{"2":{"78":7}}],["sponsoredtransaction",{"2":{"78":2}}],["sponsored",{"0":{"78":1},"2":{"76":1,"78":3}}],["spit",{"2":{"11":1}}],["spawn",{"2":{"5":2}}],["spends",{"2":{"71":1}}],["spending",{"2":{"2":1}}],["speed",{"2":{"71":1}}],["special",{"2":{"37":1,"54":1,"74":1,"76":1}}],["specified",{"2":{"27":1,"86":1}}],["specifics",{"2":{"70":1}}],["specification",{"2":{"7":1}}],["specific",{"2":{"1":1,"42":1,"44":1,"97":1}}],["specifying",{"2":{"6":1,"53":1}}],["specify",{"2":{"1":1,"7":1,"10":1,"33":2,"53":1,"64":1,"66":1,"77":1,"97":1,"98":1}}],["splitting",{"2":{"77":1}}],["splitcoins",{"2":{"75":2,"78":2,"86":1}}],["split",{"2":{"1":2,"10":4,"25":1,"32":5,"75":4,"78":1,"86":3,"89":3}}],["stick",{"2":{"54":1}}],["still",{"2":{"15":1}}],["studio",{"2":{"46":1}}],["stuck",{"2":{"4":1,"33":1}}],["strict",{"2":{"40":1,"66":1,"82":1}}],["strings",{"0":{"62":1},"2":{"31":1,"33":1,"62":4,"66":1}}],["string",{"2":{"31":2,"32":8,"33":4,"57":1,"61":1,"62":9,"64":4,"65":2,"66":4,"67":2,"68":1,"69":2,"79":3,"84":1,"98":2,"99":3,"100":1}}],["structs",{"0":{"57":1},"2":{"31":1,"32":1,"42":2,"52":1,"57":6,"67":1,"72":1}}],["structures",{"0":{"54":1}}],["structure",{"2":{"11":1,"53":1,"66":1}}],["struct",{"2":{"1":2,"25":2,"27":1,"32":6,"33":4,"36":1,"38":2,"41":1,"42":1,"57":6,"60":2,"61":2,"64":2,"65":2,"66":1,"67":3,"69":2,"71":1,"72":1}}],["std",{"2":{"31":1,"33":1,"53":1,"62":1,"71":1}}],["step",{"2":{"33":3}}],["steps",{"2":{"28":1,"46":1}}],["stealth",{"2":{"5":1}}],["style",{"2":{"19":1}}],["storing",{"2":{"65":1}}],["storage",{"2":{"34":1,"92":1,"96":1,"101":1}}],["stores",{"2":{"60":1,"65":1}}],["stored",{"2":{"26":1,"32":1,"50":1,"57":1,"71":1}}],["store",{"2":{"1":1,"25":2,"32":5,"33":2,"34":2,"38":1,"57":1,"60":1,"61":1,"65":1,"69":2,"72":1,"89":1,"95":1}}],["stop",{"2":{"18":1,"38":1}}],["stack",{"2":{"80":1,"91":1,"101":1}}],["stacked",{"2":{"18":1}}],["static",{"2":{"91":1,"93":3}}],["status",{"2":{"49":1}}],["state",{"2":{"5":1,"42":1,"49":1,"52":2,"63":1,"81":1,"83":1}}],["standard",{"0":{"77":1},"2":{"48":1,"53":1,"58":1,"72":1}}],["standards",{"2":{"25":1}}],["star",{"2":{"33":1}}],["start",{"2":{"5":2,"7":1,"8":1,"14":1,"15":1,"29":1,"36":1,"41":1,"44":1,"45":1,"74":1,"80":1,"82":2,"96":1,"97":1}}],["started",{"0":{"4":1,"15":1,"24":1,"31":1,"74":1,"82":1,"97":1},"1":{"5":1},"2":{"72":1}}],["sites",{"2":{"93":4}}],["site",{"0":{"91":1,"92":1,"93":1},"1":{"92":1,"93":1,"94":1,"95":1},"2":{"91":1,"92":8,"93":9,"94":1,"95":1,"97":1}}],["simply",{"2":{"77":1,"94":1}}],["simple",{"2":{"0":1,"10":1}}],["simultaneously",{"2":{"68":1}}],["similar",{"2":{"52":1,"66":1,"83":1}}],["sizes",{"2":{"54":1}}],["size",{"2":{"48":1}}],["side",{"2":{"42":1}}],["signtransaction",{"2":{"78":3}}],["signandexecutetransaction",{"2":{"75":2,"78":1,"86":2}}],["signatures",{"2":{"78":3}}],["signature",{"2":{"1":1,"78":3,"89":1}}],["sign",{"2":{"75":2,"78":1,"79":1,"86":1}}],["signer",{"2":{"54":2,"71":2,"75":1,"78":1,"86":1,"98":2,"100":2}}],["signed",{"2":{"36":1}}],["signs",{"2":{"49":1,"78":2}}],["significant",{"2":{"28":1,"81":1}}],["since",{"2":{"3":1,"7":1,"26":1,"45":1,"68":1,"89":1}}],["single",{"2":{"2":1,"12":1,"39":1,"75":1,"90":1}}],["sudo",{"2":{"92":1}}],["submit",{"2":{"78":1}}],["subdir",{"2":{"53":1}}],["sugar",{"2":{"67":1}}],["such",{"2":{"49":1,"87":1}}],["succeed",{"2":{"19":1}}],["successful",{"2":{"16":1,"78":2,"86":1}}],["successfully",{"2":{"1":1,"51":1,"75":1,"100":1}}],["success",{"2":{"14":1}}],["suffix",{"2":{"38":1}}],["suffices",{"2":{"13":1}}],["suspects",{"2":{"33":1}}],["supply",{"2":{"26":1,"63":1}}],["supports",{"2":{"54":1}}],["support",{"2":{"15":1,"57":1,"81":1}}],["surely",{"2":{"89":1}}],["sure",{"2":{"1":1,"79":1,"89":2,"97":1}}],["suins",{"2":{"95":1}}],["suits",{"2":{"82":2}}],["suitable",{"2":{"9":1}}],["suiprivkey1qr3dtpdvecp2usjah06uyw8d8jvx9syqykxlu5x45cymq8lxn7hz2cqpwte",{"2":{"78":1}}],["suiprivkey1qq9r6rkysny207t5vr7m5025swh7w0wzra9p0553paprhn8zshqsx2rz64r",{"2":{"75":1,"78":2,"84":1,"86":1}}],["suiclient",{"2":{"75":2,"78":4,"83":7,"84":2,"85":2,"86":2,"98":4}}],["sui",{"0":{"0":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"11":1,"14":1,"15":1,"16":1,"17":1,"18":1,"23":1,"25":1,"27":1,"28":1,"30":1,"32":1,"41":1,"45":1,"71":1,"72":1,"73":1,"74":1,"76":1,"81":1,"82":1,"83":1,"84":1,"85":1},"1":{"1":1,"2":1,"4":1,"5":2,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"15":1,"16":1,"17":2,"18":2,"19":2,"20":2,"21":2,"22":1,"24":1,"25":1,"26":2,"27":1,"28":1,"29":1,"31":1,"32":1,"33":1,"34":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"72":1,"74":1,"75":1,"76":1,"77":2,"78":2,"79":1,"80":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1},"2":{"1":8,"2":1,"3":2,"4":12,"5":7,"6":3,"7":5,"8":6,"9":3,"10":11,"11":3,"12":3,"13":3,"14":2,"15":11,"16":2,"17":1,"18":1,"21":1,"22":1,"23":1,"24":4,"25":2,"26":2,"27":6,"28":1,"30":4,"31":7,"32":1,"33":15,"34":1,"35":3,"36":1,"40":1,"41":4,"42":1,"44":1,"45":2,"46":3,"47":1,"48":4,"50":2,"51":5,"53":4,"54":1,"57":1,"60":2,"61":2,"65":2,"66":3,"67":1,"70":2,"71":2,"72":13,"73":2,"74":5,"75":3,"76":2,"77":1,"78":7,"79":1,"80":2,"81":4,"82":3,"83":5,"84":6,"85":5,"86":5,"87":3,"88":1,"89":9,"94":3,"97":10,"98":5,"100":1}}],["select",{"2":{"94":1}}],["selects",{"2":{"76":1}}],["self",{"2":{"1":1,"27":1,"31":4,"32":1,"33":3,"53":2,"60":1,"61":1,"62":1,"65":2,"66":1,"67":3,"72":2}}],["semantics",{"2":{"71":1}}],["sequel",{"2":{"35":1}}],["secret",{"2":{"75":1}}],["seconds",{"2":{"72":1}}],["secure",{"2":{"71":1,"72":1}}],["security",{"2":{"7":1}}],["sections",{"2":{"47":2}}],["section",{"2":{"33":1,"47":2,"53":1}}],["sense",{"2":{"44":1}}],["sensitive",{"2":{"39":1,"48":1}}],["sentiments",{"2":{"45":1}}],["sent",{"2":{"27":1,"32":1,"89":1}}],["sendfud",{"2":{"86":2}}],["sends",{"2":{"36":1,"49":1}}],["sender",{"2":{"27":2,"32":8,"33":1,"36":3,"38":2,"40":1,"49":1,"72":1,"78":4,"86":1}}],["sending",{"2":{"0":1,"1":1,"7":1,"10":1,"12":1,"32":1,"36":1,"46":1,"49":1,"78":1}}],["send",{"0":{"86":1},"2":{"0":2,"1":4,"2":1,"10":2,"25":1,"75":2,"77":1,"84":1,"86":2,"88":1,"89":3,"90":1}}],["separate",{"2":{"26":1,"27":1}}],["separates",{"2":{"26":1}}],["searching",{"2":{"20":1}}],["search",{"2":{"20":2}}],["servers",{"2":{"91":1}}],["services",{"2":{"91":1}}],["service",{"2":{"5":1,"94":2,"95":1}}],["serious",{"2":{"26":1}}],["series",{"2":{"14":1,"15":1,"34":1}}],["see",{"2":{"7":2,"28":1,"46":1,"78":1,"97":1}}],["setsender",{"2":{"78":4}}],["setgasowner",{"2":{"78":2}}],["setgaspayment",{"2":{"77":1}}],["setgasprice",{"2":{"77":1,"78":1}}],["setgasbudget",{"2":{"77":1,"78":1}}],["setup",{"2":{"37":1,"40":1,"89":1,"92":2,"97":2}}],["settings",{"2":{"77":1}}],["setting",{"0":{"30":1},"1":{"31":1,"32":1,"33":1,"34":1}}],["set",{"2":{"5":1,"14":1,"22":1,"24":1,"27":1,"31":2,"36":1,"38":1,"46":2,"60":6,"77":2,"78":1,"79":1,"82":1,"84":1,"86":1,"92":3,"93":1,"97":1,"100":1}}],["s",{"0":{"20":1,"25":1,"91":1},"1":{"26":1,"92":1,"93":1,"94":1,"95":1},"2":{"0":1,"1":2,"2":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":3,"12":1,"13":2,"15":3,"16":2,"24":1,"25":1,"26":2,"27":5,"28":1,"30":1,"31":1,"32":5,"33":11,"34":1,"36":4,"37":1,"38":1,"39":1,"43":2,"47":1,"51":1,"54":1,"55":1,"57":1,"58":1,"61":1,"66":1,"67":1,"69":1,"71":1,"72":1,"74":2,"78":5,"79":1,"84":3,"85":1,"86":1,"87":1,"88":1,"89":1,"91":3,"93":1,"94":1,"99":1,"100":1}}]],"serializationVersion":2}
